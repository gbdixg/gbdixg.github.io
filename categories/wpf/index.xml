<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WPF on Write-Verbose</title>
    <link>https://write-verbose.com/categories/wpf/</link>
    <description>Recent content in WPF on Write-Verbose</description>
    <image>
      <title>Write-Verbose</title>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 21 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/categories/wpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a GUI App with PowerShell and WPF - Part 1 Runspaces</title>
      <link>https://write-verbose.com/2023/03/21/PowerShellWPFPt1/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/21/PowerShellWPFPt1/</guid>
      <description>Create a responsive WPF app using PowerShell Runspaces to simulate multiple threads</description>
      <content:encoded><![CDATA[<p><strong>Things I learned creating a GUI tool with PowerShell and WPF.</strong><br>
The snippets in this article are based on the <a href="https://github.com/gbdixg/Show-Win32AppUI">Show-Win32AppUI tool</a> available on GitHub.</p>
<h1 id="disclaimer">Disclaimer</h1>
<p>I realise PowerShell isn&rsquo;t suited to creating GUI apps. The main reason to use PowerShell is <em>supportability</em>. Specifically, when working with Colleagues who aren&rsquo;t comfortable maintaining a compiled language like C#. Its far easier to make small changes to variables or paths in a script.</p>
<h1 id="why-wpf">Why WPF?</h1>
<p>WPF is a more modern and flexible choice for a UI than the something like WinForms.  There are many newer frameworks available, but most require a runtime on the target platform.  WPF is easy to deploy as it&rsquo;s built-into the .NET Framework and available by default on Windows 10/11.</p>
<h1 id="part1---design-the-app-around-powershell-runspaces">Part1 - Design the app around PowerShell Runspaces</h1>
<p>If you try to create a GUI app with a single thread, it will be unresponsive and hang whenever an action takes more than a few seconds. PowerShell runs under a single thread (STA mode) making it unsuitable for a responsive GUI app.  However, creating separate <em>Runspaces</em> is a workaround for this problem. Runspaces are analogous to spinning up new PowerShell sessions in the background to execute discrete script blocks.</p>
<p>While Runspaces are effective, they also add a lot of complexity. For example:</p>
<ul>
<li>Functions and variables are not shared between Runspaces by default and have to be imported when the Runspace is started.</li>
<li>You should use a thread-safe collection when updating shared variables inside a Runspace.</li>
<li>The WPF UI can&rsquo;t be updated directly from a separate Runspace</li>
<li>Writing to a single file from multiple Runspaces requires a locking mechanism, such as a Mutex</li>
<li>The lifecycle of Runspaces must be managed, capturing output at completion</li>
<li>Warning, Verbose and Error streams in the Runspace are not captured by default</li>
<li>Warning, Verbose and Error streams do not appear in the console by default.</li>
</ul>
<p>These concepts are covered in more detail below.</p>
<h2 id="sharing-variables-functions-and-modules-with-a-runspace">Sharing variables, functions and modules with a Runspace</h2>
<p><strong>Required modules</strong> must be specifically loaded into the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.initialsessionstate?view=powershellsdk-7.3.0">InitialSessionState</a> of the Runspace. The Runspace won&rsquo;t automatically have access to modules already loaded in the <em>parent</em> PowerShell session.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example of importing modules into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$modulesToLoad</span><span class="p">=</span><span class="vm">@</span><span class="p">(</span><span class="s1">&#39;Microsoft.Graph.Intune&#39;</span><span class="p">,</span><span class="s1">&#39;MSAL.PS&#39;</span><span class="p">)</span> <span class="c"># Must be installed on the computer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$initialSessionState</span> <span class="p">=</span> <span class="p">[</span><span class="no">initialsessionstate</span><span class="p">]::</span><span class="n">CreateDefault</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$module</span> <span class="k">in</span> <span class="nv">$modulesToLoad</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$initialSessionState</span><span class="p">.</span><span class="py">ImportPSModule</span><span class="p">(</span><span class="nv">$module</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span></code></pre></div><p>You can also import <strong>standalone Functions</strong> into a Runspace using the <em>InitialSessionState</em>. The following imports functions already loaded in the <em>parent</em> session, but you could also load directly from a file on disk.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example importing parent session functions into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$FunctionsToImport</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s1">&#39;Write-TxtLog&#39;</span><span class="p">,</span><span class="s1">&#39;Get-APIResults&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$function</span> <span class="k">in</span> <span class="nv">$functionsToImport</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$definition</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="s2">&#34;Function:\</span><span class="nv">$Function</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$entry</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Management</span><span class="p">.</span><span class="py">Automation</span><span class="p">.</span><span class="py">Runspaces</span><span class="p">.</span><span class="py">SessionStateFunctionEntry</span> <span class="n">-ArgumentList</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$definition</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$initialSessionState</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="nv">$entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Variables</strong> can be shared with a Runspace using the <strong>SetVariable</strong> method of the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.sessionstateproxy?view=powershellsdk-7.3.0">SessionStateProxy</a> class.  SetVariable parameters are the <em>variable name</em> (without the &lsquo;$&rsquo;) and the value to set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example importing parent session variables into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$VariablesToImport</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="s1">&#39;displayName&#39;</span><span class="p">)</span> <span class="c"># existing variables in the parent session</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">Foreach</span><span class="p">(</span><span class="nv">$var</span> <span class="k">in</span> <span class="nv">$VariablesToImport</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$VarValue</span> <span class="p">=</span> <span class="nb">Get-Variable</span> <span class="n">-Name</span> <span class="nv">$Var</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-ExpandProperty</span> <span class="n">Value</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="nv">$Var</span><span class="p">,</span><span class="nv">$VarValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="runspace-output-using-a-thread-safe-collection">Runspace output using a thread-safe collection</h2>
<p>Output from a Runspace can be captured during execution using a thread-safe collection imported from the parent session. When a Runspace updates the collection the updated values are available in the parent session and any concurrent Runspaces that also import the collection.  Thread safe collections usually need to be <em>locked</em> during update to prevent conflicts.</p>
<p>With a <strong>synchronised Arraylist</strong>, values added in the Runspace will immediately available to all other Runspaces and the parent session, as in following example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example using locks on a thread safe collection ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$BackgroundJobs</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.collections.arraylist</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Collections</span><span class="p">.</span><span class="n">ArrayList</span><span class="p">))</span> <span class="c"># Thread safe collection</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;BackgroundJobs&#39;</span><span class="p">,</span><span class="nv">$BackgroundJobs</span><span class="p">)</span> <span class="c"># Pass the variable into the RunSpace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># This is the Runspace script block</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># lock</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="s2">&#34;New item&#34;</span><span class="p">)</span> <span class="c"># modify ArrayList</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># unlock</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">},</span><span class="vm">$True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span><span class="p">.</span><span class="py">Runspace</span> <span class="p">=</span> <span class="nv">$Runspace</span>
</span></span><span class="line"><span class="cl"><span class="vm">$null</span> <span class="p">=</span> <span class="nv">$PSCode</span><span class="p">.</span><span class="py">BeginInvoke</span><span class="p">()</span>
</span></span></code></pre></div><p>There are also <em>Queues and Stacks</em> in .NET that automatically implement locking and don&rsquo;t need the System.Threading.Monitor code in the above example e.g. a <em>ConcurrentQueue</em>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### ConcurrentQueue example - doesn&#39;t need System.Threading.Monitor ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Collections.Concurrent.ConcurrentQueue[psobject]</span><span class="p">]::</span><span class="n">new</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryAdd</span><span class="p">([</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span> <span class="n">givenName</span> <span class="p">=</span> <span class="s1">&#39;Bill&#39;</span><span class="p">;</span><span class="n">sn</span><span class="p">=</span><span class="s1">&#39;Gates&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryAdd</span><span class="p">([</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span> <span class="n">givenName</span> <span class="p">=</span> <span class="s1">&#39;Steve&#39;</span><span class="p">;</span><span class="n">sn</span><span class="p">=</span><span class="s1">&#39;Jobs&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;colQueue&#39;</span><span class="p">,</span><span class="nv">$colQueue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># This is the Runspace script block</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># No locking required when ConcurrentQueue is modified in the Runspace</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$Entry</span> <span class="p">=</span> <span class="vm">$null</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryDequeue</span><span class="p">([</span><span class="no">ref</span><span class="p">]</span><span class="nv">$Entry</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Write-Output</span> <span class="nv">$Entry</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"> <span class="p">},</span><span class="vm">$True</span><span class="p">)</span>   
</span></span></code></pre></div><p>More information on thread safe collections is available <a href="https://learn.microsoft.com/en-us/dotnet/standard/collections/thread-safe/">here</a></p>
<h2 id="how-to-update-the-wpf-user-interface-from-another-runspace">How to update the WPF user interface from another Runspace</h2>
<p>If you try to modify the WPF user interface from a separate Runspace, PowerShell will throw an error indicating only the owning thread (Runspace) can update it.</p>
<p><img loading="lazy" src="/img/UIThreadError2.png" alt="UIError"  />
</p>
<p>The solution is to wrap the update in a <strong>Dispatcher.Invoke</strong> method as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example updating a WPF control from another thread (Runspace) ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># In the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="c"># txt_SetupFile is a WPF text box created in the parent session of the Runspace</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">txt_SetupFile</span><span class="p">.</span><span class="py">Dispatcher</span><span class="p">.</span><span class="py">Invoke</span><span class="p">([</span><span class="no">action</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="py">txt_SetupFile</span><span class="p">.</span><span class="py">Text</span> <span class="p">=</span> <span class="s2">&#34;Successfully updated from another Runspace&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span><span class="s2">&#34;Normal&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="writing-to-the-same-log-file-from-separate-runspaces">Writing to the same log file from separate Runspaces</h2>
<p>Runspaces also make it more complex to write to a single log file. There is potential for a deadlock or <a href="https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#race-conditions">race condition</a> to occur. A <strong>Mutex</strong> is one way to implement the required locking:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example using a Mutex lock before writing to a log file ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># In the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="c"># LogMutex is an arbitrary name but must be the same when used in any Runspace and the parent session</span>
</span></span><span class="line"><span class="cl"><span class="nv">$mtx</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Threading</span><span class="p">.</span><span class="py">Mutex</span><span class="p">(</span><span class="vm">$false</span><span class="p">,</span> <span class="s2">&#34;LogMutex&#34;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">If</span> <span class="p">(</span><span class="nv">$mtx</span><span class="p">.</span><span class="py">WaitOne</span><span class="p">()){</span> <span class="c"># Wait until this Runspace can get a lock on the LogMutex object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># Lock obtained. Other Runspaces are now waiting</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Add-Content</span> <span class="n">-Path</span> <span class="nv">$logFile</span> <span class="n">-Value</span> <span class="nv">$Message</span>  <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">void</span><span class="p">]</span><span class="nv">$mtx</span><span class="p">.</span><span class="py">ReleaseMutex</span><span class="p">()</span> <span class="c"># release the lock</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$mtx</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="managing-runspace-lifecycle">Managing Runspace lifecycle</h2>
<p>A Runspace executes its script block asynchronously and output (if any) is available at the end. The parent session must manage Runspaces, checking for completion, processing output and ultimately disposing of them.  If you don&rsquo;t dispose of Runspaces they will persist until the parent PowerShell session is closed and could eat-up memory.</p>
<p>A <strong>Timer</strong> is a common way to manage Runspaces in an event-driven WPF script. When the Timer event fires, its script blocks checks for Runspace completion as in the example below. A thread safe collection is used to keep track of Runspaces until they are disposed of.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example Timer code to clean-up completed Runspaces ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Create a collection to track Runspaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PS</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">(</span><span class="nv">$codeToRunInRunspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$handle</span> <span class="p">=</span> <span class="nv">$PS</span><span class="p">.</span><span class="py">BeginInvoke</span><span class="p">()</span> <span class="c"># Start the runspace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Add the new Runspace to the RunspaceJobs collection</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceJobs</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.collections.arraylist</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Collections</span><span class="p">.</span><span class="n">ArrayList</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># lock</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="py">Add</span><span class="p">([</span><span class="no">PSCustomObject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">powerShell</span> <span class="p">=</span> <span class="nv">$PS</span>  <span class="c"># System.Management.Automation.PowerShell object</span>
</span></span><span class="line"><span class="cl">        <span class="n">runspace</span> <span class="p">=</span> <span class="nv">$handle</span> <span class="c"># System.Management.Automation.PowerShellAsyncResult Object</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span> <span class="p">|</span> <span class="nb">Out-Null</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># unlock</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Timer to manage Runspace lifecycle</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Windows</span><span class="p">.</span><span class="py">Forms</span><span class="p">.</span><span class="py">Timer</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Enabled</span> <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Interval</span> <span class="p">=</span> <span class="mf">5000</span>  <span class="c"># Timer code runs every 5 seconds</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Add_Tick</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># In the timer code</span>
</span></span><span class="line"><span class="cl">    <span class="k">Foreach</span><span class="p">(</span><span class="nv">$job</span> <span class="k">in</span> <span class="nv">$Script:RunspaceJobs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">IsCompleted</span> <span class="o">-eq</span> <span class="vm">$True</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">           <span class="c"># Capture completed Runspace output and dispose of it to free-up memory</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$RSOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">EndInvoke</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="n">runspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="c"># Remove the job from the tracking collection</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="py">Remove</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Host</span> <span class="s2">&#34;Runspace disposal Failed &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="c">#foreach</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">})</span><span class="c">#End of timer scriptblock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Start</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="capturing-verbose-warning-and-error-streams-from-a-runspace">Capturing Verbose, Warning and Error streams from a Runspace</h2>
<p>By default, the Runspace output streams are not displayed in the parent session console and are lost when the Runspace is disposed.<br>
The output can be captured at Runspace completion using the <strong>Streams</strong> object. The modification below to the Timer script block saves the output to a log file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">#### Modified Timer code to capture additional output streams at clean-up ####</span>
</span></span><span class="line"><span class="cl"><span class="k">Foreach</span><span class="p">(</span><span class="nv">$job</span> <span class="k">in</span> <span class="nv">$Global:BackgroundJobs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">IsCompleted</span> <span class="o">-eq</span> <span class="vm">$True</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Runspace &#39;</span><span class="p">$(</span><span class="nv">$job</span><span class="p">.</span><span class="py">powershell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="s2">&#39; completed...&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c"># Could also include &#39;DEBUG&#39; and &#39;Information&#39; streams if used in your Runspaces</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$Streams</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Verbose&#39;</span><span class="p">=</span><span class="s1">&#39;VERBOSE&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Warning&#39;</span><span class="p">=</span><span class="s1">&#39;WARN&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Error&#39;</span><span class="p">=</span><span class="s1">&#39;ERROR&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">Foreach</span><span class="p">(</span><span class="nv">$StreamType</span> <span class="k">in</span> <span class="nv">$Streams</span><span class="p">.</span><span class="n">Keys</span><span class="p">){</span>                        
</span></span><span class="line"><span class="cl">            <span class="nv">$StreamOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powershell</span><span class="p">.</span><span class="py">Streams</span><span class="p">.</span><span class="s2">&#34;</span><span class="nv">$StreamType</span><span class="s2">&#34;</span>  <span class="c"># Capture the Runspace output for each stream</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="nv">$StreamOutput</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$StreamOutput</span> <span class="p">|</span> <span class="nb">Foreach-Object</span> <span class="p">{</span> <span class="nb">Write-TxtLog</span> <span class="nv">$_</span> <span class="n">-indent</span> <span class="mf">2</span> <span class="n">-severity</span> <span class="vm">$</span><span class="p">(</span><span class="nv">$Streams</span><span class="p">[</span><span class="nv">$StreamType</span><span class="p">])</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Remove-Variable</span> <span class="n">-name</span> <span class="s1">&#39;StreamOutput&#39;</span> <span class="n">-force</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Disposing of runspace...&#34;</span> <span class="n">-indent</span> <span class="mf">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$RSOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">EndInvoke</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="n">runspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c"># Remove the job from the tracking list</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="py">Remove</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Failed &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span> <span class="n">-indent</span> <span class="mf">2</span> <span class="n">-severity</span> <span class="n">ERROR</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c">#foreach</span>
</span></span></code></pre></div><h2 id="displaying-verbose-warning-and-error-streams-in-the-console">Displaying Verbose, Warning and Error Streams in the console</h2>
<p>The approach above captures output when the Runspace code has completed. If you want feedback in the console during execution there are a couple of methods.</p>
<p>Firstly, the simplest option is to use the <strong>.NET Console.Writeline()</strong> method. Although this doesn&rsquo;t capture the PowerShell streams, it is a simple way to provide real-time console output in the parent session.<br>
You will need to implement your own colour-coding to distinguish between warnings or errors if needed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example Runspace code to write to parent PowerShell console ###</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">console</span><span class="p">]::</span><span class="n">ForegroundColor</span><span class="p">=</span><span class="s1">&#39;YELLOW&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">Console</span><span class="p">]::</span><span class="n">WriteLine</span><span class="p">(</span><span class="s1">&#39;Username was not found&#39;</span><span class="p">)</span>  <span class="c"># Automatically writes to the parent session</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">console</span><span class="p">]::</span><span class="n">ResetColor</span><span class="p">()</span>
</span></span></code></pre></div><p>Alternatively, you could pass the built-in $Host variable from the parent session into the Runspace and use methods like WriteVerboseLine() as shown below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example writing to parent console using the $Host variable </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;ParentHost&#39;</span><span class="p">,</span><span class="nv">$Host</span><span class="p">)</span>  <span class="c"># Built-in host variable passed into the Runspace as $ParentHost</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Write to the parent console from the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">ui</span><span class="p">.</span><span class="py">WriteVerboseLine</span><span class="p">(</span><span class="s2">&#34;Realtime verbose output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">UI</span><span class="p">.</span><span class="py">WriteWarningLine</span><span class="p">(</span><span class="s2">&#34;Realtime warning output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">UI</span><span class="p">.</span><span class="py">WriteErrorLine</span><span class="p">(</span><span class="s2">&#34;Realtime error output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/gbdixg/Show-Win32AppUI">Show-Win32AppUI tool</a> for an example of using these ideas together in a WPF app.</p>
<p>See <a href="/2023/03/21/PowerShellWPFPt2/">part2 of this series</a> for information on WPF controls, events and XAML.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
  </channel>
</rss>
