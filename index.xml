<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Write-Verbose</title>
    <link>https://write-verbose.com/</link>
    <description>Recent content on Write-Verbose</description>
    <image>
      <title>Write-Verbose</title>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 19 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Audit Installed VSCode Extensions with PowerShell</title>
      <link>https://write-verbose.com/2023/05/19/AuditVSCodeExt/</link>
      <pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/05/19/AuditVSCodeExt/</guid>
      <description>Get installed Visual Studio Code extensions on a local or remote computer</description>
      <content:encoded><![CDATA[<p>The recent incident of malicious extensions in the Visual Studio Code Marketplace got me thinking about how to audit extensions across a large estate. This post includes a script to get installed extensions on a local or remote computer.</p>
<p>You&rsquo;re probably aware of the <a href="https://www.bleepingcomputer.com/news/security/malicious-microsoft-vscode-extensions-steal-passwords-open-remote-shells/" target="_blank">recent discovery of malicious extensions</a> in the VSCode Marketplace.</p>
<blockquote>
<p>&lsquo;Theme Darcula dark&rsquo; – Described as &ldquo;an attempt to improve Dracula colors consistency on VS Code,&rdquo; this extension was used to steal basic information about the developer&rsquo;s system&hellip;downloaded over 45,000 times</p>
</blockquote>
<blockquote>
<p>&lsquo;python-vscode&rsquo; – This extension was downloaded 1,384 times despite its empty description and uploader name of &rsquo;testUseracc1111,&rsquo;. Analysis of its code showed that it is a C# shell injector that can execute code or commands on the victim&rsquo;s machine.</p>
</blockquote>
<p>VSCode extensions are installed in the user profile and do not appear in Configuration Manager or Intune inventory. Although Defender for Endpoint is able to centrally report on installed Edge browser extensions in the user profile, this does not extend to VSCode.</p>
<h2 id="enterprise-reporting">Enterprise reporting</h2>
<p>The script below is just the first part of a solution to audit installed VSCode extensions. Suggestions to capture information across a large estate include:</p>
<ul>
<li>Use <a href="https://github.com/proxb/PoshRSJob" target="_blank">PoshRSJob</a> or <a href="https://github.com/PaulHigin/PSThreadJob" target="_blank">PSThreadJob</a> to rapidly query online computers over the network</li>
<li>Save the output to the local registry and use <a href="https://askgarth.com/blog/how-to-use-regkeytomof/" target="_blank">RegKeytoMof</a> to bring it into the Configuration Manager inventory</li>
<li>Save the output to a file or registry key and <a href="https://msendpointmgr.com/2021/04/12/enhance-intune-inventory-data-with-proactive-remediations-and-log-analytics/" target="_blank">upload to LogAnalytics</a></li>
</ul>
<h2 id="example-script-output">Example script output</h2>
<p>The VSCode extension script below is similar to the <a href="/2018/12/15/audit-google-chrome-extensions/">Chrome Extension script</a> published some time ago.</p>
<p>This is what the output looks like:</p>
<pre tabindex="0"><code class="language-CMD" data-lang="CMD">C:\&gt; Get-VSCodeExt

ExtensionID         : eliostruyf.vscode-msgraph-autocomplete
Version             : 1.2.0
Publisher           : Elio Struyf
Path                : c:/Users/gd/.vscode/extensions/eliostruyf.vscode-msgraph-autocomplete-1.2.0
MarketPlaceURL      : https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-msgraph-autocomplete
MarketPlaceInstalls : 4359
Source              : https://github.com/estruyf/vscode-msgraph-autocomplete

ExtensionID         : redhat.vscode-yaml
Version             : 1.12.2
Publisher           : Red Hat
Path                : c:/Users/gd/.vscode/extensions/redhat.vscode-yaml-1.12.2
MarketPlaceURL      : https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml
MarketPlaceInstalls : 12120909
Source              : https://github.com/redhat-developer/vscode-yaml.git
</code></pre><h2 id="powershell-script">PowerShell Script</h2>
<p>Get-VSCodeExts.ps1:</p>
<script type="application/javascript" src="https://gist.github.com/gbdixg/a73a68905b0a630e16c465999e298611.js"></script>

<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Purview Information Protection Deep Dive Pt3 - Recommendations and Limitations</title>
      <link>https://write-verbose.com/2023/04/26/sensitivitylabelspt2/</link>
      <pubDate>Wed, 26 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/04/26/sensitivitylabelspt2/</guid>
      <description>Sensitivity Labels and Purview Information Protection Policies Part Three</description>
      <content:encoded><![CDATA[<p>Part three of a deep dive series on Purview Sensitivity Labels:</p>
<p>Part 1 - <a href="/2023/04/24/sensitivitylabelspt1/">Manual Labelling</a><br>
Part 2 - <a href="/2023/04/25/sensitivitylabelspt2/">Automatic Labelling</a><br>
Part 3 - Recommendations and Limitations</p>
<h2 id="labelling-recommendations">Labelling Recommendations</h2>
<p>Data Classification requires broad organizational support to be successful. The following design recommendations should help with implementation&hellip;</p>
<p><strong>Keep the number of labels to a minimum</strong><br>
Labelling needs to be simple and the options clearly defined, otherwise adoption will suffer</p>
<p><strong>Create separate labels for Items and Containers</strong><br>
Item and Container Labels apply different controls. Separate labels means the name and description can be clearer. For example, <em>Confidential</em> may be suitable for documents, but it would be less clear for M365 Groups.</p>
<p><strong>Create separate labels for Files, Emails and Meetings</strong><br>
There are sub-scopes within Items for Files, Emails and Meetings (Calendar events). Again, the controls are different so labels can be more specific if targeted. For example, email labels can control view, reply, forwarding, whereas file labels can control Save, Print, Copy, Expiry, Offline Access.</p>
<p>It helps that client apps only show labels applicable to the current scope, so a label scoped to <strong>Items - Email</strong> will not be displayed in a document, spreadsheet or presentation.</p>
<p><strong>Create a baseline set of company-wide labels and a small number of targeted additions</strong><br>
A core set of labels should be applicable to everyone. Specific departments or teams may need extra labels for custom data, such as <a href="https://csrc.nist.gov/glossary/term/PII" target="_blank">PII</a>, or <em>Blueprints</em>. Label policies can deploy the extra labels just to specific AAD groups.</p>
<p><strong>Create labels that will endure over a long period</strong><br>
Choose labels that will still be applicable in years to come and then consult users (and perhaps run a limited pilot) to get labels right before mass adoption.  Deleting labels is problematic. The label is added to the metadata of items and deleting the label does not remove it from the metadata. The recommended way to retire a label is to stop publishing it (label policy), but don&rsquo;t delete the label itself.</p>
<p><strong>Avoid sub labels</strong><br>
There are some quirks with sub labels and they don&rsquo;t add much value.</p>
<p><strong>Use same text for the Label Name and Display Name</strong><br>
The Label Name is used internally and the Display Name is visible to users. Making them different is just adding complexity. The label is actually assigned a GUID that must be used in advanced administrator operations anyway.</p>
<p><strong>Don&rsquo;t apply policy controls straight-away</strong><br>
Consider publishing Labels and using them without controls initially. You can then use the Data Classification <em>Content Explorer</em> and <em>Activity Explorer</em> to review how Labels are being used before applying that knowledge to policy creation.</p>
<p><strong>Use file encryption to protect intellectual property</strong><br>
Employee-only content can be encrypted with <em>Co-Author permissions</em> for <em>All users and groups in your organization</em>. Leavers who attempt to take protected data with them will be denied access when their account is disabled. Protected Data sent or copied to a third party will be inaccessible.</p>
<p><strong>Create an FAQ and include the link in the Label Policy</strong>
Users will need reassurance to feel confident in applying labels with content restrictions. There will also be edge cases that need more information. Label Policies include an option to deploy a URL help link.</p>
<h2 id="check-your-service-and-tenant-settings">Check your Service and Tenant settings</h2>
<p>Depending on the age of your Tenant, the following may already be enabled&hellip;</p>
<h3 id="enable-sensitivity-labels-for-office-files-in-sharepoint-and-onedrive">Enable sensitivity labels for Office files in SharePoint and OneDrive</h3>
<p>Data Classification support is not enabled by default in SharePoint. The following features are turned on when enabled:</p>
<ul>
<li>Default Sensitivity Label option is available for Document Libraries</li>
<li><em>Sensitivity</em> column can be added to Library views</li>
<li>Encrypted document can be indexed and returned in search results</li>
<li>Data classification reports can show documents by Label in SharePoint and OneDirve</li>
<li>Auto-labelling policies can apply to data at reset in SharePoint and OneDrive</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Install-module</span> <span class="n">-Name</span> <span class="n">Microsoft</span><span class="p">.</span><span class="py">Online</span><span class="p">.</span><span class="py">SharePoint</span><span class="p">.</span><span class="py">PowerShell</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Connect-SPOService</span> <span class="n">-Url</span> <span class="s2">&#34;https://</span><span class="p">$(</span><span class="nv">$tenant</span><span class="p">)</span><span class="s2">-admin.sharepoint.com&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Get-SPOTenant</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">EnableAIPIntegration</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">EnableAIPIntegration</span>
</span></span><span class="line"><span class="cl"><span class="p">--------------------</span>
</span></span><span class="line"><span class="cl">                <span class="n">False</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Set-SPOTenant</span> <span class="n">-EnableAIPIntegration</span> <span class="vm">$True</span>
</span></span></code></pre></div><h3 id="enable-co-authoring-for-files-encrypted-with-sensitivity-labels">Enable co-authoring for files encrypted with sensitivity labels</h3>
<p>Check that document co-authoring is enabled in the Tenant. Older versions of the Information Protection SDK (before v1.7) did not support co-authoring or Autosave. In version 1.7, changes were made to encrypted document metadata to enable these features.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Instal-module</span> <span class="n">-Name</span> <span class="n">ExchangeOnlineManagement</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Connect-IPPSSession</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">get-PolicyConfig</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">EnableLabelCoauth</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">EnableLabelCoauth</span>
</span></span><span class="line"><span class="cl"><span class="p">------------------</span>
</span></span><span class="line"><span class="cl">             <span class="n">False</span>
</span></span><span class="line"><span class="cl">             
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Set-PolicyConfig</span> <span class="n">-EnableLabelCoauth</span> <span class="vm">$True</span>
</span></span></code></pre></div><h3 id="enable-cross-tenant-access-for-encrypted-files">Enable cross-Tenant access for encrypted files</h3>
<p>By default, a Tenant will accept B2B authentication from other Azure AD Tenants, but if users receive error messages, it&rsquo;s possible these settings have been restricted by an Administrator.</p>
<p>For example, on attempting to authenticate and decrypt a document the user may see one of the following messages, depending on whether B2B authentication has been restricted in the source organization (inbound) or the receiving organization (outbound)</p>
<p><em><strong>Your tenant administrator has restricted which organizations can be accessed. Contact your IT department to request access to the Wingtiptoys.com organization</strong></em></p>
<p><em><strong>The Contoso.com administrator has restricted which organizations can access their tenant. Contact the Contoso.com IT department to request access</strong></em></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Import-Module</span> <span class="n">Microsoft</span><span class="p">.</span><span class="py">Graph</span><span class="p">.</span><span class="py">Identity</span><span class="p">.</span><span class="py">SignIns</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Connect-MGGraph</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># INBOUND</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Get-MgPolicyCrossTenantAccessPolicyDefault</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">B2BCollaborationInbound</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">UsersAndGroups</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">AccessType</span>
</span></span><span class="line"><span class="cl"><span class="p">----------</span>
</span></span><span class="line"><span class="cl"><span class="n">allowed</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Get-MgPolicyCrossTenantAccessPolicyDefault</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">B2BCollaborationInbound</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">Applications</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">AccessType</span>
</span></span><span class="line"><span class="cl"><span class="p">----------</span>
</span></span><span class="line"><span class="cl"><span class="n">allowed</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># OUTBOUND</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Get-MgPolicyCrossTenantAccessPolicyDefault</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">B2BCollaborationOutbound</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">UsersAndGroups</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">AccessType</span>
</span></span><span class="line"><span class="cl"><span class="p">----------</span>
</span></span><span class="line"><span class="cl"><span class="n">allowed</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Get-MgPolicyCrossTenantAccessPolicyDefault</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">B2BCollaborationOutbound</span> <span class="p">|</span> <span class="nb">select </span><span class="n">-ExpandProperty</span> <span class="n">Applications</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">AccessType</span>
</span></span><span class="line"><span class="cl"><span class="p">----------</span>
</span></span><span class="line"><span class="cl"><span class="n">allowed</span>
</span></span></code></pre></div><p>If needed, the settings can be modified in the <a href="https://portal.azure.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/CrossTenantAccessSettings" target="_blank">Azure AD portal</a>, External Identities &gt; Cross-tenant access settings &gt; Default settings, or using the <a href="https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.identity.signins/update-mgpolicycrosstenantaccesspolicydefault?view=graph-powershell-1.0" target="_blank">Update-MgPolicyCrossTenantAccessPolicyDefault</a> command.</p>
<h3 id="exchange-online-irm-configuration">Exchange Online: IRM Configuration</h3>
<p>The following features are dependent on Information Rights Management Licensing in Exchange Online:</p>
<ul>
<li>Message Encryption using mail flow rules</li>
<li>Encryption using DLP policies</li>
<li>Support for sensitivity labels with encryption using Outlook on the Web, Mac, iOS and Android</li>
<li>Auto-labelling policies in Exchange with encryption</li>
</ul>
<p>Ensure <em>Azure RMS licensing</em> is enabled as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Instal-module</span> <span class="n">-Name</span> <span class="n">ExchangeOnlineManagement</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Connect-ExchangeOnline</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Get-IRMConfiguration</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">AzureRMSLicensingEnabled</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">AzureRMSLicensingEnabled</span>
</span></span><span class="line"><span class="cl"><span class="p">-------------------------</span>
</span></span><span class="line"><span class="cl">                    <span class="n">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Set-IRMConfiguration</span> <span class="n">-AzureRMSLicensingEnabled</span> <span class="vm">$True</span>
</span></span></code></pre></div><h3 id="multi-language-support">Multi-language support</h3>
<p>Sensitivity Labels and their descriptions can be localised to match the Office language. Local language support can only be added using the <a href="https://docs.microsoft.com/en-us/powershell/module/exchange/set-label?view=exchange-ps#example-1" target="_blank">Set-Language PowerShell command</a>.</p>
<p>Set-Label is available in the Security and Compliance PowerShell module (available after using Connect-IPPSSession from the ExchangeOnlineManagement PowerShell module).</p>
<p>You may see references to adding multi-language support using an XML export and import process in the Azure Information Protection blade of the Azure Portal. This method relates to AIP Classic that is now deprecated.</p>
<h2 id="limitations">Limitations</h2>
<h3 id="supported-office-versions">Supported Office versions</h3>
<p>Sensitivity Labels are not supported in the Office Desktop <em>Perpetual Editions</em> (standalone). In addition, a subscription version of Office must be:</p>
<ul>
<li>Semi-annual Enterprise 2002+</li>
<li>Monthly Enterprise and Current Channel 1910+</li>
</ul>
<p>There are <a href="https://learn.microsoft.com/en-us/microsoft-365/compliance/sensitivity-labels-versions?view=o365-worldwide#sensitivity-label-capabilities-in-word-excel-and-powerpoint" target="_blank">some features that require later versions</a>, such as <em>Dynamic content marking</em>, <em>Let users assign permissions</em> and <em>audit label-related user activity</em>.</p>
<h3 id="user-encryption-over-ride">User encryption over-ride</h3>
<p>Users are able to over-ride the encryption settings applied by a manual label. After they apply the label to their content, they can make changes to the protection using File &gt; Info &gt; Protect Document &gt; Restrict Access.</p>
<p>The only way to avoid this is to provide at least one Label with <em>Let users assign their own permissions</em> and educate users to choose this Label rather than modifying a pre-configured one.</p>
<h3 id="lost-email-labels">Lost Email Labels</h3>
<p>Labelled emails can lose their Label when a reply comes from an external organization that doesn&rsquo;t use Outlook.  Any encryption is retained, but the original Label will be removed.</p>
<h3 id="encrypt-with-password-missing-in-pdf">&ldquo;Encrypt with Password&rdquo; missing in PDF</h3>
<p>If a PDF is encrypted with Information Protection, the Adobe option to <em>Encrypt with Password</em> is no longer available.</p>
<h3 id="limits-on-sharepoint-auto-labelling">Limits on SharePoint auto-labelling</h3>
<p>Service-side Auto-Labelling for SharePoint and OneDrive has some limitations when scanning data at rest:</p>
<ul>
<li>Maximum of 25,000 files labelled per day</li>
<li>Maximum of 100 Auto-label policies per Tenant</li>
<li>Maximum of 100 Sites (SPO or OneDrive) when targeting individual Sites in a policy (alternative is to target <em>All Sites</em>)</li>
</ul>
<h3 id="limits-on-sharepoint-indexing">Limits on SharePoint indexing</h3>
<p>SharePoint can&rsquo;t index encrypted files that have any of the following:</p>
<ul>
<li>Expiring access</li>
<li>Double-key encryption</li>
</ul>
<p>This affects search, preview and e-Discovery.</p>
<h3 id="update-delays">Update delays</h3>
<p>Updates to Labels can take a few hours to apply and be visible to users. Similarly, there is often a delay with publishing Label Policies.</p>
<p>SharePoint caches Labels and Label Policies, so changes can take even longer e.g. 24hrs.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Purview Information Protection Deep Dive Pt2 - Automatic Labelling</title>
      <link>https://write-verbose.com/2023/04/25/sensitivitylabelspt2/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/04/25/sensitivitylabelspt2/</guid>
      <description>Sensitivity Labels and Purview Information Protection Policies Part Two</description>
      <content:encoded><![CDATA[<p>Part two of a deep dive series on Purview Sensitivity Labels:</p>
<p>Part 1 - <a href="/2023/04/24/sensitivitylabelspt1/">Manual Labelling</a><br>
Part 2 - Automatic Labelling<br>
Part 3 - <a href="/2023/04/26/sensitivitylabelspt2/">Recommendations and Limitations</a></p>
<h2 id="automatic-labelling">Automatic Labelling</h2>
<p>Manual Labelling is often the introduction to Sensitivity Labels, but eventually you will want to look at automation. In particular, it will be needed to add coverage of data at rest. Manual labelling, even if mandatory, only applies when an existing file is re-saved.</p>
<p>The main blocker for many companies is that Automatic Labelling is not available with an E3 license. It requires either Microsoft 365 E5, or E3 plus <em>Microsoft 365 E5 Compliance</em> or <em>Microsoft 365 E5 Information Protection and Governance</em>.</p>
<p>There are two options for automatically applying Sensitivity Labels:</p>
<ol>
<li><strong>Client-side auto-labelling</strong> for files and emails</li>
<li><strong>Service-side auto-labelling</strong> for SharePoint Online, Exchange Online and OneDrive</li>
</ol>
<h3 id="client-side-auto-labelling">Client-side Auto-labelling</h3>
<p><em>Auto-labelling for files and emails</em> is a client option, configured per-label, that either automatically applies the label, or recommends it to the user based on pattern matching in the content.</p>
<p>Client-side auto-labelling only occurs when an item is being created or edited, it doesn&rsquo;t apply to data at rest or in-transit.
The auto-label policy is based on matching one or more <strong>Sensitive Info Types</strong> or <strong>Trainable Classifiers</strong>. For example, if the content matches a passport number.</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-AutoLabellingFiles.png" alt="Client Auto-Labelling"  />
</p>
<h3 id="service-side-auto-labelling">Service-side auto-labelling</h3>
<p><em>Service-side auto-labelling</em> is a separate option in the Information Protection blade of the Purview Compliance Center.  This option is not dependent on supported client apps or reliant on user adoption. Labels are applied by the back-end M365 services.</p>
<p>Create an <strong>Auto-labelling policy</strong> to apply one of the pre-defined labels to unlabelled data at rest in supported locations.<br>
The policy wizard has pre-defined <strong>Templates</strong> for matching content based on well-known regulatory and enterprise requirements. For example, the <em>UK Financial Template</em> includes the <em>Sensitive Info Types</em> that match credit card numbers, debit card numbers and SWIFT bank codes in the scanned content.</p>
<p>Alternatively, the <strong>Custom Template</strong> option creates a policy with bespoke pattern matching, as follows&hellip;</p>
<p>First select one or more of the supported storage locations to apply the automatic labelling:</p>
<ul>
<li>Exchange Online</li>
<li>SharePoint Online</li>
<li>OneDrive for Business</li>
</ul>
<p>SharePoint and OneDrive both support auto-labelling of data at rest. Exchange Online only supports auto-labelling of data in-transit.</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-Auto1.png" alt="Client Auto-Labelling"  />
</p>
<p>Next create rules containing include and exclude <strong>Conditions</strong> to identify items in-scope. A rule can contain multiple conditions and it can apply to all three storage locations, or be specific to a particular one.</p>
<p><strong>Conditions available for SharePoint Online and OneDrive for Business</strong>:</p>
<table>
<thead>
<tr>
<th>Condition</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content is shared</td>
<td>Inside or Outside the organisation</td>
</tr>
<tr>
<td>Content Contains</td>
<td>Sensitive Info Types and/or Trainable Classifiers</td>
</tr>
</tbody>
</table>
<p><strong>Exchange Online has many additional Conditions:</strong></p>
<table>
<thead>
<tr>
<th>Condition</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content is shared</td>
<td>Inside or Outside the organisation</td>
</tr>
<tr>
<td>Recipient Domain is</td>
<td>List of email domains</td>
</tr>
<tr>
<td>Recipient is</td>
<td>Specific email addresses</td>
</tr>
<tr>
<td>Sender IP Address</td>
<td>Specific IPv4 address or a range</td>
</tr>
<tr>
<td>Sender domain is</td>
<td>List of email domains</td>
</tr>
<tr>
<td>Sender is</td>
<td>Specific email addresses</td>
</tr>
<tr>
<td>Attachment file extension is</td>
<td>List of file extensions</td>
</tr>
<tr>
<td>Attachment is password protected</td>
<td>Detects email attachments with password protection</td>
</tr>
<tr>
<td>Attachment&rsquo;s content could not be scanned<br/>Attachment&rsquo;s content didn&rsquo;t complete scanning</td>
<td>Detects emails with attachments that can&rsquo;t be scanned</td>
</tr>
<tr>
<td>Header matches pattern</td>
<td>Regex match on portion of email header</td>
</tr>
<tr>
<td>Subject matches pattern</td>
<td>Regex match on email subject</td>
</tr>
<tr>
<td>Recipient address contains words<br/>Recipient address matches pattern</td>
<td>List of words in recipient address or match to regex pattern</td>
</tr>
<tr>
<td>Sender address matches words<br/>Sender address matches pattern</td>
<td>List of words in sender address or match to regex pattern</td>
</tr>
<tr>
<td>Content Contains</td>
<td>Sensitive Info Types and/or Trainable Classifiers</td>
</tr>
</tbody>
</table>
<br/>
The additional conditions are only available for Exchange when creating a per-location rule.
<br/><br/>  
<p><strong>Simulation mode</strong> is a mandatory step in creating an auto-labelling policy. Content discovery takes place and the administrator can review matched items to ensure rules are correct. The policy can then be turned-on for real.</p>
<h2 id="sensitive-information-types">Sensitive Information Types</h2>
<p><em>Sensitive information Types</em> are search patterns for named data types. They are used to automatically classify content that matches the pattern, for example:</p>
<ul>
<li>US / UK Passport number</li>
<li>SWIFT code</li>
<li>Japan Social Security Number</li>
<li>Credit Card Number</li>
<li>Azure AD client secret</li>
</ul>
<p>Sensitive Info Types can be used in Client-side and Service-side auto-labelling.</p>
<p>There is a long list of <a href="https://learn.microsoft.com/en-us/microsoft-365/compliance/sensitive-information-type-entity-definitions?view=o365-worldwide" target="_blank">built-in Sensitive Information Types (SIT) provided by Microsoft</a>. You can also create your own in the <a href="https://compliance.microsoft.com/dataclassificationclassifiers?viewid=sensitiveinfotypes" target="_blank">&lt;em&gt;Data Classification&lt;/em&gt; blade</a> of the Purview Compliance Center. Custom SITs are one of the following:</p>
<h3 id="pattern-based-sit">Pattern-based SIT</h3>
<p>When you create a pattern-based Sensitive Info Type, you can specify a <strong>Primary element</strong> and <strong>Supporting elements</strong>. The elements consist of the following options:</p>
<ul>
<li>Regular Expression</li>
<li>Keyword list</li>
<li>Keyword dictionary (longer list of keywords)</li>
<li>Existing Sensitive Info type</li>
</ul>
<p>The Secondary Element can be a list of the above, grouped by <em>Any, All or None</em>. The Primary Element and Supporting Elements can be anywhere in the document or near each other within a specified number of characters.</p>
<h3 id="fingerprint-based-sit">Fingerprint-based SIT</h3>
<p>A Fingerprint-based Sensitive Info Type is created by uploading an example document. It works best with Forms and Templates.</p>
<h2 id="trainable-classifiers">Trainable Classifiers</h2>
<p>This method of automatic-labelling is based on machine learning. A Classifier is trained to recognise a document through examples. The classifier must first be fed a selection of documents that are in-scope and out-of-scope of the required label.  The administrator must confirm or reject the automatic classification to train the learning model. It can then be applied to a bulk repository such as a document library.</p>
<p>Microsoft provides many <a href="https://learn.microsoft.com/en-us/microsoft-365/compliance/classifier-tc-definitions?view=o365-worldwide#trainable-classifiers-definitions" target="_blank">&amp;ldquo;ready-to-use&amp;rdquo; classifiers</a>, including ones to detect profanity, threats and discrimination and even resumes (CVs). Creating a custom Trainable Classifier requires at least 50 sample documents. It can take up-to 2 weeks to scan your environment using these classifiers.</p>
<p>Trainable Classifiers can be used in Client-side and Service-side auto-labelling. They can also be used to apply Retention Labels.</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-Classifier.png" alt="Trainable Classifiers"  />
</p>
<h2 id="exchange-mail-flow-rules">Exchange Mail Flow Rules</h2>
<p>Encryption can be applied using Labels in Exchange Mail Flow rules.  This option may be an attractive alternative if you don&rsquo;t have an E5 license that supports Automatic Label Policies. The Label and associated encryption is applied to messages in transit (not messages at rest in mailboxes).</p>
<p>Create a Rule as follows&hellip;<br>
In the <a href="https://admin.exchange.microsoft.com/" target="_blank">Exchange Admin Portal</a>, select Mail Flow &gt; Rules &gt; Add a rule</p>
<p>In the drop-down list select the option to <em>Apply Office 365 Message Encryption and rights protection to messages</em></p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-MailFlow1.png" alt="Mail Flow Rule"  />
</p>
<p>Complete the <em>Rule Conditions</em> and select <strong>Rights protect message with [SELECTED LABEL]</strong></p>
<h2 id="sharepoint-default-sensitivity-label">SharePoint Default Sensitivity Label</h2>
<p>You can set a default Sensitivity Label for SharePoint content and it will apply to documents uploaded or re-saved in a Library. The setting can be applied at the Site Level (Settings &gt; Site Information) or the Library Level (Settings &gt; Library Settings). It requires Site Admin permissions.</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-SPLibrary.png" alt="SPO Default"  />
</p>
<p>A manually-applied label will always <em>win</em> over a SPO Library default. The Library setting can override an auto-labelling policy or label policy default setting, if the Library setting is higher priority.</p>
<p>A SharePoint default Label only applies to new document uploads. Existing files in the Library only receive the Label when they are re-saved.</p>
<p>Labels with the following settings can&rsquo;t be used as a SharePoint default label:</p>
<ul>
<li>A Label with encryption set to <em>Let users assign permissions when they apply the label</em></li>
<li>A Label set to <em>In Word, PowerPoint and Excel, prompt users to specify permissions</em></li>
</ul>
<p>If a user manually removes encryption from a labelled document in a SharePoint Library, the encryption will be restored the next time it is accessed or downloaded.</p>
<p>The automatic Labelling process does not affect the Last Modified date of files.</p>
<p><strong>NOTE</strong> that an SPO Default Label is different to Label Policies that target SharePoint. Label Policies apply container settings such as external access.</p>
<h2 id="sharepoint-sensitivity-column">SharePoint Sensitivity column</h2>
<p>Don&rsquo;t forget to update the <em>All Documents</em> view to show a column for Sensitivity</p>
<p>In a Library &gt; Add column &gt; Show or hide columns &gt; Select Sensitivity &gt; Apply
Then click the All Documents drop-down and select <em>Save view as</em>, leave the default &ldquo;All Documents&rdquo; and click Save</p>
<p>The Library will then always show the Sensitivity Label alongside the File Name and Modified Date.</p>
<h2 id="protecting-teams-meetings-and-chat">Protecting Teams Meetings and Chat</h2>
<p>A Label can be applied to Teams meetings and Chat if the following are true:</p>
<ul>
<li>Organization has a Teams Premium license (included in E5 but not E3)</li>
<li>The Label is scoped to both Files and Emails</li>
<li>The meeting owner is using M365 Apps for Enterprise or OWA on a Desktop computer (not supported on mobile apps)</li>
</ul>
<p>When encryption is turned-on, the following controls can be configured by the Label:</p>
<ul>
<li>Who can bypass the lobby</li>
<li>Who can present, record</li>
<li>Automatic recording</li>
<li>Prevent copy of meeting chat</li>
<li>Add a watermark during screen sharing and camera streams</li>
</ul>
<h2 id="what-is-azure-information-protection">What is Azure Information Protection?</h2>
<p><em>Azure Information Protection</em> (AIP) extends what is available in <em>Purview Information Protection</em> and also provides some of the services used by Purview Information Protection.
In its original form AIP used separate Sensitivity Labels managed in the Azure Portal. Since 2019, AIP has been updated with a <em>Unified Labelling Client</em> that uses Purview Sensitivity Labels.</p>
<p>The following are some reasons to extend the Data Classification Framework with AIP:</p>
<ul>
<li>Bulk labelling and protection of <strong>on-prem file shares and SharePoint libraries</strong></li>
<li>Bulk decryption for data recovery</li>
<li>Apply labels directly from File Explorer or PowerShell</li>
<li>Supports additional file types for classification and protection</li>
<li>Supports Office 2003-2007 file formats</li>
<li>Logging to the Windows event log</li>
</ul>
<p>To use AIP you will need to deploy the <a href="https://www.microsoft.com/download/details.aspx?id=53018" target="_blank">unified labelling client</a> to Windows computers. You may see references in documentation to the AIP Classic Client. This is the older version of AIP that is now deprecated.</p>
<p>If the AIP client is installed, the built-in labelling interfaces in Office are disabled (e.g. the Ribbon Sensitivity button) and an Office add-in displays an information bar instead. It&rsquo;s a supported scenario to use AIP for some features while still using the built-in labelling for Office. To achieve this, just disable the AIP Office add-ins (MSIP.WordAddin, MSIP.ExcelAddin, MSIP.PowerPointAddin, MSIP.OutlookAddin) using a Group policy / CSP setting.</p>
<h3 id="aip-unified-labelling-scanner">AIP Unified Labelling Scanner?</h3>
<p>The Scanner works by running jobs that crawl the specified data stores to label and protect the documents. This can be a one-off exercise to ensure wide coverage (then relying on native labelling options), or it could be a repeat scheduled process.</p>
<p>The Scanner runs as a service on a Windows Server (2016 or later for long path support) and also requires a SQL server backend. It requires an application registration in Azure AD, that provides a token for the service to authenticate with AIP. The scan jobs are configured in the AIP blade of Azure rather than on the Server.</p>
<p>The process of scanning large data stores can be time consuming, so the Scanner supports inclusion and exclusion by file type (file extension) to pre-filter the file list.  It can also be clustered with multiple servers working in parallel. It uses the same built-in iFilters used by Windows Search to access document content and look for matches to automatic label patterns.</p>
<p>The Scanner can be run first in <em>Discovery Mode</em> to create a report of labels and protection that would be applied through automatic classification rules.</p>
<h3 id="aip-supported-file-types-for-scanner-inspection">AIP Supported file types for scanner inspection</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"> .doc, docx, .docm, .dot, .dotx, .xls, .xlt, .xlsx, .xlsm, .xlsb, .ppt, .pps, .pot, .pptx, .pdf, .txt, .xml, .csv
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Purview Information Protection Deep Dive Pt1 - Manual Labelling</title>
      <link>https://write-verbose.com/2023/04/24/sensitivitylabelspt1/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/04/24/sensitivitylabelspt1/</guid>
      <description>Sensitivity Labels and Purview Information Protection Policies Part One</description>
      <content:encoded><![CDATA[<p>Part one of a deep dive series on Purview Sensitivity Labels:</p>
<p>Part 1 - Manual Labelling<br>
Part 2 - <a href="/2023/04/25/sensitivitylabelspt2/">Automatic Labelling</a><br>
Part 3 - <a href="/2023/04/26/sensitivitylabelspt2/">Recommendations and Limitations</a></p>
<p>Purview Information Protection (formerly AIP and then MIP) uses <strong>Labels</strong> to categorise data based on sensitivity and privacy requirements. Settings and Policies linked to the labels apply security controls. This article is a deep dive on Information Protection, including design and configuration.</p>
<blockquote>
<p><strong>Sensitivity Labels</strong> are metadata added to <strong>items</strong> and <strong>containers</strong> to identify and enforce privacy constraints using  simple descriptions, such as <em>Company Confidential</em> or <em>Secret</em>.</p>
</blockquote>
<p>Labels and Label Policies are part of the M365 Data Classification Framework</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/MSOverview.png" alt="Label scope"  />
</p>
<h2 id="label-scope">Label Scope</h2>
<p>Applying Labels and Label Policies to <strong>Items</strong> is known as <strong>Information Protection</strong>.<br>
Items can be:</p>
<ul>
<li>Files (Word, Excel, PowerPoint etc)</li>
<li>Email messages</li>
<li>Calendar events and meetings</li>
<li>Teams meetings and chats (Teams Premium license required)</li>
</ul>
<p>M365 Apps (Office) files must be in the Open XML format e.g. docx, xlsx. Older formats such as .doc are not supported.</p>
<p>Applying Labels and Policies to <strong>Containers</strong> is known as <strong>Container Management</strong>.<br>
Containers (a.k.a <em>Groups &amp; Sites</em>) can be:</p>
<ul>
<li>SharePoint Online sites</li>
<li>Teams</li>
<li>M365 Groups</li>
</ul>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-Scope.png" alt="Label scope"  />
</p>
<p><strong>Purview Data Map</strong> is a third lesser-used label scope, that allows Labels to be applied to some Azure assets such as:</p>
<ul>
<li>Azure SQL columns</li>
<li>Azure Cosmos DB</li>
<li>Azure MySQL</li>
<li>Azure Data Explorer</li>
</ul>
<p>Purview Data Labelling is not enabled by default. It can be turned-on in the Information Protection UI, or using the PowerShell compliance module.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Install-Module</span> <span class="n">ExchangeOnlineManagement</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Connect-IPPSSession</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Purview Labelling is disabled by default</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Get-PolicyConfig</span> <span class="p">|</span> <span class="nb">fl </span><span class="n">purview</span><span class="p">*</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">PurviewLabelConsent</span>        <span class="err">:</span> <span class="n">False</span>
</span></span><span class="line"><span class="cl"><span class="n">PurviewLabelConsentCaller</span>  <span class="err">:</span>
</span></span><span class="line"><span class="cl"><span class="n">PurviewLabelConsentTime</span>    <span class="err">:</span>
</span></span><span class="line"><span class="cl"><span class="n">PurviewLabelConsentDetails</span> <span class="err">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Enable Purview Labelling:</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Set-PolicyConfig</span> <span class="n">-PurviewLabelConsent</span> <span class="vm">$True</span>
</span></span></code></pre></div><h2 id="whats-in-a-name">What&rsquo;s in a name?</h2>
<p>Label names are freeform, configured by an administrator in the <a href="https://compliance.microsoft.com/" target="_blank">Purview Compliance Center</a>. The label <em>display name</em> and <em>description</em> are visible to users and should be intuitive.</p>
<p>Items and Containers can only have one Sensitivity Label (although they can also have an M365 Retention Label - a separate topic).</p>
<h3 id="example-labels">Example Labels</h3>
<p>The following example is a baseline set of labels published to everyone in an organization:</p>
<table>
<thead>
<tr>
<th>LABEL NAME</th>
<th>Scope</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>PUBLIC</td>
<td>Items - Files</td>
<td>Freely shared with anyone inside and outside the organization</td>
</tr>
<tr>
<td>PARTNER ACCESSIBLE</td>
<td>Items - Files</td>
<td>Shared within the organization and with trusted partners</td>
</tr>
<tr>
<td>EMPLOYEES ONLY</td>
<td>Items - Files</td>
<td>Only shared within the organization. Encrypted and limited to any member of the organization</td>
</tr>
<tr>
<td>CONFIDENTIAL</td>
<td>Items - Files</td>
<td>Sensitive information. Encrypted with permissions set by the owner</td>
</tr>
<tr>
<td>HIGHLY CONFIDENTIAL</td>
<td>Items - Files</td>
<td>Do not share - Regulated data such as PII, GDPR, HIPPA, or Company secret. Encrypted and limited to a predefined group</td>
</tr>
<tr>
<td>BLUEPRINT</td>
<td>Items - Files</td>
<td>Company-specific design document. Encrypted</td>
</tr>
<tr>
<td>ENCRYPTED</td>
<td>Items - Email</td>
<td>Encrypted</td>
</tr>
<tr>
<td>NO FORWARD</td>
<td>Items - Email</td>
<td>Encrypted. Forwarding disabled</td>
</tr>
<tr>
<td>OPEN ACCESS</td>
<td>Groups &amp; Sites</td>
<td>Employees can join freely and invite external guests</td>
</tr>
<tr>
<td>INVITE ONLY - External</td>
<td>Groups &amp; Sites</td>
<td>Employees must be invited. Owners can invite external guests</td>
</tr>
<tr>
<td>INVITE ONLY - Internal</td>
<td>Groups &amp; Sites</td>
<td>Employees must be invited. No external guests</td>
</tr>
</tbody>
</table>
<h2 id="sub-labels">Sub labels</h2>
<p>Sub labels are used to group similar labels in a parent-child relationship. They are mainly for organisation, there&rsquo;s no inheritance of settings (although they do inherit the colour setting).<br>
In the example below, <em>Confidential</em> is the parent label and <em>Partners</em> and <em>Employees</em> are the two sub labels.</p>
<p>CONFIDENTIAL<br>
CONFIDENTIAL\PARTNERS<br>
CONFIDENTIAL\EMPLOYEES</p>
<p>To create a sub label, click the kebab menu (3-dots) next to an existing label and select <em>Create Sublabel</em>.</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-Sublabel.png" alt="Create sublabel"  />
</p>
<h2 id="manage-labels-with-powershell">Manage Labels with PowerShell</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Install-Module</span> <span class="n">exchangeonlinemanagement</span> <span class="n">-MinimumVersion</span> <span class="mf">3.0</span><span class="p">.</span><span class="py">0</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Connect-IPPSSession</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Create a new label</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">New-label</span> <span class="n">-ContentType</span> <span class="s2">&#34;File&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;EMPLOYEES ONLY&#34;</span> <span class="n">-DisplayName</span> <span class="s2">&#34;EMPLOYEES ONLY&#34;</span> <span class="n">-Tooltip</span> <span class="s2">&#34;Only shared within the organization. Encrypted&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Change label priority</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\&gt;</span> <span class="nb">Set-Label</span> <span class="n">-Identity</span> <span class="s2">&#34;EMPLOYEES ONLY&#34;</span> <span class="n">-Priority</span> <span class="mf">2</span>
</span></span></code></pre></div><h2 id="label-settings">Label Settings</h2>
<p>Sensitivity Labels aren&rsquo;t just visual markings. They can apply permissions and privacy controls:</p>
<table>
<thead>
<tr>
<th>Control</th>
<th>Scope</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>ENCRYPTION</td>
<td>Items</td>
<td>Usage Rights: View,Edit,Save,Print,Copy,Allow Macros<br/>Whether access expires<br/>If it can accessed offline.</td>
</tr>
<tr>
<td>CONTENT MARKING</td>
<td>Items</td>
<td>Background Watermark (DOCX/PPTX)<br/>Header<br/>Footer</td>
</tr>
<tr>
<td>ENCRYPTION</td>
<td>Email Messages</td>
<td>Reply, Reply All, Forward<br/>Encrypt only</td>
</tr>
<tr>
<td>PRIVACY and EXTERNAL ACCESS</td>
<td>Containers</td>
<td>Membership: Public, Private, None(Defined by users)<br/>Ability to add guests</td>
</tr>
<tr>
<td>EXTERNAL SHARING AND CONDITIONAL ACCESS</td>
<td>Containers</td>
<td>SharePoint external sharing options</td>
</tr>
</tbody>
</table>
<br/>
<h2 id="label-priority">Label Priority</h2>
<p>Labels have a priority with (1) being least sensitive e.g. <em>Public</em>. The priority order is used to identify downgrading and to resolve conflicts.</p>
<p><em>Downgrading</em> occurs when users manually change a label to a less sensitive option. An Item Owner (person who applied the label) is free to change it.</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-Priority.png" alt="Create sublabel"  />
</p>
<h2 id="label-policies">Label Policies</h2>
<p><strong>Label Policies</strong> have two purposes:</p>
<ul>
<li>Publishing labels so they are visible in supported apps</li>
<li>Controlling how labels are applied</li>
</ul>
<h3 id="publishing-labels">Publishing Labels</h3>
<p>Sensitivity Labels are published to <strong>users</strong>, either everyone in the organization, or a selected [mail-enabled] group. This is different to <em>Retention Labels</em> that are published to storage locations.</p>
<h3 id="controlling-how-labels-are-applied">Controlling how labels are applied</h3>
<p>The following options are available in a Label Policy, depending on the Label scope.</p>
<table>
<thead>
<tr>
<th>Control</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Downgrade justification</td>
<td>Prompt user for a reason when changing to a lower priority label or removing a label</td>
</tr>
<tr>
<td>Mandatory labelling</td>
<td>Users are forced to apply a label before saving (files) or sending (emails) if the item doesn&rsquo;t already have a label</td>
</tr>
<tr>
<td>Help Link</td>
<td>A URL to a page with user guidance. The link will be available on the Sensitivity button in MS Office</td>
</tr>
<tr>
<td>Mandatory Power BI labelling</td>
<td>Not covered in this article</td>
</tr>
<tr>
<td>Default Document Label</td>
<td>Automatic client-side labelling in supported apps. Applied to new and modified items. Users can override</td>
</tr>
<tr>
<td>Default Email Label</td>
<td>Automatic client-side labelling in supported apps. Applied to new and existing items. Users can override</td>
</tr>
<tr>
<td>Default Calendar Label</td>
<td>Automatic client-side labelling in supported apps. Applied to new and existing meetings. Users can override</td>
</tr>
<tr>
<td>Default Sites &amp; Groups Label</td>
<td>Applied to new SharePoint Sites and M365 Groups. Owners can override</td>
</tr>
<tr>
<td>Default Power BI Label</td>
<td>Applied to new dashboards, reports and datasets. Users can override.</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-Default.png" alt="Policy settings"  />
</p>
<h3 id="default-vs-mandatory-labelling">Default vs Mandatory Labelling</h3>
<p><strong>User adoption</strong> is one of the key challenges of Sensitivity Labelling. The following options exist to help with this challenge:</p>
<ul>
<li>Default Labels</li>
<li>Mandatory Labelling</li>
<li>Automatic Labelling</li>
</ul>
<p>It can be difficult to <strong>decide between default and mandatory labelling</strong>. If you configure default labels in the Label Polices, it will achieve the high-level goal of wide adoption, but it may fail to achieve a useful implementation. Users can just accept the default and make no effort to change it to something more appropriate.<br>
For this reason, <strong>mandatory labelling may be a better choice</strong>, forcing users to choose a label when they save a new item or modify an unlabelled one. If you enable mandatory labelling, make sure the Label Display Names and Descriptions are intuitive and explain details like encryption.</p>
<p>Mandatory Labelling = <em>Require users to apply a label to their emails and documents.</em></p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-Mandatory.png" alt="Mandatory labelling"  />
</p>
<h2 id="encryption-permissions-and-usage-rights">Encryption, Permissions and Usage Rights</h2>
<p>Sensitivity Labels use AES 256 symmetric encryption to control access to items. Supported apps, such as Word, Excel, PowerPoint, will seamlessly decrypt the item if the recipient is authenticated and authorised. Encryption is not limited to users within the organization, external recipients are also supported.</p>
<p>Document metadata is not encrypted, allowing other applications to read the Sensitivity Labels on a document regardless of whether it is encrypted. Exchange Online and SharePoint (when enabled) are able to remove encryption and re-apply it, allowing them to index and scan content.</p>
<p>There are two aspects that control access to protected items:</p>
<ul>
<li>Permissions</li>
<li>Usage Rights</li>
</ul>
<h3 id="assigning-permissions">Assigning Permissions</h3>
<p>The following permission options control who can authenticate for access to a protected item:</p>
<table>
<thead>
<tr>
<th>Assignee</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>All users and groups in your organisation</td>
<td>Any user in your Tenant</td>
</tr>
<tr>
<td>Any authenticated user</td>
<td>Users in any Azure AD Tenant, personal MSA accounts, Federated accounts (GMail, Yahoo), Guests, OTP authenticated B2B accounts</td>
</tr>
<tr>
<td>Users or groups</td>
<td>Specific users or groups in your Tenant</td>
</tr>
<tr>
<td>Specific email addresses or domains</td>
<td>Individual external recipients or entire external email domains</td>
</tr>
</tbody>
</table>
<p><strong>External recipients</strong> are fully supported by the above options. If authentication fails the item cannot be opened.</p>
<h3 id="usage-rights-and-permission-levels">Usage Rights and Permission Levels</h3>
<p>Once the recipient is authenticated, the <strong>Publishing License</strong> attached to an encrypted item is checked to determine what <em>usage rights</em> have been assigned.</p>
<p><strong>Usage rights</strong> are granular controls over common activities as follows:</p>
<table>
<thead>
<tr>
<th>Right</th>
<th>Scope</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>View content (VIEW)</td>
<td>Files</td>
<td>Enables document opening and viewing content. Doesn&rsquo;t allow sorting or filtering in Excel</td>
</tr>
<tr>
<td>View rights (VIEWRIGHTSDATA)</td>
<td>Files</td>
<td>Enables viewing the document protection policy</td>
</tr>
<tr>
<td>Edit content (DOCEDIT)</td>
<td>Files</td>
<td>Enables document modify, rearrange, sort content. Not Save or Change Tracking</td>
</tr>
<tr>
<td>Save (EDIT)</td>
<td>Files</td>
<td>Enables document Save and Save As (Open XML format only)</td>
</tr>
<tr>
<td>Print (PRINT)</td>
<td>Files</td>
<td>Enables document printing</td>
</tr>
<tr>
<td>Copy and extract content (EXTRACT)</td>
<td>Files</td>
<td>Enables document copy/paste and screen capture/sharing</td>
</tr>
<tr>
<td>Reply (REPLY)</td>
<td>Email</td>
<td>Enables email reply, but not changes to recipients. Combine with <em>Save</em> and <em>Edit content</em> to work correctly</td>
</tr>
<tr>
<td>Reply all (REPLYALL)</td>
<td>Email</td>
<td>Enables email reply all, but not changes to recipients. Combine with <em>Save</em> and <em>Edit content</em> to work correctly</td>
</tr>
<tr>
<td>Forward (FORWARD)</td>
<td>Email</td>
<td>Enables email forward or adding recipients. Combine with <em>Save</em> and <em>Edit content</em> to work correctly</td>
</tr>
<tr>
<td>Edit rights (EDITRIGHTSDATA)</td>
<td>Files</td>
<td>Enables changing the protection policy, including removing protection</td>
</tr>
<tr>
<td>Export content (EXPORT)</td>
<td>Files</td>
<td>Enables document SaveAs to other formats and integrations such as <em>Send to OneNote</em></td>
</tr>
<tr>
<td>Allow macros (OBJMODEL)</td>
<td>Files</td>
<td>Enables run macros option in documents</td>
</tr>
<tr>
<td>Full control (OWNER)</td>
<td>Files</td>
<td>Enabled all rights to a document including remove protection</td>
</tr>
</tbody>
</table>
<p>Caveats: Save (EDIT) only grants Save/Save As in the Desktop versions of Office, but it also grants Edit rights in Office for the Web.</p>
<p><strong>Permission Levels</strong> are groups of usage rights that meet the most common requirements, as follows:</p>
<table>
<thead>
<tr>
<th>Permission Level</th>
<th>Scope</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Viewer</td>
<td>Files</td>
<td>Open, Read, View rights, Allow macros</td>
</tr>
<tr>
<td>Reviewer</td>
<td>Files &amp; Email</td>
<td>Open, Read, Save, Edit content, View rights<br/>Reply, Reply All, Forward</td>
</tr>
<tr>
<td>Co-Author</td>
<td>Files &amp; Email</td>
<td>Open, Read, Save, Edit content, View rights, <strong>Copy, Export, Print</strong></br>Reply, Reply All, Forward</td>
</tr>
<tr>
<td>Co-Owner</td>
<td>Files &amp; Email</td>
<td>Open, Read, Save, Edit content, View rights, Copy, Export, Print, <strong>Change Rights</strong></br>Reply, Reply All, Forward,<strong>Full Control</strong></td>
</tr>
</tbody>
</table>
<p>Co-Authors and Co-Owners can Copy, Export and Print from documents. Co-Owners can change or remove document protection.</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-CoAuthor.png" alt="Co-Author"  />
</p>
<h3 id="pdf-support">PDF Support</h3>
<p>PDF files can be encrypted and Adobe Acrobat / Acrobat Reader will show a banner message to indicate the applied Sensitivity Label. Since June 2022 versions of Acrobat and Acrobat Reader no longer need a separate plugin.</p>
<p>MS Edge version 83.0.478.37 or higher can also view encrypted PDF files.</p>
<p>If you Save or Print an encrypted Office document to PDF, the resulting PDF will inherit the encryption and permissions.</p>
<h2 id="content-marking">Content Marking</h2>
<p><em>Content Marking</em> puts visual markers directly in the data, specifically, the header, footer or background of a file item and header or footer of an email.</p>
<p>This can be useful as the label is <em>hidden</em> in the item metadata and only displayed in the UI of supported applications. Furthermore, the label only displays in the UI if the Tenant ID in the metadata matches the current Tenant.</p>
<p>In practice, content marking may be as simple as ensuring the Label is clearly visible in the document, or it could be a lengthy paragraph explaining who is allowed to read the content and how it can be shared. Headers and Footers can be up-to 1024 characters in Word and PowerPoint and up to 255 in Excel.</p>
<p><img loading="lazy" src="/img/UsingMIPLabels/Label-Marking.png" alt="Content Marking"  />
</p>
<p>Background Watermarks are not supported in email and are normally only be used for high sensitivity documents e.g. to print <em>Confidential</em> diagonally in the background.</p>
<h3 id="dynamic-content-marking">Dynamic Content Marking</h3>
<p>Content Marking supports basic conditions and variables, most commonly used to apply different marking based on the document type.</p>
<p>An <em>IF</em> condition can include the name of an Office application, or the single character abbreviation for multiple applications, as shown in the Header marking examples below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl"><span class="c1"># LABEL POLICY EXAMPLE 1 - Only mark Excel files </span>
</span></span><span class="line"><span class="cl"><span class="si">${</span><span class="nv">If</span><span class="p">.App.Excel</span><span class="si">}</span> CONFIDENTIAL SPREADSHEET: INTERNAL RECIPIENTS ONLY <span class="si">${</span><span class="nv">If</span><span class="p">.End</span><span class="si">}</span>
</span></span></code></pre></div><p>Even though the label applies to Word, Excel and PowerPoint files, the header marking is only applied to Excel files</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl"><span class="c1"># LABEL POLICY EXAMPLE 2 - Target multiple apps</span>
</span></span><span class="line"><span class="cl"><span class="si">${</span><span class="nv">If</span><span class="p">.App.WXP</span><span class="si">}</span> PUBLIC: DISTRIBUTE FREELY <span class="si">${</span><span class="nv">If</span><span class="p">.End</span><span class="si">}</span>
</span></span></code></pre></div><p>In the second example, the header marking is added to Word, Excel and PowerPoint files, but not Outlook emails.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl"><span class="c1"># LABEL POLICY EXAMPLE - multiple options</span>
</span></span><span class="line"><span class="cl"><span class="si">${</span><span class="nv">If</span><span class="p">.App.WO</span><span class="si">}</span> <span class="si">${</span><span class="nv">Item</span><span class="p">.Label</span><span class="si">}</span> - This content is confidential. <span class="si">${</span><span class="nv">If</span><span class="p">.End</span><span class="si">}</span> <span class="si">${</span><span class="nv">If</span><span class="p">.App.PowerPoint</span><span class="si">}</span> <span class="si">${</span><span class="nv">Item</span><span class="p">.Label</span><span class="si">}</span> - This presentation is confidential. <span class="si">${</span><span class="nv">If</span><span class="p">.End</span><span class="si">}</span>
</span></span></code></pre></div><p>In the third example, the header is different for Word and Outlook compared to PowerPoint (and Excel does not apply a header).</p>
<h3 id="dynamic-content-variables">Dynamic Content Variables</h3>
<p>There are only a few variables that can be used in content marking:</p>
<table>
<thead>
<tr>
<th>Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>${Item.Label}</td>
<td>The label display name</td>
</tr>
<tr>
<td>${Item.Name}</td>
<td>File name or email subject of the document</td>
</tr>
<tr>
<td>${Item.Location}</td>
<td>Full path to document or email subject</td>
</tr>
<tr>
<td>${User.Name}</td>
<td>Display name of user applying the label</td>
</tr>
<tr>
<td>${User.PrincipalName</td>
<td>UPN of user applying the label</td>
</tr>
<tr>
<td>${Event.DateTime}</td>
<td>DateTime when label is applied</td>
</tr>
</tbody>
</table>
<h2 id="information-protection-licensing">Information Protection Licensing</h2>
<p>Office 365 E3 includes <strong>Information Protection for Office 365 – Standard</strong> and Office 365 E5 includes <strong>Information Protection for Office 365 – Premium</strong>. Broadly these map to manual and automatic labelling. Information Protection is a separate Service Plan with a SKU, allowing it to be selectively enabled for specific users / groups.</p>
<p>An O365 E3 license covers most requirements for manual labelling:</p>
<ul>
<li>Manual labelling (Sensitivity Labels and Retention Labels) using M365 Apps for Enterprise, Office Online and Office mobile</li>
<li>Manual labelling for containers (Teams / SharePoint / M365 Groups)</li>
<li>Basic Office Message Encryption (OME) including Encrypt only and Do Not Forward email templates</li>
<li>DLP for Exchange Online and SharePoint Online</li>
</ul>
<p>NOTES:</p>
<p>DLP for Teams requires an Office E5 license. Administrators and M365 Group Owners need an Azure AD P1 license to apply labels to containers (included in E3 and E5).</p>
<p>An Office E5 license is needed for most automatic labelling actions and the following:</p>
<ul>
<li>Automatically applying Sensitivity Labels and Retention Labels</li>
<li>Default container labels inherited by unlabelled documents (e.g. SharePoint)</li>
<li>Bring Your Own Key (BYOK) and Hold Your Own Key (HYOK) encryption</li>
<li>Double Key Encryption (DKE)</li>
<li>Sensitivity Labels for PowerBI</li>
</ul>
<p>NOTES:</p>
<p>Alternative licensing - add one of the following to an E3 license: Microsoft 365 E5 Compliance, Microsoft 365 E5 Information Protection and Governance, Advanced OME and customer key for Office 365. Refer to the downloadable spreadsheet <a href="https://www.microsoft.com/en-us/download/details.aspx?id=103006" target="_blank">Microsoft 365 Compliance Licensing Comparison</a> for more information.</p>
<h2 id="role-based-admin-delegation">Role Based Admin Delegation</h2>
<p>M365 administrators working with Information Protection need delegated access to the configuration settings in the Purview Compliance Center. Add users to one of the following built-in roles:</p>
<ul>
<li>Global Administrator</li>
<li>Compliance Data Administrator</li>
<li>Compliance Administrator</li>
<li>Security Administrator</li>
</ul>
<p>Alternatively, create a custom Azure AD role group and add one of the following:</p>
<ul>
<li>Organization Configuration</li>
<li>Sensitivity Label Administrator</li>
<li>Sensitivity Label Reader</li>
</ul>
<p>To review Data Classification Reports (e.g. simulation mode results) you need:</p>
<ul>
<li>Content Explorer List viewer</li>
<li>Content Explorer Content viewer</li>
</ul>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Read Intune Logs with PowerShell (CMTrace format)</title>
      <link>https://write-verbose.com/2023/04/17/readimelog/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/04/17/readimelog/</guid>
      <description>A PowerShell function to read Intune Management Extension logs</description>
      <content:encoded><![CDATA[<p>Read-IMELog - A PowerShell script to read Intune Management Extension (IME) logs</p>
<h2 id="background">Background</h2>
<p>The Intune Management Extension is a Windows client component responsible for running Intune scripts and installing Win32 apps. It creates log files in the following folder:<br>
<em>C:\ProgramData\Microsoft\IntuneManagementExtension\Logs</em></p>
<p>IME Log entries are in the CMTrace format used by System Center Configuration Manager e.g.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-LaTeX" data-lang="LaTeX"><span class="line"><span class="cl">&lt;![LOG[[Win32App] Checking ESP status and phase for sessionId: 0]LOG]!&gt;&lt;time=&#34;23:05:44.2390147&#34; date=&#34;4-16-2023&#34; component=&#34;IntuneManagementExtension&#34; context=&#34;&#34; type=&#34;1&#34; thread=&#34;65&#34; file=&#34;&#34;&gt;
</span></span><span class="line"><span class="cl">&lt;![LOG[[Proxy Poller] Processing session id 2 starts]LOG]!&gt;&lt;time=&#34;23:05:47.8411669&#34; date=&#34;4-16-2023&#34; component=&#34;IntuneManagementExtension&#34; context=&#34;&#34; type=&#34;1&#34; thread=&#34;25&#34; file=&#34;&#34;&gt;
</span></span></code></pre></div><p>The log entries are best viewed using the <a href="https://learn.microsoft.com/en-us/mem/configmgr/core/support/cmtrace" target="_blank">CMTrace tool</a>, but this won&rsquo;t be readily available for a company that doesn&rsquo;t use System Center Configuration Manager. There is no official download for cloud-only businesses using Intune.</p>
<p><strong>Read-IMELog</strong> is a PowerShell script that converts IME logs to PowerShell objects, allowing flexible filtering and sorting.  It can also be used for Config Manager logs.</p>
<h2 id="example-usage-1---filter-on-message-text">Example usage 1 - filter on message text</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$IMELog</span> <span class="p">=</span> <span class="s1">&#39;C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntuneManagementExtension.log&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">Read-IMELog</span> <span class="n">-Path</span> <span class="nv">$IMELog</span> <span class="p">|</span> <span class="nb">where-object</span><span class="p">{</span><span class="nv">$_</span><span class="p">.</span><span class="py">message</span> <span class="o">-like</span> <span class="s2">&#34;*ProcessDetection*&#34;</span><span class="p">}</span>  <span class="p">|</span> <span class="nb">Select-object</span> <span class="n">-first</span> <span class="mf">2</span>
</span></span></code></pre></div><p><img loading="lazy" src="/img/readimelog/ReadImeLog1.png" alt="Example1"  />
</p>
<h2 id="example-usage-2---read-all-ime-logs">Example usage 2 - read all IME logs</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$IMELogFolder</span> <span class="p">=</span> <span class="s1">&#39;C:\ProgramData\Microsoft\IntuneManagementExtension\Logs&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-Childitem</span> <span class="n">-path</span> <span class="nv">$IMELogFolder</span> <span class="p">|</span> <span class="nb">Read-IMELog</span> <span class="p">|</span> <span class="nb">Out-Gridview</span>
</span></span></code></pre></div><p><img loading="lazy" src="/img/readimelog/ReadImeLog2.png" alt="Example2"  />
</p>
<h2 id="read-imelogps1">Read-IMELog.ps1</h2>
<p>See below for the PowerShell script:</p>
<script type="application/javascript" src="https://gist.github.com/gbdixg/aaf6ebd42d29098700fc46382807b185.js"></script>

<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Creating a GUI App with PowerShell and WPF - Part 2 Controls, Events and XAML</title>
      <link>https://write-verbose.com/2023/03/21/PowerShellWPFPt2/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/21/PowerShellWPFPt2/</guid>
      <description>Tips for working with the WPF user interface in PowerShell</description>
      <content:encoded><![CDATA[<p><strong>More things I learned creating a GUI tool with PowerShell and WPF.</strong><br>
The snippets in this article are based on the <a href="https://github.com/gbdixg/Show-Win32AppUI" target="_blank">Show-Win32AppUI tool</a> available on GitHub.</p>
<h1 id="part2---creating-a-multi-page-wpf-app-in-powershell">Part2 - Creating a multi-page WPF app in PowerShell</h1>
<p>(See <a href="/2023/03/21/PowerShellWPFPt1/">part1 of this series</a> for information on using PowerShell Runspaces with WPF).</p>
<p>WPF uses .XAML text files to define the layout and properties of supported <em>controls</em> such as Textboxes, Buttons, Status bars etc. XAML is a form is XML, with opening and closing tags that create a hierarchy of controls. A <em>child</em> control such as a Combobox is displayed within a parent container such as a <em>Window</em>.</p>
<p>Very simple apps may be able to fit controls in a single Window, but a <em>wizard</em>-driven interface will usually need multiple <strong>Pages</strong> to guide the user through selections. There are many ways to create a <strong>multi-page WPF app</strong>. The method below is the one I prefer:</p>
<h2 id="main-window-and-child-pages">Main window and child pages</h2>
<p>The starting point is a WPF <strong>Window</strong> control defined in it&rsquo;s own .XAML file. A Window is a container for other WPF controls, most importantly in this case, a  <strong>Frame</strong> that can load <strong>Pages</strong>. The main Window can show a header, footer and sidebar that is always visible while the Page within the Frame control changes as the user navigates the app.</p>
<p><img loading="lazy" src="/img/WindowFrame.png" alt="MainWindow"  />
</p>
<p>Each page can be defined in a separate .XAML file. A Page is also a container so each page can host controls such as Textboxes, Textblocks, Comboboxes etc. The Frame content is updated at runtime to show a new Page when an event occurs such as clicking navigation buttons.</p>
<p>A Frame does have a built-in navigation control, but it isn&rsquo;t pretty.  I turn it off and use <strong>Button</strong> controls in the main Window.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Partial XAML for a Main Window with a Frame and navigation Buttons--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Window</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;850&#34;</span> <span class="na">Width=</span><span class="s">&#34;450&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Pages will be loaded into this frame at runtime--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Frame</span> <span class="na">x:Name=</span><span class="s">&#34;frame_Pages&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;2&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.ColumnSpan=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">NavigationUIVisibility=</span><span class="s">&#34;Hidden&#34;</span> <span class="err">#</span> <span class="err">Built-in</span> <span class="err">navigation</span> <span class="err">disabled</span>
</span></span><span class="line"><span class="cl">        <span class="na">Margin=</span><span class="s">&#34;0,10,0,0&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Navigation Buttons below the pages--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Button</span> <span class="na">x:Name =</span> <span class="s">&#34;Btn_Previous&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Content=</span><span class="s">&#34;Previous&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Height=</span><span class="s">&#34;35&#34;</span> <span class="na">Width=</span><span class="s">&#34;60&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;2&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="na">BorderThickness=</span><span class="s">&#34;0&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Button</span> <span class="na">x:Name =</span> <span class="s">&#34;Btn_Next&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Content=</span><span class="s">&#34;Next&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Margin=</span><span class="s">&#34;3,0,0,0&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Height=</span><span class="s">&#34;35&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Width=</span><span class="s">&#34;60&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">BorderThickness=</span><span class="s">&#34;0&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/gbdixg/Show-Win32AppUI/tree/main/Show-Win32AppUI/Xaml" target="_blank">Show-Win32UI tool</a> for an example of separate XAML files per Page and main Window.</p>
<h1 id="load-xaml-controls-into-powershell-variables">Load XAML controls into PowerShell variables</h1>
<p>A thread safe Hashtable collection allows WPF controls to be referenced in PowerShell at runtime. Grouping the controls in a collection is convenient as it simplifies passing them into Runspaces.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example of reading controls from XAML files and assigning them to variables</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">LoadXml</span> <span class="p">(</span><span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Convert a .XAML file to an XMLDocument</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$XmlLoader</span> <span class="p">=</span> <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="n">XmlDocument</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$XmlLoader</span><span class="p">.</span><span class="py">Load</span><span class="p">(</span><span class="nv">$filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$XmlLoader</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Load the XAML files</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlMainWindow</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PSScriptRoot</span><span class="s2">\Xaml\MainWindow.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage1</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PScriptRoot</span><span class="s2">\Xaml\Page1.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage2</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PScriptRoot</span><span class="s2">\Xaml\Page2.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Collection storing references to all named WPF controls in the UI</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">=[</span><span class="no">hashtable</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">(</span><span class="vm">@</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Convert Windows and Pages to a XAML object graph</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlMainWindow</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlPage1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlPage2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Add each named control to the $UIControls hashtable (repeat for each Window / Page)</span>
</span></span><span class="line"><span class="cl"><span class="c"># This allows key controls to be referenced directly at runtime, rather than through a parent-child hierarchy of Page&gt;Control</span>
</span></span><span class="line"><span class="cl"><span class="nv">$XmlMainWindow</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage1</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage2</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Example of loading first Page into the Frame</span>
</span></span><span class="line"><span class="cl"><span class="c"># &#34;frame_Pages&#34; in the name of the Frame defined in the XAML file</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">frame_Pages</span><span class="p">.</span><span class="py">Content</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Show the user interface</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span><span class="p">.</span><span class="py">ShowDialog</span><span class="p">()</span>  
</span></span></code></pre></div><h2 id="using-wpf-styles-to-simplify-xaml">Using WPF Styles to simplify XAML</h2>
<p>XAML styles are analogous to CSS in HTML. The XAML style can apply to all controls of a type, such as all TextBoxes, defining properties such as the colour, font, border etc. If a property needs to be changed, it only needs to be updated in one place. Its also a flexible solution because Style properties can still be over-ridden on an individual control.</p>
<p>Styles can be defined in a separate XAML file and then <em>imported</em> on each Window / Page as a <strong>ResourceDictionary</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Styles.xaml defines a TextBox style called ModernTextBox--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ResourceDictionary</span> <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Style</span> <span class="na">TargetType=</span><span class="s">&#34;{x:Type TextBox}&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">x:Key=</span><span class="s">&#34;ModernTextBox&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;BorderThickness&#34;</span> <span class="na">Value=</span><span class="s">&#34;0,0,0,1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;BorderBrush&#34;</span> <span class="na">Value=</span><span class="s">&#34;LightGray&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;Background&#34;</span> <span class="na">Value=</span><span class="s">&#34;Transparent&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;FontSize&#34;</span> <span class="na">Value=</span><span class="s">&#34;18&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Style&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/ResourceDictionary&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MainWindow.xaml imports Styles.xml as a ResourceDictionary--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Window</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;850&#34;</span> <span class="na">Width=</span><span class="s">&#34;450&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Title=</span><span class="s">&#34;Main Window&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Import a style so it can used by controls in this Window--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Window.Resources&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;ResourceDictionary</span> <span class="na">Source=</span><span class="s">&#34;Styles.xaml&#34;</span><span class="nt">/&gt;</span>     
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Window.Resources&gt;</span>
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Page1.xaml imports Styles.xml as a ResourceDictionary--&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Page</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Background=</span><span class="s">&#34;Transparent&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Import a style so it can used by controls in this Page--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Page.Resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ResourceDictionary</span> <span class="na">Source=</span><span class="s">&#34;Styles.xaml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Page.Resources&gt;</span>
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MainWindow.xaml or Page1.xaml uses the style on a Textbox as shown below--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;TextBox</span> <span class="na">x:Name=</span><span class="s">&#34;txt_InstallArgs&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;330&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;30&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBox}&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><h2 id="define-the-wpf-layout-with-the-grid-control">Define the WPF layout with the Grid control</h2>
<p>The <strong>Grid</strong> control overlays invisible rows and columns on a parent container such as a Window or Page. The Controls are then positioned based on the Row and Column number. It is fairly simple to design the Grid layout using a basic text editor.  For a more WYSIWYG experience, use Microsoft Visual Studio to view the UI at design time.</p>
<p>There are three options for Grid Row/Column height / width:</p>
<table>
<thead>
<tr>
<th>Size</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>[Pixels]</td>
<td>A fixed size</td>
</tr>
<tr>
<td>&ldquo;Auto&rdquo;</td>
<td>Expand to fit content</td>
</tr>
<tr>
<td>&ldquo;*&rdquo;</td>
<td>Fit to remaining space in Window / Page</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!-- Example positioning a Textbox above a TextBlock using a Grid
</span></span></span><span class="line"><span class="cl"><span class="c">     TextBox is in Grid.Row = &#34;1&#34; and TextBlock is in Grid.Row = &#34;2&#34;--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Grid&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Grid.ColumnDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;Auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Grid.ColumnDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;*&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Grid.RowDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;TextBox</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Width=</span><span class="s">&#34;350&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBox}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;TextBlock</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;2&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Text=</span><span class="s">&#34;Enter your name&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBlock}&#34;</span><span class="nt">/&gt;</span>   
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/Grid&gt;</span>
</span></span></code></pre></div><h2 id="use-margins-to-create-space-between-controls">Use margins to create space between controls</h2>
<p>The Margin property is available on most controls. The margin creates a buffer of blank space around a control.  The margin can either be the same all round, or different for each vector - left, top, right, and bottom</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Example setting a Margin around a control--&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Different margin for left, top, right, and bottom --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ComboBox</span> <span class="na">x:Name=</span><span class="s">&#34;combo_Supercedence&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Column=</span><span class="s">&#34;0&#34;</span>  
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Row=</span><span class="s">&#34;11&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;360&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;24&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Margin=</span><span class="s">&#34;15,5,0,0&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Same margin all round --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ComboBox</span> <span class="na">x:Name=</span><span class="s">&#34;combo_Supercedence&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Column=</span><span class="s">&#34;0&#34;</span>  
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Row=</span><span class="s">&#34;11&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;360&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;24&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Margin=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>   
</span></span></code></pre></div><h2 id="defining-event-handlers">Defining Event Handlers</h2>
<p>WPF controls support events that occur based on user input. Some events are common to most controls, such as <strong>MouseEnter</strong> and <strong>MouseLeave</strong> while other events are specific to a control type, such as <strong>SelectionChanged</strong> in a ComboBox.</p>
<p>PowerShell uses an &ldquo;Add_[Event Name]&rdquo; syntax to define the code to run when the event fires as below. The per-control event list is available in the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.combobox?view=windowsdesktop-7.0#events" target="_blank">MS Documentation</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Example event handler - code will run when the Combo box selection changes</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">combo_language</span><span class="p">.</span><span class="py">Add_SelectionChanged</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nv">$Language</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">combo_language</span><span class="p">.</span><span class="py">SelectedItem</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Example event handler - code will run when the button is left clicked</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">btn_Next</span><span class="p">.</span><span class="py">Add_Click</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="py">frame_Pages</span><span class="p">.</span><span class="py">Content</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Creating a GUI App with PowerShell and WPF - Part 1 Runspaces</title>
      <link>https://write-verbose.com/2023/03/21/PowerShellWPFPt1/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/21/PowerShellWPFPt1/</guid>
      <description>Create a responsive WPF app using PowerShell Runspaces to simulate multiple threads</description>
      <content:encoded><![CDATA[<p><strong>Things I learned creating a GUI tool with PowerShell and WPF.</strong><br>
The snippets in this article are based on the <a href="https://github.com/gbdixg/Show-Win32AppUI" target="_blank">Show-Win32AppUI tool</a> available on GitHub.</p>
<h1 id="disclaimer">Disclaimer</h1>
<p>I realise PowerShell isn&rsquo;t suited to creating GUI apps. The main reason to use PowerShell is <em>supportability</em>. Specifically, when working with Colleagues who aren&rsquo;t comfortable maintaining a compiled language like C#. Its far easier to make small changes to variables or paths in a script.</p>
<h1 id="why-wpf">Why WPF?</h1>
<p>WPF is a more modern and flexible choice for a UI than the something like WinForms.  There are many newer frameworks available, but most require a runtime on the target platform.  WPF is easy to deploy as it&rsquo;s built-into the .NET Framework and available by default on Windows 10/11.</p>
<h1 id="part1---design-the-app-around-powershell-runspaces">Part1 - Design the app around PowerShell Runspaces</h1>
<p>If you try to create a GUI app with a single thread, it will be unresponsive and hang whenever an action takes more than a few seconds. PowerShell runs under a single thread (STA mode) making it unsuitable for a responsive GUI app.  However, creating separate <em>Runspaces</em> is a workaround for this problem. Runspaces are analogous to spinning up new PowerShell sessions in the background to execute discrete script blocks.</p>
<p>While Runspaces are effective, they also add a lot of complexity. For example:</p>
<ul>
<li>Functions and variables are not shared between Runspaces by default and have to be imported when the Runspace is started.</li>
<li>You should use a thread-safe collection when updating shared variables inside a Runspace.</li>
<li>The WPF UI can&rsquo;t be updated directly from a separate Runspace</li>
<li>Writing to a single file from multiple Runspaces requires a locking mechanism, such as a Mutex</li>
<li>The lifecycle of Runspaces must be managed, capturing output at completion</li>
<li>Warning, Verbose and Error streams in the Runspace are not captured by default</li>
<li>Warning, Verbose and Error streams do not appear in the console by default.</li>
</ul>
<p>These concepts are covered in more detail below.</p>
<h2 id="sharing-variables-functions-and-modules-with-a-runspace">Sharing variables, functions and modules with a Runspace</h2>
<p><strong>Required modules</strong> must be specifically loaded into the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.initialsessionstate?view=powershellsdk-7.3.0" target="_blank">InitialSessionState</a> of the Runspace. The Runspace won&rsquo;t automatically have access to modules already loaded in the <em>parent</em> PowerShell session.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example of importing modules into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$modulesToLoad</span><span class="p">=</span><span class="vm">@</span><span class="p">(</span><span class="s1">&#39;Microsoft.Graph.Intune&#39;</span><span class="p">,</span><span class="s1">&#39;MSAL.PS&#39;</span><span class="p">)</span> <span class="c"># Must be installed on the computer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$initialSessionState</span> <span class="p">=</span> <span class="p">[</span><span class="no">initialsessionstate</span><span class="p">]::</span><span class="n">CreateDefault</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$module</span> <span class="k">in</span> <span class="nv">$modulesToLoad</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$initialSessionState</span><span class="p">.</span><span class="py">ImportPSModule</span><span class="p">(</span><span class="nv">$module</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span></code></pre></div><p>You can also import <strong>standalone Functions</strong> into a Runspace using the <em>InitialSessionState</em>. The following imports functions already loaded in the <em>parent</em> session, but you could also load directly from a file on disk.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example importing parent session functions into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$FunctionsToImport</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s1">&#39;Write-TxtLog&#39;</span><span class="p">,</span><span class="s1">&#39;Get-APIResults&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$function</span> <span class="k">in</span> <span class="nv">$functionsToImport</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$definition</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="s2">&#34;Function:\</span><span class="nv">$Function</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$entry</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Management</span><span class="p">.</span><span class="py">Automation</span><span class="p">.</span><span class="py">Runspaces</span><span class="p">.</span><span class="py">SessionStateFunctionEntry</span> <span class="n">-ArgumentList</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$definition</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$initialSessionState</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="nv">$entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Variables</strong> can be shared with a Runspace using the <strong>SetVariable</strong> method of the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.sessionstateproxy?view=powershellsdk-7.3.0" target="_blank">SessionStateProxy</a> class.  SetVariable parameters are the <em>variable name</em> (without the &lsquo;$&rsquo;) and the value to set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example importing parent session variables into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$VariablesToImport</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="s1">&#39;displayName&#39;</span><span class="p">)</span> <span class="c"># existing variables in the parent session</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">Foreach</span><span class="p">(</span><span class="nv">$var</span> <span class="k">in</span> <span class="nv">$VariablesToImport</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$VarValue</span> <span class="p">=</span> <span class="nb">Get-Variable</span> <span class="n">-Name</span> <span class="nv">$Var</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-ExpandProperty</span> <span class="n">Value</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="nv">$Var</span><span class="p">,</span><span class="nv">$VarValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="runspace-output-using-a-thread-safe-collection">Runspace output using a thread-safe collection</h2>
<p>Output from a Runspace can be captured during execution using a thread-safe collection imported from the parent session. When a Runspace updates the collection the updated values are available in the parent session and any concurrent Runspaces that also import the collection.  Thread safe collections usually need to be <em>locked</em> during update to prevent conflicts.</p>
<p>With a <strong>synchronised Arraylist</strong>, values added in the Runspace will immediately available to all other Runspaces and the parent session, as in following example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example using locks on a thread safe collection ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$BackgroundJobs</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.collections.arraylist</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Collections</span><span class="p">.</span><span class="n">ArrayList</span><span class="p">))</span> <span class="c"># Thread safe collection</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;BackgroundJobs&#39;</span><span class="p">,</span><span class="nv">$BackgroundJobs</span><span class="p">)</span> <span class="c"># Pass the variable into the RunSpace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># This is the Runspace script block</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># lock</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="s2">&#34;New item&#34;</span><span class="p">)</span> <span class="c"># modify ArrayList</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># unlock</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">},</span><span class="vm">$True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span><span class="p">.</span><span class="py">Runspace</span> <span class="p">=</span> <span class="nv">$Runspace</span>
</span></span><span class="line"><span class="cl"><span class="vm">$null</span> <span class="p">=</span> <span class="nv">$PSCode</span><span class="p">.</span><span class="py">BeginInvoke</span><span class="p">()</span>
</span></span></code></pre></div><p>There are also <em>Queues and Stacks</em> in .NET that automatically implement locking and don&rsquo;t need the System.Threading.Monitor code in the above example e.g. a <em>ConcurrentQueue</em>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### ConcurrentQueue example - doesn&#39;t need System.Threading.Monitor ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Collections.Concurrent.ConcurrentQueue[psobject]</span><span class="p">]::</span><span class="n">new</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryAdd</span><span class="p">([</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span> <span class="n">givenName</span> <span class="p">=</span> <span class="s1">&#39;Bill&#39;</span><span class="p">;</span><span class="n">sn</span><span class="p">=</span><span class="s1">&#39;Gates&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryAdd</span><span class="p">([</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span> <span class="n">givenName</span> <span class="p">=</span> <span class="s1">&#39;Steve&#39;</span><span class="p">;</span><span class="n">sn</span><span class="p">=</span><span class="s1">&#39;Jobs&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;colQueue&#39;</span><span class="p">,</span><span class="nv">$colQueue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># This is the Runspace script block</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># No locking required when ConcurrentQueue is modified in the Runspace</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$Entry</span> <span class="p">=</span> <span class="vm">$null</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryDequeue</span><span class="p">([</span><span class="no">ref</span><span class="p">]</span><span class="nv">$Entry</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Write-Output</span> <span class="nv">$Entry</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"> <span class="p">},</span><span class="vm">$True</span><span class="p">)</span>   
</span></span></code></pre></div><p>More information on thread safe collections is available <a href="https://learn.microsoft.com/en-us/dotnet/standard/collections/thread-safe/" target="_blank">here</a></p>
<h2 id="how-to-update-the-wpf-user-interface-from-another-runspace">How to update the WPF user interface from another Runspace</h2>
<p>If you try to modify the WPF user interface from a separate Runspace, PowerShell will throw an error indicating only the owning thread (Runspace) can update it.</p>
<p><img loading="lazy" src="/img/UIThreadError2.png" alt="UIError"  />
</p>
<p>The solution is to wrap the update in a <strong>Dispatcher.Invoke</strong> method as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example updating a WPF control from another thread (Runspace) ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># In the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="c"># txt_SetupFile is a WPF text box created in the parent session of the Runspace</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">txt_SetupFile</span><span class="p">.</span><span class="py">Dispatcher</span><span class="p">.</span><span class="py">Invoke</span><span class="p">([</span><span class="no">action</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="py">txt_SetupFile</span><span class="p">.</span><span class="py">Text</span> <span class="p">=</span> <span class="s2">&#34;Successfully updated from another Runspace&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span><span class="s2">&#34;Normal&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="writing-to-the-same-log-file-from-separate-runspaces">Writing to the same log file from separate Runspaces</h2>
<p>Runspaces also make it more complex to write to a single log file. There is potential for a deadlock or <a href="https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#race-conditions" target="_blank">race condition</a> to occur. A <strong>Mutex</strong> is one way to implement the required locking:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example using a Mutex lock before writing to a log file ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># In the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="c"># LogMutex is an arbitrary name but must be the same when used in any Runspace and the parent session</span>
</span></span><span class="line"><span class="cl"><span class="nv">$mtx</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Threading</span><span class="p">.</span><span class="py">Mutex</span><span class="p">(</span><span class="vm">$false</span><span class="p">,</span> <span class="s2">&#34;LogMutex&#34;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">If</span> <span class="p">(</span><span class="nv">$mtx</span><span class="p">.</span><span class="py">WaitOne</span><span class="p">()){</span> <span class="c"># Wait until this Runspace can get a lock on the LogMutex object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># Lock obtained. Other Runspaces are now waiting</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Add-Content</span> <span class="n">-Path</span> <span class="nv">$logFile</span> <span class="n">-Value</span> <span class="nv">$Message</span>  <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">void</span><span class="p">]</span><span class="nv">$mtx</span><span class="p">.</span><span class="py">ReleaseMutex</span><span class="p">()</span> <span class="c"># release the lock</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$mtx</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="managing-runspace-lifecycle">Managing Runspace lifecycle</h2>
<p>A Runspace executes its script block asynchronously and output (if any) is available at the end. The parent session must manage Runspaces, checking for completion, processing output and ultimately disposing of them.  If you don&rsquo;t dispose of Runspaces they will persist until the parent PowerShell session is closed and could eat-up memory.</p>
<p>A <strong>Timer</strong> is a common way to manage Runspaces in an event-driven WPF script. When the Timer event fires, its script blocks checks for Runspace completion as in the example below. A thread safe collection is used to keep track of Runspaces until they are disposed of.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example Timer code to clean-up completed Runspaces ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Create a collection to track Runspaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PS</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">(</span><span class="nv">$codeToRunInRunspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$handle</span> <span class="p">=</span> <span class="nv">$PS</span><span class="p">.</span><span class="py">BeginInvoke</span><span class="p">()</span> <span class="c"># Start the runspace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Add the new Runspace to the RunspaceJobs collection</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceJobs</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.collections.arraylist</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Collections</span><span class="p">.</span><span class="n">ArrayList</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># lock</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="py">Add</span><span class="p">([</span><span class="no">PSCustomObject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">powerShell</span> <span class="p">=</span> <span class="nv">$PS</span>  <span class="c"># System.Management.Automation.PowerShell object</span>
</span></span><span class="line"><span class="cl">        <span class="n">runspace</span> <span class="p">=</span> <span class="nv">$handle</span> <span class="c"># System.Management.Automation.PowerShellAsyncResult Object</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span> <span class="p">|</span> <span class="nb">Out-Null</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># unlock</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Timer to manage Runspace lifecycle</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Windows</span><span class="p">.</span><span class="py">Forms</span><span class="p">.</span><span class="py">Timer</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Enabled</span> <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Interval</span> <span class="p">=</span> <span class="mf">5000</span>  <span class="c"># Timer code runs every 5 seconds</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Add_Tick</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># In the timer code</span>
</span></span><span class="line"><span class="cl">    <span class="k">Foreach</span><span class="p">(</span><span class="nv">$job</span> <span class="k">in</span> <span class="nv">$Script:RunspaceJobs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">IsCompleted</span> <span class="o">-eq</span> <span class="vm">$True</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">           <span class="c"># Capture completed Runspace output and dispose of it to free-up memory</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$RSOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">EndInvoke</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="n">runspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="c"># Remove the job from the tracking collection</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="py">Remove</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Host</span> <span class="s2">&#34;Runspace disposal Failed &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="c">#foreach</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">})</span><span class="c">#End of timer scriptblock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Start</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="capturing-verbose-warning-and-error-streams-from-a-runspace">Capturing Verbose, Warning and Error streams from a Runspace</h2>
<p>By default, the Runspace output streams are not displayed in the parent session console and are lost when the Runspace is disposed.<br>
The output can be captured at Runspace completion using the <strong>Streams</strong> object. The modification below to the Timer script block saves the output to a log file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">#### Modified Timer code to capture additional output streams at clean-up ####</span>
</span></span><span class="line"><span class="cl"><span class="k">Foreach</span><span class="p">(</span><span class="nv">$job</span> <span class="k">in</span> <span class="nv">$Global:BackgroundJobs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">IsCompleted</span> <span class="o">-eq</span> <span class="vm">$True</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Runspace &#39;</span><span class="p">$(</span><span class="nv">$job</span><span class="p">.</span><span class="py">powershell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="s2">&#39; completed...&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c"># Could also include &#39;DEBUG&#39; and &#39;Information&#39; streams if used in your Runspaces</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$Streams</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Verbose&#39;</span><span class="p">=</span><span class="s1">&#39;VERBOSE&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Warning&#39;</span><span class="p">=</span><span class="s1">&#39;WARN&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Error&#39;</span><span class="p">=</span><span class="s1">&#39;ERROR&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">Foreach</span><span class="p">(</span><span class="nv">$StreamType</span> <span class="k">in</span> <span class="nv">$Streams</span><span class="p">.</span><span class="n">Keys</span><span class="p">){</span>                        
</span></span><span class="line"><span class="cl">            <span class="nv">$StreamOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powershell</span><span class="p">.</span><span class="py">Streams</span><span class="p">.</span><span class="s2">&#34;</span><span class="nv">$StreamType</span><span class="s2">&#34;</span>  <span class="c"># Capture the Runspace output for each stream</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="nv">$StreamOutput</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$StreamOutput</span> <span class="p">|</span> <span class="nb">Foreach-Object</span> <span class="p">{</span> <span class="nb">Write-TxtLog</span> <span class="nv">$_</span> <span class="n">-indent</span> <span class="mf">2</span> <span class="n">-severity</span> <span class="vm">$</span><span class="p">(</span><span class="nv">$Streams</span><span class="p">[</span><span class="nv">$StreamType</span><span class="p">])</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Remove-Variable</span> <span class="n">-name</span> <span class="s1">&#39;StreamOutput&#39;</span> <span class="n">-force</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Disposing of runspace...&#34;</span> <span class="n">-indent</span> <span class="mf">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$RSOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">EndInvoke</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="n">runspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c"># Remove the job from the tracking list</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="py">Remove</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Failed &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span> <span class="n">-indent</span> <span class="mf">2</span> <span class="n">-severity</span> <span class="n">ERROR</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c">#foreach</span>
</span></span></code></pre></div><h2 id="displaying-verbose-warning-and-error-streams-in-the-console">Displaying Verbose, Warning and Error Streams in the console</h2>
<p>The approach above captures output when the Runspace code has completed. If you want feedback in the console during execution there are a couple of methods.</p>
<p>Firstly, the simplest option is to use the <strong>.NET Console.Writeline()</strong> method. Although this doesn&rsquo;t capture the PowerShell streams, it is a simple way to provide real-time console output in the parent session.<br>
You will need to implement your own colour-coding to distinguish between warnings or errors if needed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example Runspace code to write to parent PowerShell console ###</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">console</span><span class="p">]::</span><span class="n">ForegroundColor</span><span class="p">=</span><span class="s1">&#39;YELLOW&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">Console</span><span class="p">]::</span><span class="n">WriteLine</span><span class="p">(</span><span class="s1">&#39;Username was not found&#39;</span><span class="p">)</span>  <span class="c"># Automatically writes to the parent session</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">console</span><span class="p">]::</span><span class="n">ResetColor</span><span class="p">()</span>
</span></span></code></pre></div><p>Alternatively, you could pass the built-in $Host variable from the parent session into the Runspace and use methods like WriteVerboseLine() as shown below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example writing to parent console using the $Host variable </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;ParentHost&#39;</span><span class="p">,</span><span class="nv">$Host</span><span class="p">)</span>  <span class="c"># Built-in host variable passed into the Runspace as $ParentHost</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Write to the parent console from the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">ui</span><span class="p">.</span><span class="py">WriteVerboseLine</span><span class="p">(</span><span class="s2">&#34;Realtime verbose output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">UI</span><span class="p">.</span><span class="py">WriteWarningLine</span><span class="p">(</span><span class="s2">&#34;Realtime warning output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">UI</span><span class="p">.</span><span class="py">WriteErrorLine</span><span class="p">(</span><span class="s2">&#34;Realtime error output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/gbdixg/Show-Win32AppUI" target="_blank">Show-Win32AppUI tool</a> for an example of using these ideas together in a WPF app.</p>
<p>See <a href="/2023/03/21/PowerShellWPFPt2/">part2 of this series</a> for information on WPF controls, events and XAML.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>A custom Azure app with limited Microsoft Graph consent for PowerShell</title>
      <link>https://write-verbose.com/2023/03/19/AzureAppRegistration/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/19/AzureAppRegistration/</guid>
      <description>Step by step guide to creating an Azure App with granular access to MS Graph PowerShell</description>
      <content:encoded><![CDATA[<p>A step by step guide to registering a custom Azure application for interactive MSGraph PowerShell. The example will create an app for use with the <a href="/2023/03/18/Show-Win32AppUI/">Show-Win32AppUI tool</a>.</p>
<h1 id="why-use-a-custom-app">Why use a custom app?</h1>
<p>The Microsoft Graph enables access to a wide scope of Azure / Microsoft 365 providers and resources. A compromised Global Administrator account or errant script could cause widespread damage very quickly.</p>
<p>A custom Azure application can limit MS Graph access to specific requirements of a PowerShell script, reducing the risk.</p>
<h1 id="disable-user-consent">Disable user consent</h1>
<p>The first step is to prevent users granting application consent. User consent is enabled by default and presents a risk of unwanted access to company data.</p>
<p>In the <a href="https://aad.portal.azure.com/" target="_blank">Azure AD portal</a>, navigate to <strong>Enterprise applications</strong> and then <strong>Consent and permissions</strong>.</p>
<p>Many companies change the setting to <strong>Do not allow user consent</strong>. Note that this does create an admin overhead, so you could look into the advanced options of defining low-risk permissions or using conditional access.</p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp0.png" alt="User consent"  />
</p>
<p>The following admin roles can then grant application consent:</p>
<ul>
<li>Cloud App Administrators</li>
<li>Global Administrators</li>
</ul>
<h1 id="clean-up-microsoft-graph-powershell">Clean-up Microsoft Graph PowerShell</h1>
<p>If you want to implement Custom Apps for access to MSGraph, you should first review and remove excess permissions from the <em>Microsoft Graph PowerShell</em> app. Over time administrators may have consented to more and more permissions.</p>
<p>It isn&rsquo;t possible to remove permissions or revoke consent in the admin portal, but it does provide the PowerShell commands.</p>
<p>In the <a href="https://aad.portal.azure.com/" target="_blank">Azure AD portal</a>, navigate to <strong>Enterprise applications</strong><br>
In the <em>All applications</em> view, select <strong>Microsoft Graph PowerShell</strong> and then <strong>Permissions</strong><br>
Click <strong>Review Permissions</strong></p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp05.png" alt="User consent"  />
</p>
<p>Select <strong>This application has more permissions that I want</strong>. The following PowerShell is displayed (uses the AzureAD module):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Connect-AzureAD</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Get Service Principal using objectId</span>
</span></span><span class="line"><span class="cl"><span class="nv">$sp</span> <span class="p">=</span> <span class="nb">Get-AzureADServicePrincipal</span> <span class="n">-ObjectId</span> <span class="s2">&#34;1aded007-dfd1-49cc-8b70-9923a4f53a05&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Get all delegated permissions for the service principal</span>
</span></span><span class="line"><span class="cl"><span class="nv">$spOAuth2PermissionsGrants</span> <span class="p">=</span> <span class="nb">Get-AzureADOAuth2PermissionGrant</span> <span class="n">-All</span> <span class="vm">$true</span><span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="py">clientId</span> <span class="o">-eq</span> <span class="nv">$sp</span><span class="p">.</span><span class="py">ObjectId</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Remove all delegated permissions</span>
</span></span><span class="line"><span class="cl"><span class="nv">$spOAuth2PermissionsGrants</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Remove-AzureADOAuth2PermissionGrant</span> <span class="n">-ObjectId</span> <span class="nv">$_</span><span class="p">.</span><span class="py">ObjectId</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Get all application permissions for the service principal</span>
</span></span><span class="line"><span class="cl"><span class="nv">$spApplicationPermissions</span> <span class="p">=</span> <span class="nb">Get-AzureADServiceAppRoleAssignedTo</span> <span class="n">-ObjectId</span> <span class="nv">$sp</span><span class="p">.</span><span class="py">ObjectId</span> <span class="n">-All</span> <span class="vm">$true</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="py">PrincipalType</span> <span class="o">-eq</span> <span class="s2">&#34;ServicePrincipal&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Remove all delegated permissions</span>
</span></span><span class="line"><span class="cl"><span class="nv">$spApplicationPermissions</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Remove-AzureADServiceAppRoleAssignment</span> <span class="n">-ObjectId</span> <span class="nv">$_</span><span class="p">.</span><span class="py">PrincipalId</span> <span class="n">-AppRoleAssignmentId</span> <span class="nv">$_</span><span class="p">.</span><span class="py">objectId</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h1 id="custom-app-step-by-step">Custom app Step by Step</h1>
<p>The following steps create a new application with delegated API access to MSGraph, suitable for use from a PowerShell script. The permissions are specific to the <a href="/2023/03/18/Show-Win32AppUI/">Show-Win32AppUI</a></p>
<p>Open the <a href="https://aad.portal.azure.com/" target="_blank">Azure AD portal</a> and select <strong>App registrations</strong></p>
<p>Click on <strong>New Registration</strong> to start the process</p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp1.png" alt="New registration"  />
</p>
<p>Enter a name for the application and select the <strong>single tenant</strong> option. Do not enter a redirect URI at this stage.</p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp2.png" alt="App Name"  />
</p>
<p>Click on <strong>Register</strong></p>
<p>The application is created and the admin center shows the <em>Overview</em> page.</p>
<p>Click <strong>Add a Redirect URI</strong></p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp3.png" alt="App Name"  />
</p>
<p>The authentication step is displayed. Click on <strong>Add a platform</strong></p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp4.png" alt="App Name"  />
</p>
<p>Select <strong>Mobile and desktop applications</strong></p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp5.png" alt="App Name"  />
</p>
<p>Enable the <em>nativeclient</em> URI to support PowerShell 5.1 scripts. Add a custom redirect URI of <em>http://localhost</em> to support PowerShell 7.x scripts.</p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp6.png" alt="App Name"  />
</p>
<p>Click <strong>Configure</strong> to save the URIs</p>
<p>Now back on the Authentication page, ensure the following options are set:</p>
<ul>
<li>Supported account types = <strong>Accounts in this organizational directory only</strong></li>
<li>Allow public client flows = <strong>No</strong></li>
</ul>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp7.png" alt="App Name"  />
</p>
<p>Click <strong>API permissions</strong> in the left pane</p>
<p>User.Read delegated access is already assigned by default.  Click <strong>Add a permission</strong></p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp8.png" alt="App Name"  />
</p>
<p>Select the <strong>Microsoft Graph</strong> API</p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp9.png" alt="App Name"  />
</p>
<p>Select <strong>Delegated permissions</strong></p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp10.png" alt="App Name"  />
</p>
<p>Search for each of the following delegated permissions, enable and click <strong>Add permissions</strong></p>
<ul>
<li>DeviceManagementApps.ReadWrite.All</li>
</ul>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp11.png" alt="App Name"  />
</p>
<p>Repeat the process to add permissions for the following:</p>
<ul>
<li>Group.ReadWrite.All</li>
<li>GroupMember.ReadWrite.All</li>
<li>Directory.AccessAsUser.All</li>
</ul>
<p>The API permissions page will show the list of added permissions with a warning that consent is <em>not granted</em>.<br>
Click <strong>Grant admin consent for <tenant></strong></p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp12.png" alt="App Name"  />
</p>
<p>The warnings will be replaced by a green tick.</p>
<p>Return to the application <strong>Overview</strong> page and note the <em>Application (client) ID</em> - this will be used to authenticate</p>
<h1 id="add-assignment-restrictions">Add assignment restrictions</h1>
<p>By default anyone in the tenant can access the application (although they need Role permissions to make changes in Azure AD and Intune). This step will limit access to a specific group.</p>
<p>View the <strong>Properties</strong> page of the app and change <strong>Assignment required</strong> to <em>Yes</em></p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp125.png" alt="App Name"  />
</p>
<p>Next click on <strong>Users and groups</strong> then <strong>add user/group</strong>. Select the required Azure AD group and <em>Assign</em>. Only members of this group can authenticate using the app.</p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp126.png" alt="App Name"  />
</p>
<h1 id="authenticating-using-the-custom-app">Authenticating using the custom app</h1>
<p><em>Delegated consent</em> uses the intersection of application permissions and user permissions to authorise access. i.e. the authenticated user must have the required permissions as well as the application.</p>
<p>Use interactive authentication to provide credentials with the required role permissions. Interactive auth prompts using the familiar browser page:</p>
<p><img loading="lazy" src="/img/AzureAppRegistration/CustomApp13.png" alt="App Name"  />
</p>
<p>Examples of PowerShell authentication using the app are below:</p>
<h2 id="msalps-authentication">MSAL.PS authentication</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$TenantID</span> <span class="p">=</span> <span class="p">&lt;</span><span class="n">your</span> <span class="n">tenant</span> <span class="n">ID</span> <span class="n">obtained</span> <span class="n">from</span> <span class="n">the</span> <span class="n">AAD</span> <span class="n">Overview</span> <span class="n">page</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ClientID</span> <span class="p">=</span> <span class="p">&lt;</span><span class="n">application</span> <span class="n">ID</span> <span class="n">of</span> <span class="n">the</span> <span class="n">custom</span> <span class="n">app</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Token</span> <span class="p">=</span> <span class="nb">Get-MSALToken</span> <span class="n">-TenantID</span> <span class="nv">$TenantID</span> <span class="n">-ClientID</span> <span class="nv">$ClientID</span> <span class="n">-Interactive</span>
</span></span></code></pre></div><h2 id="intunewin32app-authentication">IntuneWin32App authentication</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$TenantID</span> <span class="p">=</span> <span class="p">&lt;</span><span class="n">your</span> <span class="n">tenant</span> <span class="n">ID</span> <span class="n">obtained</span> <span class="n">from</span> <span class="n">the</span> <span class="n">AAD</span> <span class="n">Overview</span> <span class="n">page</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ClientID</span> <span class="p">=</span> <span class="p">&lt;</span><span class="n">application</span> <span class="n">ID</span> <span class="n">of</span> <span class="n">the</span> <span class="n">custom</span> <span class="n">app</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Connect-MSIntuneGraph</span> <span class="n">-TenantID</span> <span class="nv">$TenantID</span> <span class="n">-ClientID</span> <span class="nv">$ClientID</span> <span class="n">-Interactive</span>
</span></span></code></pre></div><p>The Connect-MSIntuneGraph command in the IntuneWin32App module creates global variables to store the token for later use:</p>
<ul>
<li>$Global:AuthenticationHeader</li>
<li>$Global:AccessToken</li>
</ul>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Create Intune Win32Apps with a PowerShell GUI front-end</title>
      <link>https://write-verbose.com/2023/03/18/Show-Win32AppUI/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/18/Show-Win32AppUI/</guid>
      <description>A PowerShell GUI app to simplify creating Win32 Apps in Intune</description>
      <content:encoded><![CDATA[<p>A GUI tool for end-to-end creation of Win32 Apps in Microsoft Intune.</p>
<p>This post provides details of &ldquo;Show-Win32AppUI&rdquo;, a GUI tool that simplifies the end-to-end process of creating Win32 Apps in Intune.</p>
<p>The GitHub source is <a href="https://github.com/gbdixg/Show-Win32AppUI" target="_blank">available here</a>.  Instructions for setup and use are below.</p>
<p><img loading="lazy" src="/img/Show-Win32AppUI/Show-Win32AppUI.gif" alt="Show-Win32AppUI"  />
</p>
<p>This isn&rsquo;t a one size fits all community tool. You will likely need to modify it to meet your needs. However, its written in PowerShell and has code comments and blog posts to make editing simpler.</p>
<h1 id="setup">SETUP</h1>
<h2 id="modules">Modules</h2>
<p><em>Show-Win32AppUI</em> depends on two PowerShell modules. Install these modules if you don&rsquo;t already have them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">MSAL</span><span class="p">.</span><span class="nb">PS
</span></span></span><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">IntuneWin32App</span>
</span></span></code></pre></div><p>The most recent tested versions are listed below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">MSAL</span><span class="p">.</span><span class="nb">PS </span><span class="n">-RequiredVersion</span> <span class="mf">4.37</span><span class="p">.</span><span class="py">0</span><span class="p">.</span><span class="py">0</span>
</span></span><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">IntuneWin32App</span> <span class="n">-RequiredVersion</span> <span class="mf">1.4</span><span class="p">.</span><span class="py">0</span>
</span></span></code></pre></div><h2 id="tenant-id">Tenant ID</h2>
<p>Update the $TenantID on line 4 of <em>Show-Win32AppUI.ps1</em> to use your required Azure tenant. Your tenant ID is available from the <a href="https://aad.portal.azure.com/" target="_blank">Azure AD portal</a> <em>Overview</em> page.</p>
<h2 id="azure-client-app">Azure Client App</h2>
<p>An Azure Client App is used with interactive authentication to access the Microsoft Graph. There are two setup steps required:</p>
<ol>
<li><strong>Specify the Azure application</strong><br>
By default, the tool will use the built-in <em>Microsoft Graph PowerShell</em> enterprise application. However, I recommend creating a custom Azure app in your own tenant. A step by step guide to creating a custom app is available <a href="/2023/03/19/AzureAppRegistration/">here</a>.</li>
</ol>
<blockquote>
<p>If using a custom app, update <em>Show-Win32AppUI.ps1</em> to set the $ClientID variable on line 6 to match the client ID (a.k.a Application ID) of your app.</p>
</blockquote>
<ol start="2">
<li><strong>Consent to the required permissions on behalf of your tenant</strong><br>
Whether you use a custom app or Microsoft Graph PowerShell, the app must be configured with the required API permissions and consent must be granted. The <strong>delegated</strong> permissions are listed below. A step by step for setting these permissions can be found in the second part of <a href="/2023/03/19/AzureAppRegistration/">this article</a>.</li>
</ol>
<ul>
<li>Directory.AccessAsUser.All</li>
<li>DeviceManagementApps.ReadWrite.All</li>
<li>Group.ReadWrite.All</li>
<li>GroupMember.ReadWrite.All</li>
<li>User.Read</li>
</ul>
<h2 id="user-permissions">User permissions</h2>
<p><em>Delegated consent</em> uses the intersection of application permissions and user permissions to authorise access. i.e. the authenticated user must have the required permissions as well as the application. When using the app, authenticate using an Azure account with <em>one</em> of the following roles:</p>
<ul>
<li>Intune Administrator</li>
<li>Global Administrator</li>
</ul>
<h2 id="workstation-permissions">Workstation permissions</h2>
<p>The tool does not need administrative access to the client workstation. Internet access is required, to download the <a href="https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool" target="_blank">Win32 Content Prep tool</a> on first use.</p>
<h2 id="powershell-script-execution">PowerShell script execution</h2>
<p>PowerShell script execution is disabled on Windows clients by default. Use one of the methods below to allow script execution on the workstation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">set-executionpolicy</span> <span class="n">Unrestricted</span>
</span></span></code></pre></div><p>or</p>
<pre tabindex="0"><code class="language-CMD" data-lang="CMD">powershell -executionpolicy bypass -file &lt;path to script&gt;
</code></pre><h1 id="launch-the-tool">Launch the tool</h1>
<p>Start a PowerShell 5.1 or Pwsh 7.x console and execute the script as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="p">.\</span><span class="nb">Show-Win32AppUI</span><span class="p">.</span><span class="py">ps1</span>
</span></span></code></pre></div><p>To show debug information in the console add the <em>WriteHost</em> switch:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="p">.\</span><span class="nb">Show-Win32AppUI</span><span class="p">.</span><span class="py">ps1</span> <span class="n">-WriteHost</span>
</span></span></code></pre></div><h1 id="using-the-tool">Using the tool</h1>
<table>
  <tr>
    <td><h3>Page1 - Package</h3>
    Use the file dialog to select the main <b>Setup File</b> - .msi, .exe or .ps1.<br>
    For an .msi file, the setup and uninstall automatically uses MSIEXEC, defaulting to a quiet install/uninstall and verbose logging.<br>
    For an .exe file, the setup parameters default to /S, but you should check the vendor information and replace this as appropriate.<br>
    For a .ps1 file, setup and uninstall defaults to -noprofile and -executionpolicy bypass.<br><br>
    The package <b>source folder</b> is the folder containing the setup file. All the files in this folder are packaged into an .intunewin file in a later step.<br><br>
    The tool creates installation wrapper scripts called install.ps1 and uninstall.ps1 in the package source folder. Existing files with these names are overwritten.<br><br>
    The <i>Next</i> button is only available when required fields have been completed.
    </td>
    <td width="450"><img src="/img/Show-Win32AppUI/Win32AppUI-Page1.png" alt="1" width = "450px" height = "850px"></td>
   </tr>
   <tr>
      <td><h3>Page2 - Deployment</h3>
      The <b>Display Name</b> is built from the Publisher, App Name, Version and Package Number. If the language is changed from the default or the <i>Bitness</i> is changed to x86, these are also included in the Display Name<br><br>
      For .msi and .exe files, the fields are populated with information from the setup file, but can be edited as required.<br><br>
      If there is already an Intune application with the same Display Name a warning will appear in the status bar. The simplest solution is to increment the Package Number.<br><br>
      The <i>Next</i> button is only available when required fields have been completed.
      </td>
      <td width="450"><img src="/img/Show-Win32AppUI/Win32AppUI-Page2.png" alt="2" width = "450px" height = "850px"></td>
  </tr>
  <tr>
    <td><h3>Page3 - Assignment</h3>
    <b>Assignment Groups</b> shows the names of three AAD groups for <i>Required Install, Available Install and Uninstall</i>. The group name suffix is based on the App Name from Page 2 and cannot be edited here.<br><br>
    The Owner must be a UPN of an AAD user. Start typing a name in the top box to see a list of options. Select a name and click Add. The Owner is set on the properties of the Win32App and the AAD groups.<br><br>
    The Dependency and Supercedence lists are populated with existing Win32 Apps. Select from the list if these options are needed. Currently you can only select one of these options due to a limitation in the IntuneWin32App module.<br><br>
    Click on the Logo box to select a image file for display with the application in the Company Portal.<br><br>
    The <i>Next</i> button is only available when required fields have been completed.
    </td>
    <td width="450"><img src="/img/Show-Win32AppUI/Win32AppUI-Page3.png" alt="3" width = "450px" height = "850px"></td>
  </tr>
  <tr>
    <td><h3>Page3 - Implement</h3>
    The final page follows a step-by-step approach to creating the Win32 App.<br><br>
    <b>Create Wrapper Scripts</b> creates an install.ps1 and uninstall.ps1 file in the package source folder.<br><br>
    <b>Create Intunewin Package</b> uses the Win32 Content Prep Tool to build an .intunewin file in the Output Folder.<br><br>
    <b>Create App Groups</b> creates three AAD groups for Required Install, Available Install and Uninstall. If the groups already exist they are re-used.<br><br>
    <b>Create Win32 App</b> creates the Win32 App in Intune and uploads the .intunewin file. This step can take some time depending on the package size.<br><br>
    <b>Configure Dependency / Configure Supercedence</b> modifies the Win32 App in Intune. These steps are skipped if they are set to None.<br><br>
    <b>Configure Assignment</b> modifies the Win32 App in Intune to add the assignment groups created in the earlier step.
    </td>
    <td width="450"><img src="/img/Show-Win32AppUI/Win32AppUI-Page4.png" alt="4" width = "450px" height = "850px"></td>
  </tr>
</table>
<h1 id="troubleshooting">Troubleshooting</h1>
<p>The tool creates a debug log on every run with detailed information and error messages. The default LogFolder is C:\Temp, but can be modified on Line 8 of Show-Win32AppUI.ps1.</p>
<p>The -WriteHost switch will also show the debug output in the console.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="p">.\</span><span class="nb">Show-Win32AppUI</span><span class="p">.</span><span class="py">ps1</span> <span class="n">-writehost</span>
</span></span></code></pre></div><p><img loading="lazy" src="/img/Show-Win32AppUI/Win32AppUI-WriteHost.png" alt="WriteHost"  />
</p>
<h1 id="options">Options</h1>
<p>The variables section in Show-Win32AppUI.ps1 allows default settings to be modified. The following section is at Line 50:</p>
<p><img loading="lazy" src="/img/Show-Win32AppUI/Win32AppUI-Defaults.png" alt="WriteHost"  />
</p>
<h1 id="detection-method">Detection Method</h1>
<p>The Win32 app detection is hardcoded to use a file exists method. The <em>Install.ps1</em> script wrapper creates a &ldquo;.ps1.tag&rdquo; file under the %PROGRAMDATA% folder and <em>Uninstall.ps1</em> deletes it - a detection method <a href="https://oofhours.com/2020/05/18/two-for-one-updated-autopilot-branding-and-update-os-scripts/" target="_blank">first suggested by Michael Niehaus</a></p>
<h1 id="credits">Credits</h1>
<ul>
<li>
<p>Show-Win32AppUI is a front-end to the excellent <a href="https://github.com/MSEndpointMgr/IntuneWin32App" target="_blank">IntuneWin32App module</a>. Full credit to the contributors of this project.</p>
</li>
<li>
<p>The <a href="https://github.com/AzureAD/MSAL.PS" target="_blank">MSAL.PS module</a> has simplified the transition from ADAL to MSAL authentication.</p>
</li>
<li>
<p><a href="https://learn-powershell.net/" target="_blank">Boe Prox</a> for PowerShell Runspace tips</p>
</li>
<li>
<p><a href="https://smsagent.blog/blog-posts/" target="_blank">SMSAgent</a> for PowerShell WPF tips</p>
</li>
</ul>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Enable Defender Firewall event forwarding to MDE</title>
      <link>https://write-verbose.com/2023/02/02/Firewallmde/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/02/02/Firewallmde/</guid>
      <description>A reminder that Firewall Events are not available in MDE Advanced Hunting by default</description>
      <content:encoded><![CDATA[<p>You may notice that Windows Firewall events are not available in Defender for Endpoint Advanced Hunting. This is a quick post on the steps required to enable Firewall audit events.</p>
<p><a href="https://medium.com/@olafhartong" target="_blank">Olaf Hartong&amp;rsquo;s excellent series on MDE Internals</a> highlights that some MDE telemetry is based on Kernel call-backs or drivers, making those areas independent of client audit policy and enabled by default.</p>
<p>Other settings, however, do rely on ETW providers and therefore on the MDE client&rsquo;s security audit policy. Firewall audit events will only be available in MDE if the relevant audit subcategory is enabled.</p>
<h2 id="enable-client-side-firewall-auditing">Enable client-side Firewall auditing</h2>
<p>The following <em>auditpol</em> command will enable Windows Firewall client-side auditing and start sending the telemetry to MDE.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">auditpol /set /subcategory:<span class="s2">&#34;Filtering Platform Connection&#34;</span> /success:disable /failure:enable
</span></span></code></pre></div><p>It&rsquo;s fine to keep this enabled during day-to-day use as it will result in the following</p>
<ul>
<li>Blocked connections create an audit event in the Security Event Log</li>
<li>Allowed connections do not create an audit event</li>
<li><strong>A single audit event is created for each connection attempt</strong>, not each packet</li>
</ul>
<p>I don&rsquo;t recommend auditing Filtering Platform Connection <em>success</em> events as this will generate a lot of events. You may be tempted to also enable <em>Filtering Platform Packet Drop</em>, but this would also generate a high volume.</p>
<h2 id="intune">Intune</h2>
<p>You could of-course use Intune to apply the same setting to an enrolled Windows client. Create a <em>Device Configuration Profile</em> based on the <strong>Settings Catalog</strong>. Enter <em>Filtering</em> in the settings search and enable <em>Success</em> auditing for <strong>Object Access Audit Filtering Platform Connection</strong></p>
<h2 id="advanced-hunting-query">Advanced Hunting Query</h2>
<p>You can view the Firewall events in MDE Avanced Hunting as follows:</p>
<pre tabindex="0"><code class="language-KQL" data-lang="KQL">DeviceEvents
| where Timestamp &gt; ago(1d)
| where ActionType startswith &#34;Firewall&#34;
</code></pre><p>EXAMPLE RESULT:</p>
<table>
<thead>
<tr>
<th>Timestamp</th>
<th>ComputerName</th>
<th>ActionType</th>
<th>IPAddress</th>
<th>RemoteIPCountry</th>
<th>RemoteIPAddr</th>
<th>RemotePort</th>
<th>Protocol</th>
<th>Direction</th>
<th>NetworkProfile</th>
<th>InterfaceType</th>
<th>RuleId</th>
<th>RuleName</th>
<th>Action</th>
<th>Application</th>
<th>Service</th>
<th>User</th>
<th>InitiatingProcess</th>
<th>InitiatingProcessPath</th>
<th>InitiatingProcessCommandLine</th>
</tr>
</thead>
<tbody>
<tr>
<td>2023-02-02T10:30:12.000Z</td>
<td>DESKTOP01</td>
<td>Firewall</td>
<td>192.168.1.100</td>
<td>United States</td>
<td>54.239.29.192</td>
<td>443</td>
<td>TCP</td>
<td>Outbound</td>
<td>Domain</td>
<td>Wi-Fi</td>
<td></td>
<td></td>
<td>Allowed</td>
<td>Chrome.exe</td>
<td></td>
<td>User1</td>
<td>chrome.exe</td>
<td>C:\Program Files (x86)\Google\Chrome\chrome.exe</td>
<td></td>
</tr>
<tr>
<td>2023-02-02T09:01:30.000Z</td>
<td>DESKTOP02</td>
<td>Firewall</td>
<td>192.168.1.200</td>
<td>United States</td>
<td>91.189.91.26</td>
<td>53</td>
<td>UDP</td>
<td>Outbound</td>
<td>Public</td>
<td>Ethernet</td>
<td></td>
<td></td>
<td>Blocked</td>
<td>svchost.exe</td>
<td>DNS</td>
<td>User2</td>
<td>svchost.exe</td>
<td>C:\Windows\System32\svchost.exe</td>
<td></td>
</tr>
<tr>
<td>2023-02-02T08:45:55.000Z</td>
<td>DESKTOP03</td>
<td>Firewall</td>
<td>192.168.1.150</td>
<td>Canada</td>
<td>185.104.10.98</td>
<td>80</td>
<td>TCP</td>
<td>Inbound</td>
<td>Private</td>
<td>Wi-Fi</td>
<td></td>
<td></td>
<td>Blocked</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="example-event-in-windows-security-log">Example Event in Windows Security Log</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Log Name: Security
</span></span><span class="line"><span class="cl">Source: Microsoft Windows Security Auditing
</span></span><span class="line"><span class="cl">Date: 5/2/2023 10:31:12 AM
</span></span><span class="line"><span class="cl">Event ID: <span class="m">5444</span>
</span></span><span class="line"><span class="cl">Task Category: Filtering Platform Connection
</span></span><span class="line"><span class="cl">Level: Information
</span></span><span class="line"><span class="cl">Keywords: Audit Failure
</span></span><span class="line"><span class="cl">User: N/A
</span></span><span class="line"><span class="cl">Computer: MyComputer
</span></span><span class="line"><span class="cl">Description:
</span></span><span class="line"><span class="cl">A network connection request was blocked.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Subject:
</span></span><span class="line"><span class="cl">Security ID: S-1-5-18
</span></span><span class="line"><span class="cl">Account Name: MyComputer$
</span></span><span class="line"><span class="cl">Account Domain: MYDOMAIN
</span></span><span class="line"><span class="cl">Logon ID: 0x3E7
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Network Information:
</span></span><span class="line"><span class="cl">Direction: Inbound
</span></span><span class="line"><span class="cl">Source Address: 192.168.1.100
</span></span><span class="line"><span class="cl">Source Port: <span class="m">54321</span>
</span></span><span class="line"><span class="cl">Destination Address: 192.168.1.200
</span></span><span class="line"><span class="cl">Destination Port: <span class="m">80</span>
</span></span><span class="line"><span class="cl">Protocol: TCP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Filter Information:
</span></span><span class="line"><span class="cl">Filter Run-Time ID: <span class="m">157314</span>
</span></span><span class="line"><span class="cl">Layer Name: Transport
</span></span><span class="line"><span class="cl">Layer Run-Time ID: <span class="m">13</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Additional Information:
</span></span><span class="line"><span class="cl">Reason: The rule does not match the traffic.
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Migrate home drives to OneDrive with Microsoft Migration Manager - Pt2</title>
      <link>https://write-verbose.com/2022/06/11/migration-manager-notes2/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2022/06/11/migration-manager-notes2/</guid>
      <description>More things I learned migrating home drives to OneDrive with Migration Manager</description>
      <content:encoded><![CDATA[<p>Part two of &ldquo;Notes from the Field&rdquo; for a home drive to OneDrive for Business migration, looking at network routing, multi-geo considerations and scheduling issues.</p>
<h2 id="be-aware-of-network-routing">BE AWARE OF NETWORK ROUTING</h2>
<p>Although the migration tool uses a source UNC path and destination OneDrive URL, files are actually uploaded to Azure blobs before being transferred to OneDrive<br>
e.g. *.blob.core.windows.net</p>
<p>There is a list of <a href="https://learn.microsoft.com/en-us/sharepointmigration/mm-prerequisites" target="_blank">required endpoints</a>, and it&rsquo;s important to determine if the migration traffic will route out through the enterprise proxy servers, or go direct e.g. through an ExpressRoute link. This routing will be specific to your network setup.</p>
<h3 id="use-agent-groups-in-an-enterprise-network">Use &ldquo;Agent Groups&rdquo; in an enterprise network</h3>
<blockquote>
<p>Agent Groups are a logical grouping within Migration Manager, allowing each migration to use a specific agent or agent(s)</p>
</blockquote>
<p>Carefully consider the network location of each on-prem migration agent, to optimises the traffic flow and minimise bandwidth impact. The two key considerations are:</p>
<ul>
<li>proximity to the home drive file server</li>
<li>proximity to the Azure/Internet egress link.</li>
</ul>
<p>Assign each agent to an Agent Group based on its location. Use the Agent Group option when scheduling a migration to control which agent is used for a specific migration batch.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">SPO Admin Portal <span class="p">&gt;</span> Migration <span class="p">&gt;</span> File Shares <span class="p">&gt;</span> Agents <span class="p">&gt;</span> Select an Agent <span class="p">&gt;</span> Edit <span class="p">&gt;</span> Agent Group
</span></span></code></pre></div><h3 id="scanning-always-uses-the-default-agent-group">Scanning always uses the Default agent group</h3>
<p>Scanning is a pre-migration activity used to identify home drive data issues such as &lsquo;path too long&rsquo;.<br>
While migration tasks can use agent groups, scanning tasks cannot. Scanning automatically uses the Default Agent group.<br>
If the default group has no agents the scanning task will just wait indefinitely for an agent to be added back to the Default group.</p>
<h3 id="group-migration-batches-by-location">Group migration batches by location</h3>
<p>When you use the bulk migration option, the portal imports a CSV file and assigns all entries to the same Migration Agent.
If you are carrying out migrations in multiple locations, you need to group them by location and split into separate CSV files to make efficient use of the network..</p>
<h3 id="run-satelite-geo-migrations-separately">Run Satelite-geo migrations separately</h3>
<p>If you are in a multi-geo tenant, don&rsquo;t mix geolocations in the same migration batch. Migration to a satellite geo needs a modified process with dedicated or modified agent config.</p>
<p>If you are signed into the SharePoint Online Admin portal &ldquo;central geo&rdquo;, switch to the relevant &ldquo;satellite geo&rdquo; using the link in the top left. The go to  Migrations &gt; File Shares. Initially there will be no agents listed.</p>
<p>Run the agentsetup.exe on the migration server and pause on the first screen of the setup wizard. If the agent is already installed, re-run setup to modify the configuration.</p>
<p>With the setup wizard open, edit the following file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="nv">%temp%</span>\SPMigrationAgentSetup\SPMigrationAgentSetup\Microsoft.SharePoint.Migration.ClientShared.dll.config
</span></span></code></pre></div><p>Under AppSettings, add the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="p">&lt;</span>add key=GeoLocation value=<span class="s2">&#34;FRA&#34;</span> /&gt;
</span></span></code></pre></div><p>The value must be a <a href="https://learn.microsoft.com/en-us/microsoft-365/enterprise/microsoft-365-multi-geo?view=o365-worldwide#microsoft-365-multi-geo-availability" target="_blank">valid Azure tenant location code</a> that is already enabled in your tenant.</p>
<p>Save the file and continue the setup wizard. The Migration Manager agent will register in the satellite geo and be visible in the SPO Admin Portal for the relevant Geolocation.</p>
<h2 id="timezone-headaches">TIMEZONE HEADACHES</h2>
<p>Migration tasks can either start immediately or at a specified time. However, the time used in the Migration Manager portal is the time zone tenant home location, not the local time of the administrator accessing the portal.<br>
To schedule a migration outside business hours, the administrator must take account of the local time where the agent is based and convert it to the tenant home time zone.</p>
<p>Scanning tasks don&rsquo;t have a scheduling option. They just start immediately, although they use a lot less bandwidth.</p>
<h2 id="false-positive-scan-warnings">FALSE POSITIVE SCAN WARNINGS</h2>
<p>Temporary MS Office files create false positive warnings in the scanning tab and scan reports. There is no way to ignore the false positives.</p>
<p>The purpose of home drive scanning is to highlight problems such as incompatible file names and long paths. However, it is hard to filter out unimportant issues:</p>
<ol>
<li>
<p>Numerous files beginning with tilde are flagged as warnings in every report - e.g. &ldquo;~budget 2020.xlsx&rdquo;. These temporary files created by MS Office are often not cleaned-up when a document is closed, but it is safe to skip them during migration.</p>
</li>
<li>
<p>If folder redirection to the home drive is enabled, the scan will flag a warning on every instance of desktop.ini. Again these warnings can be safely ignored as the files are recreated by Windows if needed.</p>
</li>
</ol>
<p>This isn&rsquo;t to say that the pre-migration scan is a waste of time. It does have some benefits:</p>
<ul>
<li>
<p>confirms the Migration Manager service account has access to the home drive</p>
</li>
<li>
<p>provides statistics such as overall home drive size and number of files</p>
</li>
<li>
<p>highlights long path issues</p>
</li>
</ul>
<h2 id="complex-migration-scheduling">COMPLEX MIGRATION SCHEDULING</h2>
<p>There is nothing in Migration Manager help with user scheduling. Scheduling is required because there is some user impact:</p>
<ul>
<li>User communciation should explain what is changing and link to more information (FAQs, OneDrive training material etc)</li>
<li>Ideally users log off prior to the data copy to prevent issues with files locked in-use</li>
<li>Remote users may need to use PLAP VPN to ensure the home drive mapping is removed at next logon</li>
<li>Post-migration support may be required to help users with the changes (removal of home drive and new data location)</li>
</ul>
<p>If your IT department does not have any scheduling software, you will most likely end-up using spredasheets.</p>
<h2 id="juggling-csv-files">JUGGLING CSV FILES</h2>
<p>An enterprise will need to use the &ldquo;bulk migration&rdquo; option in Migration Manager to migrate large numbers of home drives at a time. This option uses a CSV import to specify source UNC paths and target OneDrive URLs. The CSV must be a set format and a template can be downloaded for this purpose.</p>
<p>The pre-migration file share scan step also uses a CSV file, but unfortuately it uses different fields and headers.</p>
<p>The additional migration steps are likely to also be driven from a list such as a CSV file e.g.</p>
<ul>
<li>Pre-provisioning OneDrives that don&rsquo;t already exist</li>
<li>Removing Active Directory user homeDirectory and homeDrive</li>
<li>Updating folder redirection policies</li>
<li>Updating home drive ACLs or file shares to prevent post-migration access</li>
</ul>
<p>With multiple CSV files in-play and last minute changes to schedules, user scheduling can be complex in its own right.</p>
<h2 id="summary">SUMMARY</h2>
<p>Microsoft Migration Manager is a free but basic migration tool. By the time you have discovered its limitations, you may wish you had paid for an ISV product instead.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Migrate home drives to OneDrive with Microsoft Migration Manager - Pt1</title>
      <link>https://write-verbose.com/2022/06/04/migration-manager-notes1/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2022/06/04/migration-manager-notes1/</guid>
      <description>Things I learned migrating home drives to OneDrive with Migration Manager.</description>
      <content:encoded><![CDATA[<p>Part one of &ldquo;Notes from the Field&rdquo; for a home drive to OneDrive for Business migration using Microsoft Migration Manager, covering migration tool considerations, architecture and access requirements.</p>
<h2 id="tool-selection">TOOL SELECTION</h2>
<p>Migration Manager comes from the Microsoft purchase of <a href="https://mover.io/index.html" target="_blank">Mover.io</a> in 2019. It is presented as an Enterprise migration tool that puts more structure around the migration process than the more basic SharePoint Migration Tool. However, be prepared for limited configuration and customisation options. As a basic guide consider the following tool choices for file share migration:</p>
<ul>
<li>SharePoint Migration Tool : Ad hoc data migrations</li>
<li>Migration Manager : Large scale migrations using repetitive process</li>
<li>3rd Party Tool : When you need a lot of control or have a complex process</li>
</ul>
<h2 id="what-are-complex-requirements">WHAT ARE COMPLEX REQUIREMENTS?</h2>
<p>Migration Manager focuses on the data migration, but for most companies, this is only part of the story. Consider the following:</p>
<ul>
<li>How to move off folder redirection and offline files</li>
<li>Removing the home drive mapping</li>
<li>Cleaning-up or restricting access to home drives</li>
</ul>
<p>A 3rd-party tool, could be more suitable if you are looking to automate as much of the process as possible.For example, <a href="https://sharegate.com/blog/easier-onedrive-for-business-migration" target="_blank">ShareGate Migration Tool</a> provides a PowerShell interface.</p>
<p>Migration Manager is still attractive as it&rsquo;s effectively free as part of an enterprise M365 license.</p>
<h2 id="architecture">ARCHITECTURE</h2>
<p>Migration Manager consists of the following components:</p>
<h3 id="agents">Agents</h3>
<p>Migration Manager agents run on-premises and perform the data migration, reading data from home drives and copying it to OneDrive for Business.<br>
The agent can be installed directly on a file server (assuming it is a Windows Server), but the recommended deployment is on a dedicated server.</p>
<p>The agent sends heartbeat information to the SharePoint Online (SPO) Admin Portal and downloads scanning and migration tasks in return.</p>
<h3 id="sharepoint-online-admin-portal">SharePoint Online Admin Portal</h3>
<p>The SPO Admin Portal is used to manage the agents and assign migration tasks to them. The &ldquo;Migration&rdquo; blade has tabs for scanning, agents and migrations.</p>
<h3 id="file-shares">File shares</h3>
<p>File shares are host the data being migrated. The migration agent service account needs read access to the data and acceses it over SMB.</p>
<h3 id="proxy-server">Proxy server</h3>
<p>The migration agent communicates with an SPO Admin portal endpoint and the Azure blob service over HTTPs. If the company does not have an Express Route, traffic is likely to go through an enterprise proxy server.</p>
<h2 id="a-lot-of-elevated-access">A LOT OF ELEVATED ACCESS</h2>
<blockquote>
<p>If you work with strict security controls, be prepared for Migraton Manager&rsquo;s privileged access requirements:</p>
</blockquote>
<table>
<thead>
<tr>
<th>Account</th>
<th>Permission</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cloud service account</td>
<td>SharePoint Administrator</td>
<td>Agent communication with SPO Admin portal</td>
</tr>
<tr>
<td>Cloud service account</td>
<td>OD4B Site Collection Admin</td>
<td>Agent write access to OneDrives</td>
</tr>
<tr>
<td>On-prem service account</td>
<td>Read Access to Home Drives</td>
<td>Agent read access to home drives</td>
</tr>
<tr>
<td>I.T. admin account</td>
<td>SharePoint Administrator</td>
<td>Scheduling scans and migrations in the SPO Admin portal</td>
</tr>
</tbody>
</table>
<h3 id="why-sharepoint-administrator">Why SharePoint Administrator?</h3>
<p>Under the hood, OneDrive for Business is a personal SharePoint site and from an administrative perspective, Microsoft has done very little to separate OneDrive for Business from SharePoint Online.</p>
<p>There is no OneDrive-specific RBAC. To manage OD4B, you need to be a SharePoint Administrator, and Migration Manager is operated through a blade in the SharePoint Online Admin Console.
The technicians managing and monitoring the data migrations will need the SharePoint Administrator role and so will the Service Account used by the migration agent.</p>
<h3 id="sharepoint-administrator-role-is-not-enough">SharePoint Administrator role is not enough</h3>
<blockquote>
<p>A SharePoint Administrator cannot copy data to OneDrive by default, but they can grant themselves the additional rights needed</p>
</blockquote>
<p>By default, only the owner (user) has access to OneDrive for Business. One option is to define a OD4B Secondary Admin group at the tenant level, but this will only apply to new OneDrives as they are provisioned.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">SPO Admin Portal <span class="p">&gt;</span> Advanced <span class="p">&gt;</span> More Features <span class="p">&gt;</span> Setup My Sites <span class="p">&gt;</span> Secondary Owner
</span></span></code></pre></div><p>For already provisioned OneDrives, use a script to grant the <em>SiteCollectionAdmin</em> permission on each OneDrive to a group containing the Migration Manager cloud service account.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Connect-SPOService</span> <span class="n">-URL</span> <span class="nv">$AdminURL</span>
</span></span><span class="line"><span class="cl"><span class="nb">Set-SPOUser</span> <span class="n">-Site</span> <span class="nv">$UsersOneDriveURL</span> <span class="n">-LoginName</span> <span class="nv">$CloudServiceAccountorGroup</span> <span class="n">-IsSiteCollectionAdmin</span> <span class="vm">$True</span>
</span></span></code></pre></div><p><strong>NOTE</strong>: This command normally expects a user account as the LoginName. If using a group name, it must be in <a href="https://social.technet.microsoft.com/wiki/contents/articles/13921.sharepoint-20102013-claims-encoding.aspx" target="_blank">claims encoded</a> format.</p>
<p>Part two in this series will look at network routing, multi-geo considerations and scheduling issues.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GIT edge cases</title>
      <link>https://write-verbose.com/2021/07/04/gitedgecases/</link>
      <pubDate>Sun, 04 Jul 2021 14:27:50 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/07/04/gitedgecases/</guid>
      <description>A post about some of the less used commands in GIT.</description>
      <content:encoded><![CDATA[<p>Most of the time in GIT we are working at the file level.  It is possible to get more granualar and work with <em>hunks</em> which are parts of a file e.g. a number of lines.</p>
<h2 id="using-hunks">Using Hunks</h2>
<p>The <code>--patch</code> option of the <code>git add</code> command causes GIT to automatically split an updated file into hunks.  It then prompts for each hunk and the contributor can decide whether to stage some or all of the hunks.<br>
GIT actually enters a menu system that allows granular control, such as splitting the hunk into smaller units. After adding some hunks but not all to the index, <code>git status</code> shows the same file is ready to be committed and also not yet staged for commit.</p>
<p>There are many commands that can work at the hunk level, including:</p>
<ul>
<li>git checkout</li>
<li>git stash</li>
<li>git reset</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;git add --patch file.txt <span class="c1"># This command </span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>1/1<span class="o">)</span> Stage this hunk <span class="o">[</span>y,n,q,a,d,s,e,?<span class="o">]</span> ?
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">y - stage this hunk
</span></span><span class="line"><span class="cl">n - <span class="k">do</span> not stage this hunk
</span></span><span class="line"><span class="cl">q - quit
</span></span><span class="line"><span class="cl">a - stage this hunk
</span></span><span class="line"><span class="cl">d - <span class="k">do</span> not stage this hunk or an of the later hunks in the file
</span></span><span class="line"><span class="cl">s - split the current hunk into smaller hunks
</span></span><span class="line"><span class="cl">e - manually edit the current hunk
</span></span><span class="line"><span class="cl">? - print <span class="nb">help</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git status <span class="c1"># After adding some hunks but not all, the status shows the same file is ready to be committed and also not yet staged for commit</span>
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">   modified:  file.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">   modified:   file.txt
</span></span></code></pre></div><h2 id="many-ways-to-reference-a-commit">Many ways to reference a commit</h2>
<p>The <code>git show</code> command provides information about a commit.  The most common way to reference a commit is using its hash (or partial hash), but there are also other ways:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git show 8d4112 <span class="c1">#  use the partial hash to refer to the commit</span>
</span></span><span class="line"><span class="cl">commit 8d411239358d55f45747c401c5c2c3fba8652d71
</span></span><span class="line"><span class="cl">Author: Geoff Dixon &lt;dixon@mail.home&gt;
</span></span><span class="line"><span class="cl">Date:   Mon Jun <span class="m">7</span> 17:44:03 +100
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">&gt; 
</span></span><span class="line"><span class="cl">&gt; git show HEAD <span class="c1"># show information about the latest commit</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git show HEAD^ <span class="c1"># show the parent commit of HEAD</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git show HEAD^^ <span class="c1"># show the second parent of HEAD</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git show HEAD~2 <span class="c1"># show the 2nd commit before HEAD (same as above)</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git show HEAD@<span class="o">{</span><span class="s2">&#34;1 week ago&#34;</span><span class="o">}</span> <span class="c1"># show head 1 week ago</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GitHub - Contribute to a repo using Fork, Clone, Push and Pull Requests</title>
      <link>https://write-verbose.com/2021/06/30/github/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/06/30/github/</guid>
      <description>GitHub - Using Fork, Clone, Push and Pull Requests</description>
      <content:encoded><![CDATA[<p>GitHub hosts open source projects that have multiple contributors. Only a few maintainers have read-write access to the repository, so how do people contribute suggested changes?</p>
<p>The answer is by copying the repo to their own GitHub account, making changes and submitting a <em>pull request</em> to the maintainers of the original project. This post explains the steps.</p>
<h2 id="contributing-on-github">CONTRIBUTING ON GitHub</h2>
<h3 id="forking-a-repo">Forking a repo</h3>
<p>A fork is a clone of the repo on the same hosting provider site (i.e. GitHub). You can view all the forks from the repo home page by clicking on <em>Insights &gt; Forks</em></p>
<p>As an example of how forks are used, the <a href="https://github.com/gohugoio/hugo" target="_blank">Hugo repository on GitHub</a> contains code for a static website generator.  The maintainers of the project have write access and can push changes, but other GitHub users have read access.</p>
<p>Any GitHub contributor can suggest changes by first forking the repo into their own GitHub account. The <em>Fork</em> button at the top-right of the  home page clones the Hugo repo to a copy that appears under the contributors GitHub account. The contributor now has write access to the forked copy, but it isn&rsquo;t that convenient to work directly on GitHub. They need to clone the fork to a GIT repo on their development workstation.</p>
<h3 id="cloning-a-fork">Cloning a fork</h3>
<p>The contributor clones the forked repo to a local GIT repo using <code>git clone &lt;SSH or HTTP address of fork repo&gt;</code>. By default, this clone will track a single remote repo called <em>origin</em> (the fork) that will aceept pushed updates. But how does the local repo keep track of the primary Hugo repo, and how are contributor changes pushed to the original source?</p>
<h3 id="adding-a-second-remote">Adding a second remote</h3>
<p>While the contributor is working on their local changes, the original Hugo repo on GitHub is also getting updates from other contributors. Any conflicts need to be resolved locally rather than expecting the maintainers of the repo to deal with them. So how does the contributor stay up-to-date while working locally on their changes?</p>
<p>The local workstation repo already has a remote (<em>origin</em>, the forked repo on GitHub). Adding the original Hugo repo as a second remote allows the local repo to pull chages from other contributors. This second remote is usually called <em>upstream</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git remote -v <span class="c1"># show current remote repos</span>
</span></span><span class="line"><span class="cl">origin  https://github.com/myaccount/myfork.git <span class="o">(</span>fetch<span class="o">)</span>
</span></span><span class="line"><span class="cl">origin  https://github.com/myaccount/myfork.git <span class="o">(</span>push<span class="o">)</span>
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git remote add upstream https://github.com/sourcerepo/sourceproject.git <span class="c1"># Add a second remote pointing to upstream</span>
</span></span></code></pre></div><h3 id="how-to-push-changes-to-upstream">How to push changes to upstream</h3>
<p>The final piece of the puzzle, is how to get the contributor&rsquo;s changes into the upstream repo without having write access.</p>
<p>GIT itself doesn&rsquo;t offer a solution to this, but GitHub does hence it&rsquo;s popularity for open source projects.<br>
First the contributor pushes their local repo changes to the GitHub fork (origin) using standard GIT commands. Next the contributor creates a <em>pull request</em> asking the maintainers of the <em>upstream</em> source repo to pull changes from the fork.  The pull request is a messaging system that describes the changes and enables differencing checks.</p>
<p>The maintainers of the upstream repo can review and comment on the changes, possibly asking for changes before pulling and merging them into the original repo.</p>
<h2 id="using-git-diff-and-blame">Using GIT Diff and Blame</h2>
<p>DIFF and BLAME are useful when reviewing a pull request or the project history.</p>
<p><code>git blame</code> shows the file history on a line-by-line basis.<br>
For each line, it displays the last commit where a line was changed, who made the change and when.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git blame .<span class="se">\i</span>ndex.md
</span></span><span class="line"><span class="cl">cf6ff2bb <span class="o">(</span>GD 2021-05-05 22:09:05 +0100   1<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">cf6ff2bb <span class="o">(</span>GD 2021-05-05 22:09:05 +0100   2<span class="o">)</span> author: GD
</span></span><span class="line"><span class="cl">cf6ff2bb <span class="o">(</span>GD 2021-05-05 22:09:05 +0100   3<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">cc0e10d2 <span class="o">(</span>GD 2021-05-11 15:55:25 +0100   4<span class="o">)</span> **This is the first post in a series on creating a graph database CMDB.**
</span></span><span class="line"><span class="cl">cf6ff2bb <span class="o">(</span>GD 2021-05-05 22:09:05 +0100   5<span class="o">)</span>
</span></span><span class="line"><span class="cl">7c78446d <span class="o">(</span>GD 2021-05-24 19:50:01 +0100   6<span class="o">)</span> Part 1: This article
</span></span><span class="line"><span class="cl">7c78446d <span class="o">(</span>GD 2021-06-24 21:03:19 +0100   7<span class="o">)</span> Part 2: How to <span class="nb">export</span> computer information from Microsoft Active Directory using PowerShell, <span class="k">for</span> use in a Neo4j CMDB
</span></span></code></pre></div><p><code>git diff</code> shows the differences between commits or between the git areas (working directory, index, repo). For example, to show the differene between the current commit and back two commits:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git diff HEAD HEAD~2 <span class="c1"># show the difference between the current position of HEAD and 2 commits before HEAD</span>
</span></span><span class="line"><span class="cl">diff --git a/content/blog/gitnotes/index.md b/content/blog/gitnotes/index.md
</span></span><span class="line"><span class="cl">index 10fa938..cc16e9f <span class="m">100644</span>
</span></span><span class="line"><span class="cl">--- a/content/blog/gitnotes/index.md  
</span></span><span class="line"><span class="cl">+++ b/content/blog/gitnotes/index.md
</span></span><span class="line"><span class="cl">@@ -14,48 +14,31 @@ 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-The version control system GIT can seem complex, but an understanding of the internal working can <span class="nb">help</span> with day-to-day use and is essential to get yourself out of an unexpected state. This article covers the basics of how git works, exploring the files in the object database and laying a foundation <span class="k">for</span> you to explore futher on your own.
</span></span><span class="line"><span class="cl">+An understanding of git internals helps with day-to-day use and is essential <span class="k">if</span> you need to get yourself out of an unexpected state. This article covers the basics of how git works, allowing you to explore further on your own.
</span></span></code></pre></div><p>The first line shows the diff command <code>diff --git...</code><br>
The next line is git metadata that isn&rsquo;t normally needed <code>index 10fa938..cc16e9f 100644</code><br>
The next two lines show assign symbols to the two versions of the index.md file i.e changes from HEAD are marked with &ldquo;&mdash;&rdquo; and tchanges from HEAD~2 are marked with &ldquo;+++&rdquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--- a/content/blog/gitnotes/index.md  
</span></span><span class="line"><span class="cl">+++ b/content/blog/gitnotes/index.md
</span></span></code></pre></div><p>The next line represents the header of a hunk (portion) of the file showing the lines that have been modified. In this case, 48 lines were removed at line 14 and 31 lines added at line 14. Realistically, when lines are removed and added at the same location it is a modification of the lines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">@@ -14,48 +14,31 @@
</span></span></code></pre></div><p>Finally, the actual lines that are removed and added are displayed. The &ldquo;-&rdquo; at the start of the line means it was removed. The &ldquo;+&rdquo; at the start of the line means it was added. The line was actually edited to change some of the words.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">-The version control system GIT can seem complex...
</span></span><span class="line"><span class="cl">+An understanding of git internals helps...
</span></span></code></pre></div><p>Another way to view the differences is using the <code>--color-words</code> option. This shows the changes in-line using red for removed and green for added i.e.</p>
<p><code>git diff --color-words HEAD HEAD~2</code></p>
<h3 id="what-else-can-you-compare-with-git-diff">What else can you compare with GIT DIFF?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git diff <span class="c1"># show uncommited changes since the last commit</span>
</span></span><span class="line"><span class="cl">&gt; 
</span></span><span class="line"><span class="cl">&gt; git diff --cached <span class="c1"># compare the repo HEAD to the index</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git diff feature1 main <span class="c1"># compare two branches</span>
</span></span></code></pre></div><h3 id="how-to-see-a-diff-of-every-commit">How to see a diff of every commit</h3>
<p>The <code>git log</code> command has an option to diff every commit. This obviously produces a lot of output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git log --patch
</span></span></code></pre></div><h3 id="how-to-compare-the-list-of-commits-between-two-branches">How to compare the list of commits between two branches</h3>
<p>Rather than looking at the changes in the commits. You will sometimes want to just look at the history of commits and understand which are only in one branch compared to another. <code>git log</code> can also help here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git log feature1..main --oneline <span class="c1"># Compare the feature1 branch to main showing the commits only in main</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GIT branches - merging, rebasing and squashing commits</title>
      <link>https://write-verbose.com/2021/06/27/usinggit/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/06/27/usinggit/</guid>
      <description>GIT commands that affect branches and history, focussing on merge, squashing commits and rebasing.</description>
      <content:encoded><![CDATA[<p>This article focuses on common GIT actions that affect branches, such as merging, rebasing branches and squashing local commits.</p>
<h2 id="merge">MERGE</h2>
<p>Merging brings changes from one branch into another. A feature branch is often created to work on a particular update. When complete, the branch needs to be merged back into &ldquo;main&rdquo;. The process would be as follows:</p>
<p>First switch to the main branch using either <code>git switch main</code> or <code>git checkout main</code>.<br>
Next merge the featureA branch into main using <code>git merge featureA</code>.</p>
<p>GIT will create a new commit with the merged changes. This is a special commit as it has two parents - the previous commit on main and the previous commit on the featureA branch. The main branch is updated to point to this new commit and HEAD continues to point to main. FeatureA still points to the last commit on that branch.</p>
<h2 id="conflicts">CONFLICTS</h2>
<p>If a conflict is detected during a merge, GIT will interupt the process and prompt for user action<br>
GIT will be in a special state where it expects the conflict to be resolved before continuing.<br>
<code>git status</code> at this point shows the message &ldquo;you have unmerged paths&hellip;fix conflicts and run <code>git commit</code>&hellip;use <code>git merge --abort</code> to abort the merge&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">You have unmerged paths.
</span></span><span class="line"><span class="cl">  <span class="o">(</span>fix conflicts and run <span class="s2">&#34;git commit&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Unmerged paths:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to mark resolution<span class="o">)</span>
</span></span><span class="line"><span class="cl">        both modified:   consolidate.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>GIT will display the files that have conflicts.  The problem can be resolved at the command line, but a graphical diff tool such as <a href="https://www.perforce.com/products/helix-core-apps/merge-diff-tool-p4merge" target="_blank">p4merge</a> may be better.</p>
<p>If you open the files in a basic text editor you will see GIT has marked the conflicts.<br>
In the example below, the file &ldquo;consolidate.py&rdquo; is in conflict. GIT has updated the file with markers showing the lines that need attendtion. The HEAD section shows the lines as they appear in the current branch (main).  Then there is a section break and directly below are the same lines as they appear in the <em>featureA</em> branch.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">import sys
</span></span><span class="line"><span class="cl"><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
</span></span><span class="line"><span class="cl"><span class="nv">name</span><span class="o">=</span><span class="nb">read</span> <span class="s2">&#34;Enter your name&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">age</span><span class="o">=</span><span class="nb">read</span> <span class="s2">&#34;Enter your age&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">=======</span>
</span></span><span class="line"><span class="cl"><span class="nb">read</span> <span class="s2">&#34;Please enter your name&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">read</span> <span class="s2">&#34;Enter your age&#34;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt;&gt;&gt;&gt;&gt; featureA
</span></span></code></pre></div><p>To resolve the conflict, manually edit the file so it reflects the desired state and remove the markers and section break.<br>
Save the file,  add it to the GIT index, then commit the change to complete the merge, as shown below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git add consolidate.py
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git commit
</span></span><span class="line"><span class="cl"><span class="o">[</span>main 1aca0e1<span class="o">]</span> Introduce featureA that enables user input
</span></span></code></pre></div><p>In summary:</p>
<ol>
<li>Switch to the branch you are merging into (e.g. <code>git switch main</code>)</li>
<li>Merge the required branch into the current branch (i.e. <code>git merge feature1</code>)</li>
<li>Fix any conflict by editing the file</li>
<li>Add the updated file to the index (<code>git add &lt;file&gt;</code>)</li>
<li>Commit to complete the merge (<code>git commit</code>)</li>
</ol>
<h2 id="fast-forward-merge">FAST FORWARD MERGE</h2>
<p>A fast forward merge occurs automatically when git moves a branch without having to create a new commit. It just re-uses an existing commit.<br>
The most common case is when you want to merge a feature branch into main, but then continue working on the Feature branch with the latest updates from main.<br>
When you first merge the branch into main, GIT creates a new commit on main that has two parents - the previous commit on main and the previous commit on the branch.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git switch main
</span></span><span class="line"><span class="cl">❯ git merge featureA
</span></span></code></pre></div><p>The status is now:</p>
<ul>
<li>main branch: contains the latest changes and any conflict resolutions</li>
<li>featureA branch: contains the working feature before the merge into main</li>
</ul>
<p>To continue developing on featureA, you need to merge main back into the featureA branch so it has the latest updates</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git switch featureA
</span></span><span class="line"><span class="cl">❯ git merge main
</span></span></code></pre></div><p>At this point, GIT realises that there is already a commit that has the merged contents of featureA and main, so it just re-uses this commit.  The merge message shows it performed a &ldquo;fast-forward merge&rdquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git merge main
</span></span><span class="line"><span class="cl">Updating 68a874e..1aca0e1
</span></span><span class="line"><span class="cl">Fast-forward
</span></span><span class="line"><span class="cl"> consolidate.py <span class="p">|</span> <span class="m">6</span> +++---
</span></span><span class="line"><span class="cl"> orders.py      <span class="p">|</span> <span class="m">4</span> ++++
</span></span><span class="line"><span class="cl"> <span class="m">2</span> files changed, <span class="m">7</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">3</span> deletions<span class="o">(</span>-<span class="o">)</span>
</span></span></code></pre></div><h2 id="detached-head">DETACHED HEAD</h2>
<p>HEAD is a reference to a branch or a commit. Normally HEAD points to the current branch and thereby indirectly to the latest commit on that branch.  <em>Detached head</em> is a state where the HEAD is not referencing a branch, it is pointing to an older commit.</p>
<p>Why would this happen?  Perhaps you want to do some experimentation without creating a branch.  You would checkout a commit rather than creating a branch.  At this point HEAD is no longer tracking a branch and so it is detached. It acts like a temporary branch. After making some commits, you could do one of the following:</p>
<p>a) Switch back to a branch<br>
b) Put a branch on the current commit</p>
<p>If you switch back to a branch, any previous commits outside a branch are isolated in the object database and are not referenced by any branch. Eventually they will be removed by the GIT garbage collector.</p>
<p>Alternatively, <code>git branch &lt;branchname&gt;</code> can be used to put a branch on the current commit. At this point it is like any other branch and HEAD is no longer detached.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git checkout 460ce0e
</span></span><span class="line"><span class="cl">Note: switching to <span class="s1">&#39;460ce0e&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">You are in <span class="s1">&#39;detached HEAD&#39;</span> state. You can look around, make experimental
</span></span><span class="line"><span class="cl">changes and commit them, and you can discard any commits you make in this
</span></span><span class="line"><span class="cl">state without impacting any branches by switching back to a branch.
</span></span></code></pre></div><h2 id="rebase">REBASE</h2>
<p>Rebase is an alternative to a merge.  It changes the base of a branch, effectively adding it to the top of another branch as if the changes were sequential rather than created in parallel.</p>
<p>The rebase process looks at the first commit that is shared by two branches and uses the next commit as the base of the branch being rebased.  It detaches this branch and re-attaches it to the head of the other branch. Under the hood, the commits do not actually move, new commits are created that are copies of the original commits on the branch. GIT moves the branch and the original commits become orphaned and eventually garbage collected.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git switch featureA <span class="c1"># make featureA the current branch</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git rebase main <span class="c1"># rebase the featureA branch onto main</span>
</span></span></code></pre></div><h3 id="why-use-rebase">Why use Rebase?</h3>
<p>Rebase can help to simplify the history of a project. If there is a lot of merging it can complicate the history.<br>
Howver, use with caution. Rebased history is not the true history, so merging is safer.</p>
<h3 id="squashing-commits">Squashing commits</h3>
<p><em>Squashing</em> re-writes the GIT history, making two or more commits appear as if they were a single commit. Why would you want to do this?  Developers often commit very frequently when working locally on a feature, but don&rsquo;t want to complicate the shared history with all these individual commits.  Squashing commits before merging or pushing to an origin repo simplifies the history in a large project.</p>
<p>The interactive mode of <code>git rebase</code> is used to squash commits. This is totally different to the basic use of rebase. A starting point commit must be specified as we don&rsquo;t normally want to edit the entire history. The starting point is excluded from the list and the interactive mode starts from the next commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git rebase --interactive 80f137
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pick fd4d8d9 Updates Adsense css
</span></span><span class="line"><span class="cl">pick 8d41123 Adds adsense css
</span></span><span class="line"><span class="cl">pick 9b2aafa Adds article
</span></span><span class="line"><span class="cl">pick 32735fb Fixes error in  post
</span></span><span class="line"><span class="cl">pick 7f0063a Fixes typo
</span></span><span class="line"><span class="cl">pick c85a17f Adds article
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Rebase 55a0831..c85a17f onto 55a0831 (6 commands)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Commands:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># p, pick &lt;commit&gt; = use commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span>
</span></span><span class="line"><span class="cl"><span class="c1"># e, edit &lt;commit&gt; = use commit, but stop for amending</span>
</span></span><span class="line"><span class="cl"><span class="c1"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># f, fixup &lt;commit&gt; = like &#34;squash&#34;, but discard this commit&#39;s log message</span>
</span></span><span class="line"><span class="cl"><span class="c1"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span>
</span></span><span class="line"><span class="cl"><span class="c1"># b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># d, drop &lt;commit&gt; = remove commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># l, label &lt;label&gt; = label current HEAD with a name</span>
</span></span><span class="line"><span class="cl"><span class="c1"># t, reset &lt;label&gt; = reset HEAD to a label</span>
</span></span><span class="line"><span class="cl"><span class="c1"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># .       create a merge commit using the original merge commit&#39;s</span>
</span></span><span class="line"><span class="cl"><span class="c1"># .       message (or the oneline, if no original merge commit was</span>
</span></span><span class="line"><span class="cl"><span class="c1"># .       specified). Use -c &lt;commit&gt; to reword the commit message.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># These lines can be re-ordered; they are executed from top to bottom.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># However, if you remove everything, the rebase will be aborted.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span></code></pre></div><p>An interactive editor opens as shown above.  The commits are listed (in reverse order compared to most git commands). The editor gives the commands - such as pick, reword etc.</p>
<p>By default all commits are on a line that starts with &ldquo;pick&rdquo;. Editing these lines will modify the history.<br>
For example, you can move entire lines to change the order of commits.
Changing &ldquo;pick&rdquo; to &ldquo;squash&rdquo;  will cause the commit to be merged with the one above and GIT will prompt to select or edit one of the two commit messages.</p>
<h3 id="the-golden-rule-of-rebase">The golden rule of Rebase</h3>
<p>Rebasing can lead to problems when sharing a repo across a team. The purpose of the rebase is to simplify history, but it can lead to duplication in the GIT multi-master sharing model.  The golden rule is therefore:</p>
<blockquote>
<p>Never rebase shared commits. Only use rebase for commits that have not yet been shared.</p>
</blockquote>
<h2 id="ammending-a-commit">Ammending a commit</h2>
<p>If you want to update the latest commit to add additional files, add them to the index then use the <code>--ammend</code> option on <code>git commit</code>. This will create a new commit with the additional files and leave the previous commit as an orphan that will eventually get garbage collected. You can only use this option to update the latest commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git commit --ammend 
</span></span></code></pre></div><h2 id="tags">TAGS</h2>
<p>Tags are labels for a commit. Tags are normally used to mark releases.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git tag version1_0 -a -m <span class="s2">&#34;First version. Basic features&#34;</span> <span class="c1"># Create a new annotated tag</span>
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git tag version2_0 <span class="c1"># Create a lightweight tag (not annotated)</span>
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git tag <span class="c1"># get a list of tags</span>
</span></span></code></pre></div><p>Tags are rederences to a commit, but unlike branches, tags never move.</p>
<h2 id="clone">CLONE</h2>
<p><code>git clone</code> is used to copy an existing repository into an empty local folder. The copy contains the working files and the full GIT history.<br>
The existing repo can be local or remote. It can be referenced by an SSH or HTTP address. By default, it will clone the branch HEAD is pointing to, but this can be modified using the <code>-branch</code> option.</p>
<p>The command is mostly used to clone a repo from a hosting service such as Github - so it can be edited locally and then pushed back up to Github.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git clone https://github.com/myaccount/myrepo <span class="c1"># clone a repo from Github into the current local folder</span>
</span></span></code></pre></div><p>The source repo is registered as a &ldquo;remote&rdquo; called <em>origin</em> by default. <code>git status</code> will show if the local branch is ahead or behind the remote branch.</p>
<p>The information about the remote repo is stored in the /git/config file. The remote branches are tracked by objects in the <em>.git/refs/remotes folder</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git show-ref main <span class="c1"># show all branches that have main in the name and the commit they are pointing to</span>
</span></span><span class="line"><span class="cl">8195805D refs/heads/main
</span></span><span class="line"><span class="cl">B05DB506 refs/remotes/origin/main
</span></span></code></pre></div><p>If the local repo is in-sync with the remote, they will be pointing to the same commit, i.e. the hashes above would be the same.</p>
<p>The <code>git clone -bare</code> option will clone the history but not the working area. It will also not setup the original source as a remote. This  can be used to create a central repo that is just a source for cloning and not worked on directly.</p>
<h2 id="push--fetch--pull">PUSH / FETCH / PULL</h2>
<p><code>git push</code> is used to send local changes to the remote origin repo.  But what happens if there have been other changes on the remote before we push and we now have a conflict?</p>
<p>The answer is to fetch the remote changes and resolve the conflict locally before pushing. There is a comand to get the latest changes from the remote - <code>git fetch</code>, but rather than fetching and then merging in two steps, the <code>git pull</code> command peforms a fetch and merge in one command.</p>
<p>When working with a remote, you should always pull before pushing.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git pull origin
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GIT storage - understanding the stash, working, index, repo</title>
      <link>https://write-verbose.com/2021/06/24/gitandthefourareas/</link>
      <pubDate>Thu, 24 Jun 2021 17:45:34 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/06/24/gitandthefourareas/</guid>
      <description>GIT commands and their effect on the four storage areas</description>
      <content:encoded><![CDATA[<p>GIT commands move data between four areas of the object database. This article explores the four areas and the common commands that affect them.</p>
<p>See the earlier post on <a href="/2021/06/17/git-cheatnotes/">How GIT stores information</a> for information on the GIT object database.</p>
<h2 id="what-are-the-four-areas-git-uses">What are the four areas GIT uses?</h2>
<ol>
<li>The <em>Working Area</em> stores project source files updated directly by a code editor</li>
<li>The <em>Index</em> (or Staging Areas) tracks which files from the working area included in the next commit</li>
<li>The <em>Repository</em> (or Repo) is the most important area, where GIT stores snapshots of the tracked files, called <em>commits</em></li>
<li>The <em>Stash</em> is a temporary area, a bit like a clipboard, that can store and retrieve a saved copy of the working area and index</li>
</ol>
<p>Understanding git requires understanding how commands move data between these four areas.</p>
<p><img loading="lazy" src="/img/gitnotes-git1.jpg" alt="FourAreas"  />
</p>
<h2 id="git-status">GIT STATUS</h2>
<p><code>git status</code> is one of the most important commands. It shows the status of the working area and index. The most common output shows untracked files and modified files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">nothing to commit, working tree clean
</span></span></code></pre></div><h3 id="new-files">New files</h3>
<p>When a file is created or copied into the project, it only exists in the working area. <code>git status</code> will show the file as <em>untracked</em>. It has not been added to the index (staging) area and will not be part of the next commit until added. The status command shows the list of new files and suggests how to add them to the index.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Untracked files:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to include in what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">        consolidate.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nothing added to commit but untracked files present <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> to track<span class="o">)</span>
</span></span></code></pre></div><h3 id="modified-files">Modified files</h3>
<p>Files added to the index are tracked by GIT. When a tracked file is updated or modified, <code>git status</code> shows the it as <em>modified</em> and not yet staged for commit. The working area version has changed, but GIT is only tracking the previous version in the index. The updated file needs to be added to the index to be included in the next commit. The status command shows the modified files and suggests actions to take.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   consolidate.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span></code></pre></div><h3 id="changes-not-committed">Changes not committed</h3>
<p><code>git status</code> also shows changes in the index but not yet committed to the repo. These could be new and/or modified files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   consolidate.py
</span></span></code></pre></div><h3 id="remote">Remote</h3>
<p>A <em>remote</em> is a linked repository, for example, a central source repo that the local repo was originally cloned from. GIT maintains the link to the remote and tracks differences. By default, the remote is named <em>origin</em>. <code>git status</code> will show if the remote repo is ahead or behind the current local commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Your branch is ahead of <span class="s1">&#39;origin/master&#39;</span> by <span class="m">1</span> commit.
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git push&#34;</span> to publish your <span class="nb">local</span> commits<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nothing to commit, working tree clean
</span></span></code></pre></div><h2 id="git-add">GIT ADD</h2>
<p>The <code>git add</code> command updates the index (staging) area to track new files or add new versions of already tracked files.  The most common parameters are as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git add mynewfile.txt <span class="c1"># stage a specific file in the index</span>
</span></span><span class="line"><span class="cl">❯ git add folder1/ <span class="c1"># stage all new and modified files in folder1</span>
</span></span><span class="line"><span class="cl">❯ git add -A <span class="c1"># stage all new and modified files in the entire project</span>
</span></span><span class="line"><span class="cl">❯ git add . <span class="c1"># same as above</span>
</span></span><span class="line"><span class="cl">❯ git add -i <span class="c1"># interactive mode. Prompts for a decision on a file-by-file basis</span>
</span></span></code></pre></div><h2 id="git-diff">GIT DIFF</h2>
<p><code>git diff</code> shows differences between the GIT areas, such as between the working area and index, or between the index and repo. Differences are displayed at the command line. <code>git diff</code> is convenient for quick checks and small changes. Graphical tools may be better suited for complex comparisons.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git diff <span class="c1"># shows differences between the working area and index</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git diff --cached <span class="c1"># shows differences between the index and repo</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">diff --git a/consolidate.py b/consolidate.py
</span></span><span class="line"><span class="cl">index de10111..97f66ce <span class="m">100644</span>
</span></span><span class="line"><span class="cl">--- a/consolidate.py
</span></span><span class="line"><span class="cl">+++ b/consolidate.py
</span></span><span class="line"><span class="cl">@@ -1 +1,2 @@
</span></span><span class="line"><span class="cl"> import sys
</span></span><span class="line"><span class="cl">+print <span class="o">(</span>sys.version<span class="o">)</span>
</span></span></code></pre></div><p>In the example output above, there is a difference between the index and the repo. A line has been added in the index version, indicated by the &ldquo;+&rdquo; symbol.</p>
<h2 id="git-commit">GIT COMMIT</h2>
<p>The <code>git commit</code> command creates a point-in-time snapshot of tracked files in the repo. New and modified files from the index are added to the repo as new objects. Unchanged files are just referenced by a link to the existing object in the repo. The commit itself is an object in the repository, pointing to a tree and any parent commit.<br>
A commit is named using a SHA1 hash. It can be referenced in commands using just the first few characters of the hash (enough that it is not ambiguous).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git commit -m <span class="s2">&#34;Enabled handling of user input&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>main b9b6064<span class="o">]</span> Enabled handling of user input
</span></span><span class="line"><span class="cl"> <span class="m">1</span> file changed, <span class="m">1</span> insertion<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletion<span class="o">(</span>-<span class="o">)</span>
</span></span></code></pre></div><p>In the output above, a new commit is created on the main branch with partial SHA1 hash <em>b9b6064</em></p>
<h2 id="git-branch">GIT BRANCH</h2>
<p>A branch is just a reference to a commit. Creating a branch does not actually change objects in the repo, it just creates a named pointer to an existing commit.
If you are on the <em>main</em> branch and create a new branch called <em>dev</em>, GIT adds a new <em>dev</em> object in the .git/refs folder pointing to the current commit. Initially both branches are pointing to the same commit.<br>
The <code>git branch</code> command shows the current branches or creates a new branch, but does not switch to it. The asterisk in the output below shows that after creating a new <em>dev</em> branch, main is still the current branch:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git branch dev <span class="c1"># create a new branch. </span>
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git branch <span class="c1"># show branches</span>
</span></span><span class="line"><span class="cl">  dev
</span></span><span class="line"><span class="cl">* main
</span></span></code></pre></div><h2 id="git-switch">GIT SWITCH</h2>
<p><code>git switch</code> is a relatively new command that switches between branches. It does not make changes to the repo, but it does affect the working area and index. When you switch to another branch, the GIT <em>HEAD</em> reference is updated to point to the selected branch. The branch refers to a commit and the files and folders in the working area and index are replaced by the files in this commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git switch dev
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;dev&#39;</span>
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git branch
</span></span><span class="line"><span class="cl">* dev
</span></span><span class="line"><span class="cl">  main
</span></span></code></pre></div><p>You can create a branch and switch to it with the <code>-c</code> option</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git switch -c feature
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s1">&#39;feature&#39;</span>
</span></span></code></pre></div><h2 id="git-checkout">GIT CHECKOUT</h2>
<p>When it comes to moving between branches, <code>git checkout</code> is almost identical to <code>git switch</code>. The checkout command has been around for much longer and has options that perform other actions. The variety of uses for the checkout command was deemed confusing and switch was introduced to focus purely on moving between branches.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git checkout dev <span class="c1"># change to the dev branch</span>
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;dev&#39;</span>
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git branch <span class="c1"># show &#39;dev&#39; is now the current branch</span>
</span></span><span class="line"><span class="cl">* dev
</span></span><span class="line"><span class="cl">  feature
</span></span><span class="line"><span class="cl">  main
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git checkout -b feature2 <span class="c1"># create a new branch and switch to it</span>
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s1">&#39;feature2&#39;</span>
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git branch <span class="c1"># show &#39;feature2&#39; is not the current branch</span>
</span></span><span class="line"><span class="cl">  dev
</span></span><span class="line"><span class="cl">  feature
</span></span><span class="line"><span class="cl">* feature2
</span></span><span class="line"><span class="cl">  main
</span></span></code></pre></div><h2 id="git-log">GIT LOG</h2>
<p><code>git log</code> shows the history of commits and branches. It does not make any changes to the repo, index or working area. Use the &ndash;graph option to see a basic diagram of branches and merges:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git log --oneline --graph --decorate
</span></span><span class="line"><span class="cl">*   a7d531d <span class="o">(</span>HEAD -&gt; main<span class="o">)</span> Merge Feature2, resolve conflict in orders.py
</span></span><span class="line"><span class="cl"><span class="p">|</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> * d0773eb <span class="o">(</span>feature2<span class="o">)</span> Adds input validation to orders.py
</span></span><span class="line"><span class="cl">* <span class="p">|</span> bba3001 Modifies output in orders.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>/
</span></span><span class="line"><span class="cl">* 460ce0e Enables user input
</span></span><span class="line"><span class="cl">* b9b6064 Creates orders.py
</span></span></code></pre></div><h2 id="git-reset">GIT RESET</h2>
<p><code>git reset</code> is used to rollback to a previous commit. It can affect the repo, the index and the working area depending on the parameters.<br>
A common use case is to abandon some changes that have been committed and revert to a previous version of the project. Another is to abandon changes in the working area and revert to the last commit in the repo.</p>
<p>The reset command will move the current branch to the specified commit. By default, it will also overwrite the index with the contents of the commit. If you want to completely remove all traces of the unwanted change, you can also overwrite the working area using the &ndash;hard option</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git log --oneline <span class="c1"># show the history of commits</span>
</span></span><span class="line"><span class="cl">848eae0 <span class="o">(</span>HEAD -&gt; main<span class="o">)</span> Adds search to <span class="m">404</span> page
</span></span><span class="line"><span class="cl">364b33f Changes format of <span class="m">404</span> page
</span></span><span class="line"><span class="cl">d4ff0dc Modifies position of search box 
</span></span><span class="line"><span class="cl">c55dbb1 Enables comments
</span></span><span class="line"><span class="cl">cccb986 Adds home page, header and footer
</span></span><span class="line"><span class="cl"><span class="m">4478398</span> Initial commit
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git reset --hard d4ff0dc  <span class="c1"># Rollback the repo two commits, overwriting the index and working area</span>
</span></span><span class="line"><span class="cl">HEAD is now at d4ff0dc Modifies position of search box
</span></span></code></pre></div><p>Other options are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git reset --mixed d4ff0dc <span class="c1"># Rollback the repo two commits but only overwrite the index. The working area is not touched. This is also the default if no options are specified.</span>
</span></span><span class="line"><span class="cl">&gt; git reset --soft d4ff0dc <span class="c1"># Rollback the repo two commits, but don&#39;t touch the index or working area</span>
</span></span></code></pre></div><h3 id="head-reset">HEAD RESET</h3>
<p><code>git reset HEAD</code> is a quick way to return the index/working area to the committed state of the repo. This is an unsual reset as it doesn&rsquo;t actually change anything in the repo.</p>
<p>HEAD is usually poiting to the latest commit on the current branch.  Resetting the repo to HEAD changes nothing in the repo, but by default it will perform a <em>mixed</em> reset, overwriting the index.  We can also use the &ndash;hard option to overwrite both the index and working area:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git reset --hard HEAD
</span></span></code></pre></div><h2 id="git-stash">GIT STASH</h2>
<p>The Stash is a temporary storage area to save the working area and index when you need to working on another feature. You don&rsquo;t want to lose or commit what you are currently working on, so you stash the changes, work on something else and then retrieve them later.  Its a bit like saving something in a clipboard.</p>
<p>When you run <code>git stash</code>, GIT copies tracked files in the working area and index that aren&rsquo;t in the current commit and saves them to the stash. It then checks out the current commit (overwriting the working area and index so they match the repo).</p>
<p>When ready to restore the stashed files, run <code>git stash apply</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git stash --include-untracked  <span class="c1"># Save changes to the stash including untracked files</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git stash list <span class="c1"># List the contents of the stash. This is an array of saves starting with zero</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git stash apply <span class="c1"># Copies the latest entry in the stash to the working area and index. You can also specify an array element number if you don&#39;t want the latest</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GIT basics - under-the-hood</title>
      <link>https://write-verbose.com/2021/06/17/git-cheatnotes/</link>
      <pubDate>Thu, 17 Jun 2021 20:11:34 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/06/17/git-cheatnotes/</guid>
      <description>The basics of how GIT works under the hood, covering the object store, trees, blobs and commits.</description>
      <content:encoded><![CDATA[<p>GIT has become the de-facto version control system, but it can get complicated quickly. A look under-the-hood can help with day-to-day use and file recovery. This article explores the files in the object database laying a foundation for more advanced use.</p>
<h2 id="how-does-git-store-objects">HOW DOES GIT STORE OBJECTS?</h2>
<p>GIT stores information in the hidden <code>.git</code> folder in the root of the project. The folder is created when a repository is initialized using <code>git init</code></p>
<blockquote>
<p>Commits, trees and blobs are the fundamental objects in GIT</p>
</blockquote>
<p>They are stored in the .git/objects folder:</p>
<ul>
<li>Commits are a point in time reference to a tree</li>
<li>Trees represent folders</li>
<li>Blobs represent files*</li>
</ul>
<p>*Blobs can also represent &ldquo;hunks&rdquo; (chunks of a file), but thats a more advanced topic for another article</p>
<h2 id="whats-with-all-the-sha1-hashes">WHAT&rsquo;S WITH ALL THE SHA1 HASHES?</h2>
<p>GIT creates a SHA1 checksum for each object and stores them in files under the.git/objects folder. The files are named after the SHA1 hash which means objects in the database are immutable - they cannot change. Modified files always result in new objects with a new hash, rather than updating the existing.</p>
<p>GIT uses the hash values to determine which files have been modfied during a commit. New and modified files are added as new blobs. Unchanged files are just referenced, keeping the existing blob.</p>
<p>To avoid storing everything in one folder, git creates subfolders under .git/objects. The subfolder folder names are the first two characters of the SHA1 hash and the objects are grouped in these subfolders. The filename in the subfolder is the remaining characters of the hash.<br>
For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ ls .git/objects
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">00</span>
</span></span><span class="line"><span class="cl">00/24a57c6cee77755693e0514f244b1cfa5e645d
</span></span><span class="line"><span class="cl">00/5b63f2cf1d596fa3f88834b98272a9d1bf9fc3
</span></span><span class="line"><span class="cl">00/f823e0b5420e1051c80e0b37922409125e9156
</span></span><span class="line"><span class="cl"><span class="m">01</span>
</span></span><span class="line"><span class="cl">01/28a8cb2ac88861ec18599c0b05f9481bdd3600
</span></span><span class="line"><span class="cl">01/8c65d03d8269df96a7da4c3de1a62cd1d1c0ab
</span></span><span class="line"><span class="cl"><span class="m">02</span>
</span></span><span class="line"><span class="cl">02/188f346460de1876df7dac2669360396f84a58
</span></span></code></pre></div><p>In the above example, there are three subfolders under .git/objects, called &ldquo;00&rdquo;, &ldquo;01&rdquo; and &ldquo;02&rdquo;.
The full SHA1 hash of an object is constructed by adding the parent folder name to the filename.<br>
So the final file listed above has the full hash of <span style="color:lightgreen">02</span>188f346460de1876df7dac2669360396f84a58</p>
<h2 id="can-you-look-inside-the-objects">CAN YOU LOOK INSIDE THE OBJECTS?</h2>
<p>The objects inside the git database are compressed, but can be viewed with the command <code>git cat-file</code><br>
Specify the object hash and either:<br>
-t = show the object type<br>
-p = print the contents</p>
<p>NOTE: You only need part of the hash when using most GIT commands (and GIT sometimes truncates the hash in its own output)</p>
<h3 id="what-type-of-object-is-this">WHAT TYPE OF OBJECT IS THIS?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file 0b4271c56 -t <span class="c1"># display the object type</span>
</span></span><span class="line"><span class="cl">commit
</span></span></code></pre></div><p>The above object is a commit.</p>
<h3 id="whats-inside-a-commit-object">WHAT&rsquo;S INSIDE A COMMIT OBJECT?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file 0b4271c56 -p
</span></span><span class="line"><span class="cl">tree 30b4d42bbe1a39dcc314f7c280b1437a1925585e
</span></span><span class="line"><span class="cl">parent cc0e10d238e78a57115572360a93deba2554d185
</span></span><span class="line"><span class="cl">author GD &lt;GD@LOCAL.HOME&gt; <span class="m">1621179226</span> +0100
</span></span><span class="line"><span class="cl">committer GD &lt;GD@LOCAL.HOME&gt; <span class="m">1621179226</span> +0100
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Updated summaries. Added article
</span></span></code></pre></div><p>In the above output:</p>
<ul>
<li><em>tree</em>  is a hash reference to the root tree (folder).</li>
<li><em>parent</em> is the hash of the parent commit (unless this is the first commit)</li>
<li><em>Author</em> and <em>committer</em> are the operator who created the commit</li>
<li>Finally there is the commit message, <em>Updated summaries&hellip;</em></li>
</ul>
<h3 id="whats-in-a-tree-object">WHAT&rsquo;S IN A TREE OBJECT?</h3>
<p>We can view the contents of a tree object in the same way e.g. using the hash of the tree in the commit above:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file -p 30b4d42bbe
</span></span><span class="line"><span class="cl"><span class="m">100644</span> blob d298be107f27247a24d24f8f78c55d42359007be    .gitignore
</span></span><span class="line"><span class="cl"><span class="m">100644</span> blob e3720ce5ced245ef02620afca619727c001e85bf    404.html
</span></span><span class="line"><span class="cl"><span class="m">100644</span> blob 82b909c8a3de119782d6b66288734f82a4a57d1b    about.md
</span></span><span class="line"><span class="cl"><span class="m">040000</span> tree 272bc4b082fa15dd84b08712206d2edfe2b41e9a    archetypes
</span></span><span class="line"><span class="cl"><span class="m">040000</span> tree e305983083fc1872542004d046abdf3a683407e1    config
</span></span><span class="line"><span class="cl"><span class="m">040000</span> tree 955f968be02f980640e570874f4c155da51882d4    content
</span></span></code></pre></div><p>The first three items in the output are references to blobs (files) in the root of the tree (e.g. the <em>.gitignore</em> file). The rest are references to child trees, which can be explored further using the cat-file command.</p>
<h3 id="whats-in-a-blob">WHAT&rsquo;S IN A BLOB?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file -t d298be107 <span class="c1"># get the object type</span>
</span></span><span class="line"><span class="cl">blob
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git cat-file -p d298be107 <span class="c1"># get the object contents</span>
</span></span><span class="line"><span class="cl">public/
</span></span></code></pre></div><p>The blob finally contains the actual content, rather than a reference.<br>
In this case, it is the .gitignore file that contains a single line to exclude <em>public</em> from the repo</p>
<h3 id="what-about-branches">WHAT ABOUT BRANCHES?</h3>
<p>Branches are very simple in GIT. They are just references to a commit.</p>
<p>Branch objects aren&rsquo;t compressed so we can look at the contents of the file directly (without needing git cat-file).<br>
Local branches are stored in the .git/refs/heads folder:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ cat .git/refs/heads/main  <span class="c1"># show the contents of the main file</span>
</span></span><span class="line"><span class="cl">0b4271c561e6c7ad5dcf788afdc29bebbf11e171
</span></span></code></pre></div><p>This output is what we expected, the contents of the main branch are a reference to a commit using the SHA1 hash.</p>
<p>If we explore the branch using git cat-file, it gives us information about the commit the branch is pointing to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file -t main <span class="c1"># show the object type</span>
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git cat-file -p main <span class="c1"># show the object contents</span>
</span></span><span class="line"><span class="cl">tree 30b4d42bbe1a39dcc314f7c280b1437a1925585e
</span></span><span class="line"><span class="cl">parent cc0e10d238e78a57115572360a93deba2554d185
</span></span><span class="line"><span class="cl">author Geoff Dixon &lt;GBDixg@WESTCLIFF.HOME&gt; <span class="m">1621179226</span> +0100
</span></span><span class="line"><span class="cl">committer Geoff Dixon &lt;GBDixg@WESTCLIFF.HOME&gt; <span class="m">1621179226</span> +0100
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Updated summaries. Added article
</span></span></code></pre></div><p>This is identical to the contents of the commit we looked at earlier, because that was the latest commit on the main branch.</p>
<h3 id="whats-the-head">WHAT&rsquo;S THE HEAD?</h3>
<p>Head is a special pointer in GIT.  It is a reference to the commit that is currently checked-out. Usually the latest commit on the current branch, but not always.</p>
<p>The contents of HEAD is not a hash. It contains a pointer to the name of a branch or commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ cat .git/HEAD <span class="c1"># show contents of the HEAD file</span>
</span></span><span class="line"><span class="cl">ref: refs/heads/main
</span></span></code></pre></div><h2 id="summary">SUMMARY</h2>
<p>The git object database is all about references.</p>
<ul>
<li>HEAD is a reference to the current commit</li>
<li>A branch is a reference to a commit</li>
<li>A commit is a reference to a tree</li>
<li>A tree is a reference to blobs and child trees</li>
<li>A blob is the actual content</li>
</ul>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>WSL2 on Windows 10 - quick setup</title>
      <link>https://write-verbose.com/2021/05/15/wsl2-quick/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/05/15/wsl2-quick/</guid>
      <description>Quick notes on enabling Windows Services for Linux v2 on Windows 10</description>
      <content:encoded><![CDATA[<p>Windows Subsystem for Linux (WSL) is a fantastic Dev and Test environment, providing seamless integration for Linux apps and shells running on Windows 10. This post is a quick summary of the manual steps to enable WSL2 in Windows 10.</p>
<h2 id="windows-insider-builds">Windows Insider Builds</h2>
<p>At the time of writing, Microsoft is making it much simpler to install and enable WSL2 using a single command. This option is only available in Insider Builds 20262 and higher.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wsl --install
</span></span></code></pre></div><p>For the stable release versions of Windows 10, the following manual steps are required.</p>
<h2 id="enable-virtualization-support">Enable virtualization support</h2>
<p>This is separate to the Hyper-V optional feature, but does use the same architecture.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
</span></span></code></pre></div><h2 id="enable-wsl-feature">Enable WSL feature</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
</span></span></code></pre></div><h2 id="wsl-kernel-update-package">WSL kernel update package</h2>
<p>This is required because Microsoft removed the previously included Linux kernel from Windows. It now gets updated and patched through Windows Update</p>
<p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank">Download and install the update package</a></p>
<h2 id="set-the-default-version">Set the default version</h2>
<p>Make sure everything is version 2</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">wsl --set-default-version <span class="m">2</span>
</span></span></code></pre></div><h2 id="install-the-required-distro">Install the required distro</h2>
<p>Ubuntu is the most reliable on Windows at the time of writing</p>
<p><a href="https://www.microsoft.com/en-gb/p/ubuntu-2004-lts/9n6svws3rx71" target="_blank">Ubuntu 20.04 LTS</a></p>
<h2 id="create-username">Create username</h2>
<p>Start the distro from the Start Menu shortcut. When prompted, specify a username and password.</p>
<p>The user is automatically added to the Sudo group.</p>
<h2 id="update-packages-in-the-distro">Update packages in the distro</h2>
<p>Launch Ubuntu and start a terminal shell</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt-get upgrade
</span></span></code></pre></div><h2 id="check-you-are-running-version-2">Check you are running version 2</h2>
<p>Windows 10 PowerShell:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">wsl --list -v
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  NAME                   STATE           VERSION
</span></span><span class="line"><span class="cl">* docker-desktop-data    Running         <span class="m">2</span>
</span></span><span class="line"><span class="cl">  Ubuntu-20.04           Running         <span class="m">2</span>
</span></span><span class="line"><span class="cl">  docker-desktop         Running         <span class="m">2</span>
</span></span></code></pre></div><h2 id="location-of-the-vhdx-file">Location of the .vhdx file</h2>
<p>The virtual disk containing the Linux OS is located here:</p>
<p><code>%LOCALAPPDATA%\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\LocalState\ext4.vhdx</code></p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Create custom code snippets in VSCode</title>
      <link>https://write-verbose.com/2021/05/07/vscodesnippets/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/05/07/vscodesnippets/</guid>
      <description>Create and manage code Snippets in Visual Studio Code</description>
      <content:encoded><![CDATA[<h2 id="background">BACKGROUND</h2>
<p>VSCode snippets are a productivity feature allowing blocks of code to be inserted with a couple of keystrokes or tab completion. Its simple to add your own Snippets and dramatically boost your productivity. Read on for the details.</p>
<blockquote>
<p>All paths and keyboard shortcuts in this article assume VSCode is running on Windows</p>
</blockquote>
<p>Predefined Snippets are included with most of the VSCode language extensions (use @category:&ldquo;snippets&rdquo; in the extensions pane to see which ones). However, they may not match your coding style, or have trigger text that suits you. User-defined snippets allow complete customisation. They also support variables that are replaced with required values on insert, making them perfect for boilerplate code.</p>
<h2 id="editing-user-defined-snippets">EDITING USER-DEFINED SNIPPETS</h2>
<p>Open a language-specific Snippet file as follows (example using PowerShell):</p>
<p><code>File &gt; Preferences &gt; User Snippets &gt; PowerShell</code></p>
<p>A .json file is displayed, empty at first.</p>
<p>A Snippet is made up of the following elements</p>
<table>
<thead>
<tr>
<th>Element</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>&ldquo;Function template&rdquo;</td>
<td>The name is shown by Intellisense if there is no description</td>
</tr>
<tr>
<td>prefix</td>
<td>[&ldquo;ft&rdquo;,&ldquo;function&rdquo;]</td>
<td>One or more trigger words that activate intellisense (uses substring matching)</td>
</tr>
<tr>
<td>body</td>
<td>[&ldquo;function Verb-Noun {\r&rdquo;,&quot;[cmdletbinding()]\r&quot;]</td>
<td>The template code to be inserted</td>
</tr>
<tr>
<td>description</td>
<td>Advanced function boilerplate</td>
<td>Optional description displayed by intellisense</td>
</tr>
<tr>
<td>placeholder</td>
<td>${1:Verb-Noun}</td>
<td>An element within the body that is replaced by the user after insertion. The number represents the tab stop position. The text is the default value that is replaced</td>
</tr>
<tr>
<td>choices</td>
<td>${1|one,two,three|}</td>
<td>This placeholder will prompt to choose one of the options between the pipe characters</td>
</tr>
<tr>
<td>$0</td>
<td>[&ldquo;while($i -lt 10){\r&rdquo;,&quot;\t$0\r&quot;,&quot;}&quot;]</td>
<td>A special placeholder that always comes last and ends insertion mode</td>
</tr>
</tbody>
</table>
<h3 id="snippet-example">Snippet example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;Advanced function&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;fa&#34;</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;Function ${1:Verb-Noun}{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;[cmdletBinding()]\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;param(\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;    \r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;)\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;BEGIN{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;PROCESS{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;$0\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;END{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="p">],</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Advanced function boilerplate&#34;</span>
</span></span></code></pre></div><p>Note the use of a JSON array for the body and control characters for new lines. This is quite laborious to create by hand, but VSCode extensions can make this much easier&hellip;</p>
<h3 id="marketplace-snippet-extension">Marketplace Snippet Extension</h3>
<p>There are a number of extensions in the VSCode marketplace that will create a Snippet from highlighted code in the editor.</p>
<p>For example, <a href="https://marketplace.visualstudio.com/items?itemName=ryanolsonx.snippet-creator" target="_blank">Snippet Creator</a> will automatically detetect the in-use language and then prompt for the Snippet prefix and description.  You can then edit the Snippet to fine-tune it.</p>
<h3 id="snippet-scope">Snippet Scope</h3>
<p><strong>Language-specific</strong></p>
<p>Most Snippets will be created in a language-specific Snippet file and will only prompt for insertion when using that language e.g.<br>
        <code>%APPDATA%\Code\User\snippetsPowershell.json</code></p>
<p><strong>Global</strong></p>
<p>There is also a global Snippets file that applies to all languages. This file does not exist by default but can be created from <code>File &gt; Preferences &gt; User Snippets &gt; New Global Snippets file</code>. The file can have any name, but always ends in <code>.code-snippets</code>. For example:<br>
        <code>%APPDATA%\Code\User\snippets\GlobalSnippets.code-snippets</code></p>
<p>The global Snippets can use an additional property called <em>Scope</em> to limit them to a list of languages. If it isn&rsquo;t specified, they are available to all.</p>
<p><strong>Project-specific</strong></p>
<p>If a global Snippets file is placed in the <code>.vscode</code> folder at the root of a project, it is scoped only to that project.  It can still use the scope property to further limit Snippets to specific languages.</p>
<h2 id="keyboard-shortcut">Keyboard Shortcut</h2>
<p>Use <code>File &gt; Preferences &gt; Keyboard Shortcuts &gt; Open Keyboard Shortcuts (JSON)</code> to assign a shortcut to a Snippet. Custom shortcuts are saved in the file <code>%AppData%\Code\User\keybindings.json</code></p>
<p>If the Snippet is not in the Global Snippets file, the langId is used to specify a language specific Snippet:</p>
<h3 id="keybinding-example">Keybinding example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;cmd+k 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;editor.action.insertSnippet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;when&#34;</span><span class="p">:</span> <span class="s2">&#34;editorTextFocus&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;langId&#34;</span><span class="p">:</span> <span class="s2">&#34;csharp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;NewClass&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="hiding-snippets">Hiding Snippets</h2>
<p>Hiding Snippets is useful when there is a lot of noise in the Intellisense prompts. This can occur when you create a user snippet with the same trigger as a language extension snippet.</p>
<blockquote>
<ul>
<li>Open the insert Snippet dialog using CTRL + ALT + J</li>
<li>Start typing the tigger characters to show the Snippet options in the list</li>
<li>Hover over each item and click the Hide from Intellisense option on the right hand side</li>
</ul>
</blockquote>
<h2 id="extension-snippets">Extension Snippets</h2>
<p>I don&rsquo;t recommend trying to edit or remove extension Snippets. Changes are likely to get overwritten when the extension updates.</p>
<p>For information, extension Snippets are stored under <code>%USERPROFILE%\.vscode\extensions</code>. For example the Microsoft PowerShell extension Snippets are at:</p>
<p><code>%USERPROFILE%\.vscode\extensions\ms-vscode.powershell-2021.2.2\snippets\PowerShell.json</code></p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Find a computer&#39;s Active Directory Site and Subnet with PowerShell</title>
      <link>https://write-verbose.com/2019/04/13/find-adsite/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/04/13/find-adsite/</guid>
      <description>Use PowerShell to get the AD Site and Subnet of a Windows computer</description>
      <content:encoded><![CDATA[<p>Read-on for a PowerShell command to get the Active Directory Subnet and Site from the computername or IP Address.</p>
<p><strong>Active Directory Sites</strong> represent locations with good network connectivity. An ADSite is often created for each office or a group of offices in a metropolitan area, to generate the replication topology between Domain Controllers, and to help workstations/servers locate closest services.</p>
<p><strong>Active Directory Subnets</strong> define the IP ranges included in an AD Site. A member workstation/server will have an IP address that should fall within a defined AD subnet, making it part of an AD Site.</p>
<p>AD Site membership is not fixed. Laptops can move between Sites and Subnets when they roam to another location.</p>
<blockquote>
<p>An incorrect or undefined AD subnet can lead to slow logon times and slow access to DFS shares. A domain member would use any server that responds when it isn&rsquo;t in a defined subnet.</p>
</blockquote>
<h2 id="powershell-script">PowerShell script</h2>
<p>The <strong>Find-ADSite</strong> PowerShell function below will return the AD Site and Subnet for a specified computer name or IP Address.<br>
If a company populates subnet descriptions with useful information, it can also identify information such as the specific Office or floor.</p>
<p>AD Administrators may define a <a href="https://blog.mindcore.dk/2013/07/catch-all-or-super-subnet-in-sites-and/" target="_blank">catch-all subnet</a> with a wide address range. By default if the IP address is within more than one subnet, the output will only include the smallest range. Use the -AllMatches parameter to see everything.</p>
<p><img loading="lazy" src="/img/find-adsite1.png" alt="Find-ADSite"  />
</p>
<script type="application/javascript" src="https://gist.github.com/gbdixg/5cd6ea0c984278b08b36260ada0e3f9c.js"></script>

<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Export Remote Eventlog with PowerShell</title>
      <link>https://write-verbose.com/2019/04/06/export-eventlog/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/04/06/export-eventlog/</guid>
      <description>A PowerShell function to export and copy Windows Event logs from a remote computer</description>
      <content:encoded><![CDATA[<p>This article includes a PowerShell <em>Export-Eventlog</em> command to quickly export Windows event logs from a remote computer and copy it to the local machine.</p>
<p>Event logs are a cornerstone of troubleshooting, but getting access to them can be difficult across a network.</p>
<blockquote>
<p>It can be faster to export a Windows event log on a remote computer,  copy the .evtx file over the network and then query it locally.</p>
</blockquote>
<p>The PowerShell <strong>Get-Winevent</strong> command can work against remote event logs, but it can be painfully slow over the network. Copying an entire exported log (.evtx file) across the same connection is much faster. Get-Winevent can still be used with the <em>-path</em> parameter to query the locally copied .evtx file.</p>
<h2 id="powershell-script">PowerShell Script</h2>
<p><strong>wevtutil.exe</strong> is Windows .exe that can export event logs.  The PowerShell function below uses wevtutil to export one ore more event logs and copy them locally. The computer name is pre-pended to the exported log name.</p>
<script type="application/javascript" src="https://gist.github.com/gbdixg/02215dd747bafb1e42a6c9cf2e36a542.js"></script>

<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Active Directory ADSystemInfo with PowerShell</title>
      <link>https://write-verbose.com/2019/03/30/adsysteminfo/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/03/30/adsysteminfo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;ADSystemInfo is a built-in COM object in Windows that simplifies lookup of Active Directory user and computer information.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>ADSystemInfo is a built-in COM object in Windows that simplifies lookup of Active Directory user and computer information.</p>
</blockquote>
<p>ADSystemInfo can only return information about the local computer and current user. The computer must be joined to a domain and a domain controller must be reachable when the function is called.</p>
<p>Its simple to instantiate COM objects in PowerShell. The function below shows how to use this object.</p>
<h2 id="example-output">EXAMPLE OUTPUT</h2>
<p><img loading="lazy" src="/img/adsysteminfo.png" alt="Get-ADSystemInfo"  />
</p>
<h2 id="powershell-script">POWERSHELL SCRIPT</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="kd">Function</span><span class="w"> </span><span class="nb">Get-ADSystemInfo</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Synopsis</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Used to lookup specific AD user/computer object properties of the current session
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Description</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Uses &#34;ADSystemInfo&#34; COM object to get Active Directory attributes for the current user and computer
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Example</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		PS C:\&gt;Get-ADSystemInfo
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		ComputerDN      : CN=EGBLHCNU335BQCG,OU=GBR,OU=Workstations,OU=EU,OU=Regions,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		SiteName        : EULON
</span></span></span><span class="line"><span class="cl"><span class="cm">		DomainDNSName   : mycompany.com
</span></span></span><span class="line"><span class="cl"><span class="cm">		DomainShortName : MYCOMPANY
</span></span></span><span class="line"><span class="cl"><span class="cm">		ForestDNSName   : mycompany.com
</span></span></span><span class="line"><span class="cl"><span class="cm">		IsNativeMode    : True
</span></span></span><span class="line"><span class="cl"><span class="cm">		PDCRoleOwner    : CN=527616-NAADCP01,CN=Servers,CN=Global,CN=Sites,CN=Configuration,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		SchemaRoleOwner : CN=527616-NAADCP01,CN=Servers,CN=Global,CN=Sites,CN=Configuration,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		UserDN          : CN=gdixon2,OU=Users,OU=GBR,OU=Accounts,OU=EU,OU=Regions,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Notes</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Version:        1.0
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Link</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		http://msdn.microsoft.com/en-us/library/aa705962(VS.85).aspx
</span></span></span><span class="line"><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"><span class="k">Param</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">Process</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nv">$Output</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">PSObject</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">				<span class="nb">Select </span><span class="n">ComputerDN</span><span class="p">,</span><span class="n">SiteName</span><span class="p">,</span><span class="n">DomainDNSName</span><span class="p">,</span><span class="n">DomainShortName</span><span class="p">,</span><span class="n">ForestDNSName</span><span class="p">,</span><span class="n">IsNativeMode</span><span class="p">,</span><span class="n">PDCRoleOwner</span><span class="p">,</span><span class="n">SchemaRoleOwner</span><span class="p">,</span><span class="n">UserDN</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$obj</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">-com</span> <span class="n">ADSystemInfo</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$type</span> <span class="p">=</span> <span class="nv">$obj</span><span class="p">.</span><span class="py">gettype</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">ComputerDN</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;ComputerName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">SiteName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;sitename&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">DomainDNSName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;DomainDNSName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">DomainShortName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;DomainShortName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">ForestDNSName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;ForestDNSName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">IsNativeMode</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;IsNativeMode&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">PDCRoleOwner</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;PDCRoleOwner&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span> <span class="o">-replace</span> <span class="s2">&#34;CN=NTDS Settings,&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">SchemaRoleOwner</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;SchemaRoleOwner&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span> <span class="o">-replace</span> <span class="s2">&#34;CN=NTDS Settings,&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">UserDN</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;UserName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Get-WLAN - PowerShell Toolmaking</title>
      <link>https://write-verbose.com/2019/01/06/powershell-toolmaking-regex/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/01/06/powershell-toolmaking-regex/</guid>
      <description>PowerShell function to show WIFI connections, using Regular expressions to convert netsh output into PSObjects</description>
      <content:encoded><![CDATA[<p>This post includes a Get-WLAN function to show information about wireless LAN connections, including the SSID and signal strength. It also demonstrates creating a PowerShell wrapper for a built-in Windows command.</p>
<h2 id="why-create-a-powershell-exe-wrapper">Why create a PowerShell exe wrapper</h2>
<blockquote>
<p>PowerShell Tools are re-usable functions that can be used stand-alone or in a pipeline</p>
</blockquote>
<p>Sometimes its more convenient to create a <em>wrapper script</em> using the output of a command line tool than try to create the function entirely in PowerShell. The example below creates a PowerShell command to get information about WI-Fi connections on the local computer.</p>
<h2 id="using-regex-to-parse-text-output">Using Regex to parse text output</h2>
<p><strong>Regular expressions are the ideal way to convert text output from a command line tool into PowerShell objects, making a re-usable pipeline tool</strong>.  Regex is very powerful, but also intimidating. The solution below uses a handy shortcut to identify boundaries in the output - the <em>not</em> operator - ^.<br>
For example, <code>[^:]+</code> means match one or more characters that are not a colon. In the example below, this is used to split the text on each line in the command output.</p>
<p><strong>The netsh output below needs to be split into key value pairs</strong> (e.g. SSID = MyWifi) and converted to a PSObject. For each line of output, the colon character is the obvious boundary between the key name and the value.</p>
<h3 id="native-command-output">Native Command Output</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">C<span class="p">:</span><span class="nl">\</span><span class="c1">&gt; netsh wlan show interfaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">There is 1 interface on the system:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name                   : Wi-Fi
</span></span><span class="line"><span class="cl">Description            : Intel(r) Dual Band Wireless-AC 8260
</span></span><span class="line"><span class="cl">GUID                   : 42bce393-237c-4bd4-9d5e-18020ba8bb87
</span></span><span class="line"><span class="cl">Physical address       : b7:8a:60:a5:f7:d8
</span></span><span class="line"><span class="cl">State                  : connected
</span></span><span class="line"><span class="cl">SSID                   : MyWiFi
</span></span><span class="line"><span class="cl">BSSID                  : 30:d4:2e:50:de:7f
</span></span><span class="line"><span class="cl">Network type           : Infrastructure
</span></span><span class="line"><span class="cl">Radio type             : 802.11n
</span></span><span class="line"><span class="cl">Authentication         : WPA2-Personal
</span></span><span class="line"><span class="cl">Cipher                 : CCMP
</span></span><span class="line"><span class="cl">Connection mode        : Profile
</span></span><span class="line"><span class="cl">Channel                : 6
</span></span><span class="line"><span class="cl">Receive rate (Mbps)    : 115.6
</span></span><span class="line"><span class="cl">Transmit rate (Mbps)   : 115.6
</span></span><span class="line"><span class="cl">Signal                 : 97%
</span></span><span class="line"><span class="cl">Profile                : MyWiFi
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Hosted network status  : Not available
</span></span></code></pre></div><h3 id="the-regex-explained">The regex explained</h3>
<p>The PowerShell snippet below shows the regular expression and how the matches are added to a hash table collection as name = value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$Properties</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$result</span> <span class="p">=</span> <span class="n">netsh</span> <span class="n">wlan</span> <span class="n">show</span> <span class="n">interfaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Result</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;^\s+(?&lt;name&gt;[^:]+):\s(?&lt;value&gt;.*)$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$name</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">].</span><span class="py">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$val</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">].</span><span class="py">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$Properties</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The Foreach-Object loop above processes the NetSH command output line-by-line.<br>
Each line (the $_ variable) is tested for a match against the RegEx expression using the PowerShell -match operator.</p>
<p>The &ldquo;not&rdquo; operator <code>[^:]+</code> captures all the characters until the colon and saves them in the named capture group &ldquo;name&rdquo; <code>?&lt;name&gt;</code>. The match then expects a colon followed by a space. Finally, everything until the end of the line is saved to the named capture group &ldquo;value&rdquo; <code>?&lt;value&gt;</code>.</p>
<ul>
<li>MATCHES(0) = the entire line</li>
<li>MATCHES(&rsquo;name&rsquo;) = from the start of the line, match any character that is not a colon</li>
<li>MATCHES(&lsquo;value&rsquo;) = match everything from colon [space] to the end of the line</li>
</ul>
<p><img loading="lazy" src="/img/powershell-toolmaking-regex1.png" alt="RegEx"  />
</p>
<p>A complete Get-WLAN PowerShell function is provided below.</p>
<h2 id="powershell-script">PowerShell Script</h2>
<script type="application/javascript" src="https://gist.github.com/gbdixg/e931a3056a56af3e7de1460eb0571fff.js"></script>

<h2 id="regex-links">Regex Links</h2>
<p>For some practice with Regular Expressions, check out <a href="https://alf.nu/RegexGolf/" target="_blank">RegEx Golf</a> or <a href="https://regexcrossword.com/" target="_blank">Regex Crosswords</a>. There is even a <a href="https://www.bennadel.com/blog/3629-the-12th-annual-regular-expression-day---june-1st-2019.htm" target="_blank">Regular Expressions day</a>.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Audit Chrome Extensions with PowerShell</title>
      <link>https://write-verbose.com/2018/12/15/audit-google-chrome-extensions/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2018/12/15/audit-google-chrome-extensions/</guid>
      <description>A PowerShell script to list the installed Google Chrome extensions on a local or remote computer</description>
      <content:encoded><![CDATA[<p>This post includes a PowerShell <em>Get-ChromeExtension</em> script to list installed extensions on the local or remote computer.</p>
<p>Browser extensions are supposed to be curated and vetted, but there have been <a href="https://securityboulevard.com/2020/12/3-million-chrome-users-infected-via-extensions-here-we-go-again/" target="_blank">many examples of malware</a>. If you don&rsquo;t already have control of extensions through an allow or blocklist, the first step is to find out what is in-use.</p>
<p>The code below is a PowerShell function to get the installed Google Chrome browser extensions from a local or remote Windows computer.</p>
<blockquote>
<p>Chrome Browser Extensions install into the user profile and do not appear in the Add/Remove Programs list.</p>
</blockquote>
<p>Chrome Extensions are a challenge to audit due to the way they install and lack of enumeration options.
The PowerShell script below gets the installed extensions using the following method:</p>
<ul>
<li>Get the <strong>extension IDs</strong> from the folders names under <code>%userprofile%\AppData\Local\Google\Chrome\User Data\Default\Extensions</code></li>
<li>Lookup the <strong>extension name</strong> on the Chrome Web Store using the extension ID</li>
<li>Get the <strong>extension version</strong> from the <code>manifest.json</code> file in the extension folder</li>
</ul>
<h2 id="example-script-output">Example script output</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">C<span class="p">:</span><span class="nl">\</span><span class="c1">&gt; Get-ChromeExtension | Select Name,Version,Description | ft -AutoSize</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name                            Version      Description
</span></span><span class="line"><span class="cl">----                            -------      -----------
</span></span><span class="line"><span class="cl">Docs                            0.10         Create and edit documents
</span></span><span class="line"><span class="cl">Google Drive                    14.1         Google Drive: create, share and keep all your stuff in one place.
</span></span><span class="line"><span class="cl">YouTube                         4.2.8        The official YouTube website
</span></span><span class="line"><span class="cl">Sheets                          1.2          Create and edit spreadsheets
</span></span><span class="line"><span class="cl">Google Docs Offline             1.4          Get things done offline with the Google Docs family of products.
</span></span><span class="line"><span class="cl">Google Wallet                   1.0.0.4
</span></span><span class="line"><span class="cl">Gmail                           8.1          Fast, searchable email with less spam.
</span></span><span class="line"><span class="cl">Chrome Cast                     6618.312.0.2
</span></span><span class="line"><span class="cl">Slides                          0.10         Create and edit presentations
</span></span><span class="line"><span class="cl">Docs                            0.10         Create and edit documents
</span></span><span class="line"><span class="cl">Google Drive                    14.2         Google Drive: create, share and keep all your stuff in one place.
</span></span><span class="line"><span class="cl">YouTube                         4.2.8        The official YouTube website
</span></span><span class="line"><span class="cl">OneTab                          1.18         Save up to 95% memory and reduce tab clutter
</span></span><span class="line"><span class="cl">uBlock Origin                   1.20.0       Finally, an efficient blocker. Easy on CPU and memory.
</span></span><span class="line"><span class="cl">Dark Reader                     4.7.12       Dark mode for every website. Take care of your eyes, use dark theme for night and daily browsing.
</span></span><span class="line"><span class="cl">Share link via email            3.2.1        Adds a button and context menu item to send the page URL or a link URL via email
</span></span><span class="line"><span class="cl">Sheets                          1.2          Create and edit spreadsheets
</span></span><span class="line"><span class="cl">Google Docs Offline             1.7          Get things done offline with the Google Docs family of products.
</span></span><span class="line"><span class="cl">Pinterest Save Button           4.0.82       Save the things you find on the Web.
</span></span><span class="line"><span class="cl">Google Wallet                   1.0.0.4
</span></span><span class="line"><span class="cl">ColorPick Eyedropper            0.0.2.29     An eye-dropper <span class="p">&amp;</span>amp; color-picker tool that allows you to select color values from webpages.
</span></span><span class="line"><span class="cl">Gmail                           8.2          Fast, searchable email with less spam.
</span></span><span class="line"><span class="cl">Chrome Cast                     7519.422.0.3
</span></span></code></pre></div><h2 id="powershell-script">PowerShell Script</h2>
<p>Get-ChromeExtension.ps1 script:</p>
<script type="application/javascript" src="https://gist.github.com/gbdixg/7b1b1555b9c3ffc4db7997611caf6646.js"></script>

<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    
    
    <item>
      <title>WhoAmI</title>
      <link>https://write-verbose.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/about/</guid>
      <description>I live in the U.K. and work remotely on technology projects.
I&amp;rsquo;ve been self-employed for many years, working as an I.T. consultant for Fortune 500 companies, mainly in the financial sector.
Disclaimers: Views expressed are solely my own
Product reviews are based on real experience
Scripts and guides on this site should be tested in a non-production environment
There is no guarantee of accuracy</description>
      <content:encoded><![CDATA[<p>I live in the U.K. and work remotely on technology projects.</p>
<p>I&rsquo;ve been self-employed for many years, working as an I.T. consultant for Fortune 500 companies, mainly in the financial sector.</p>
<h3 id="disclaimers">Disclaimers:</h3>
<p>Views expressed are solely my own</p>
<p>Product reviews are based on real experience</p>
<p>Scripts and guides on this site should be tested in a non-production environment</p>
<p>There is no guarantee of accuracy</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
