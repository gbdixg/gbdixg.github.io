<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Write-Verbose</title>
    <link>https://write-verbose.com/</link>
    <description>Recent content on Write-Verbose</description>
    <image>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 11 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Migrate home drives to OneDrive with Microsoft Migration Manager - Pt2</title>
      <link>https://write-verbose.com/2022/06/11/migration-manager-notes2/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2022/06/11/migration-manager-notes2/</guid>
      <description>More things I learned migrating home drives to OneDrive with Migration Manager</description>
      <content:encoded><![CDATA[<p>Part two of &ldquo;Notes from the Field&rdquo; for a home drive to OneDrive for Business migration, looking at network routing, multi-geo considerations and scheduling issues.</p>
<h2 id="be-aware-of-network-routing">BE AWARE OF NETWORK ROUTING</h2>
<p>Although the migration tool uses a source UNC path and destination OneDrive URL, files are actually uploaded to Azure blobs before being transferred to OneDrive<br>
e.g. *.blob.core.windows.net</p>
<p>There is a list of <a href="https://learn.microsoft.com/en-us/sharepointmigration/mm-prerequisites">required endpoints</a>, and it&rsquo;s important to determine if the migration traffic will route out through the enterprise proxy servers, or go direct e.g. through an ExpressRoute link. This routing will be specific to your network setup.</p>
<h3 id="use-agent-groups-in-an-enterprise-network">Use &ldquo;Agent Groups&rdquo; in an enterprise network</h3>
<blockquote>
<p>Agent Groups are a logical grouping within Migration Manager, allowing each migration to use a specific agent or agent(s)</p>
</blockquote>
<p>Carefully consider the network location of each on-prem migration agent, to optimises the traffic flow and minimise bandwidth impact. The two key considerations are:</p>
<ul>
<li>proximity to the home drive file server</li>
<li>proximity to the Azure/Internet egress link.</li>
</ul>
<p>Assign each agent to an Agent Group based on its location. Use the Agent Group option when scheduling a migration to control which agent is used for a specific migration batch.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">SPO Admin Portal <span class="p">&gt;</span> Migration <span class="p">&gt;</span> File Shares <span class="p">&gt;</span> Agents <span class="p">&gt;</span> Select an Agent <span class="p">&gt;</span> Edit <span class="p">&gt;</span> Agent Group
</span></span></code></pre></div><h3 id="scanning-always-uses-the-default-agent-group">Scanning always uses the Default agent group</h3>
<p>Scanning is a pre-migration activity used to identify home drive data issues such as &lsquo;path too long&rsquo;.<br>
While migration tasks can use agent groups, scanning tasks cannot. Scanning automatically uses the Default Agent group.<br>
If the default group has no agents the scanning task will just wait indefinitely for an agent to be added back to the Default group.</p>
<h3 id="group-migration-batches-by-location">Group migration batches by location</h3>
<p>When you use the bulk migration option, the portal imports a CSV file and assigns all entries to the same Migration Agent.
If you are carrying out migrations in multiple locations, you need to group them by location and split into separate CSV files to make efficient use of the network..</p>
<h3 id="run-satelite-geo-migrations-separately">Run Satelite-geo migrations separately</h3>
<p>If you are in a multi-geo tenant, don&rsquo;t mix geolocations in the same migration batch. Migration to a satellite geo needs a modified process with dedicated or modified agent config.</p>
<p>If you are signed into the SharePoint Online Admin portal &ldquo;central geo&rdquo;, switch to the relevant &ldquo;satellite geo&rdquo; using the link in the top left. The go to  Migrations &gt; File Shares. Initially there will be no agents listed.</p>
<p>Run the agentsetup.exe on the migration server and pause on the first screen of the setup wizard. If the agent is already installed, re-run setup to modify the configuration.</p>
<p>With the setup wizard open, edit the following file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="nv">%temp%</span>\SPMigrationAgentSetup\SPMigrationAgentSetup\Microsoft.SharePoint.Migration.ClientShared.dll.config
</span></span></code></pre></div><p>Under AppSettings, add the following:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl"><span class="p">&lt;</span>add key=GeoLocation value=<span class="s2">&#34;FRA&#34;</span> /&gt;
</span></span></code></pre></div><p>The value must be a <a href="https://learn.microsoft.com/en-us/microsoft-365/enterprise/microsoft-365-multi-geo?view=o365-worldwide#microsoft-365-multi-geo-availability">valid Azure tenant location code</a> that is already enabled in your tenant.</p>
<p>Save the file and continue the setup wizard. The Migration Manager agent will register in the satellite geo and be visible in the SPO Admin Portal for the relevant Geolocation.</p>
<h2 id="timezone-headaches">TIMEZONE HEADACHES</h2>
<p>Migration tasks can either start immediately or at a specified time. However, the time used in the Migration Manager portal is the time zone tenant home location, not the local time of the administrator accessing the portal.<br>
To schedule a migration outside business hours, the administrator must take account of the local time where the agent is based and convert it to the tenant home time zone.</p>
<p>Scanning tasks don&rsquo;t have a scheduling option. They just start immediately, although they use a lot less bandwidth.</p>
<h2 id="false-positive-scan-warnings">FALSE POSITIVE SCAN WARNINGS</h2>
<p>Temporary MS Office files create false positive warnings in the scanning tab and scan reports. There is no way to ignore the false positives.</p>
<p>The purpose of home drive scanning is to highlight problems such as incompatible file names and long paths. However, it is hard to filter out unimportant issues:</p>
<ol>
<li>
<p>Numerous files beginning with tilde are flagged as warnings in every report - e.g. &ldquo;~budget 2020.xlsx&rdquo;. These temporary files created by MS Office are often not cleaned-up when a document is closed, but it is safe to skip them during migration.</p>
</li>
<li>
<p>If folder redirection to the home drive is enabled, the scan will flag a warning on every instance of desktop.ini. Again these warnings can be safely ignored as the files are recreated by Windows if needed.</p>
</li>
</ol>
<p>This isn&rsquo;t to say that the pre-migration scan is a waste of time. It does have some benefits:</p>
<ul>
<li>
<p>confirms the Migration Manager service account has access to the home drive</p>
</li>
<li>
<p>provides statistics such as overall home drive size and number of files</p>
</li>
<li>
<p>highlights long path issues</p>
</li>
</ul>
<h2 id="complex-migration-scheduling">COMPLEX MIGRATION SCHEDULING</h2>
<p>There is nothing in Migration Manager help with user scheduling. Scheduling is required because there is some user impact:</p>
<ul>
<li>User communciation should explain what is changing and link to more information (FAQs, OneDrive training material etc)</li>
<li>Ideally users log off prior to the data copy to prevent issues with files locked in-use</li>
<li>Remote users may need to use PLAP VPN to ensure the home drive mapping is removed at next logon</li>
<li>Post-migration support may be required to help users with the changes (removal of home drive and new data location)</li>
</ul>
<p>If your IT department does not have any scheduling software, you will most likely end-up using spredasheets.</p>
<h2 id="juggling-csv-files">JUGGLING CSV FILES</h2>
<p>An enterprise will need to use the &ldquo;bulk migration&rdquo; option in Migration Manager to migrate large numbers of home drives at a time. This option uses a CSV import to specify source UNC paths and target OneDrive URLs. The CSV must be a set format and a template can be downloaded for this purpose.</p>
<p>The pre-migration file share scan step also uses a CSV file, but unfortuately it uses different fields and headers.</p>
<p>The additional migration steps are likely to also be driven from a list such as a CSV file e.g.</p>
<ul>
<li>Pre-provisioning OneDrives that don&rsquo;t already exist</li>
<li>Removing Active Directory user homeDirectory and homeDrive</li>
<li>Updating folder redirection policies</li>
<li>Updating home drive ACLs or file shares to prevent post-migration access</li>
</ul>
<p>With multiple CSV files in-play and last minute changes to schedules, user scheduling can be complex in its own right.</p>
<h2 id="summary">SUMMARY</h2>
<p>Microsoft Migration Manager is a free but basic migration tool. By the time you have discovered its limitations, you may wish you had paid for an ISV product instead.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Migrate home drives to OneDrive with Microsoft Migration Manager - Pt1</title>
      <link>https://write-verbose.com/2022/06/04/migration-manager-notes1/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2022/06/04/migration-manager-notes1/</guid>
      <description>Things I learned migrating home drives to OneDrive with Migration Manager.</description>
      <content:encoded><![CDATA[<p>Part one of &ldquo;Notes from the Field&rdquo; for a home drive to OneDrive for Business migration using Microsoft Migration Manager, covering migration tool considerations, architecture and access requirements.</p>
<h2 id="tool-selection">TOOL SELECTION</h2>
<p>Migration Manager comes from the Microsoft purchase of <a href="https://mover.io/index.html">Mover.io</a> in 2019. It is presented as an Enterprise migration tool that puts more structure around the migration process than the more basic SharePoint Migration Tool. However, be prepared for limited configuration and customisation options. As a basic guide consider the following tool choices for file share migration:</p>
<ul>
<li>SharePoint Migration Tool : Ad hoc data migrations</li>
<li>Migration Manager : Large scale migrations using repetitive process</li>
<li>3rd Party Tool : When you need a lot of control or have a complex process</li>
</ul>
<h2 id="what-are-complex-requirements">WHAT ARE COMPLEX REQUIREMENTS?</h2>
<p>Migration Manager focuses on the data migration, but for most companies, this is only part of the story. Consider the following:</p>
<ul>
<li>How to move off folder redirection and offline files</li>
<li>Removing the home drive mapping</li>
<li>Cleaning-up or restricting access to home drives</li>
</ul>
<p>A 3rd-party tool, could be more suitable if you are looking to automate as much of the process as possible.For example, <a href="https://sharegate.com/blog/easier-onedrive-for-business-migration">ShareGate Migration Tool</a> provides a PowerShell interface.</p>
<p>Migration Manager is still attractive as it&rsquo;s effectively free as part of an enterprise M365 license.</p>
<h2 id="architecture">ARCHITECTURE</h2>
<p>Migration Manager consists of the following components:</p>
<h3 id="agents">Agents</h3>
<p>Migration Manager agents run on-premises and perform the data migration, reading data from home drives and copying it to OneDrive for Business.<br>
The agent can be installed directly on a file server (assuming it is a Windows Server), but the recommended deployment is on a dedicated server.</p>
<p>The agent sends heartbeat information to the SharePoint Online (SPO) Admin Portal and downloads scanning and migration tasks in return.</p>
<h3 id="sharepoint-online-admin-portal">SharePoint Online Admin Portal</h3>
<p>The SPO Admin Portal is used to manage the agents and assign migration tasks to them. The &ldquo;Migration&rdquo; blade has tabs for scanning, agents and migrations.</p>
<h3 id="file-shares">File shares</h3>
<p>File shares are host the data being migrated. The migration agent service account needs read access to the data and acceses it over SMB.</p>
<h3 id="proxy-server">Proxy server</h3>
<p>The migration agent communicates with an SPO Admin portal endpoint and the Azure blob service over HTTPs. If the company does not have an Express Route, traffic is likely to go through an enterprise proxy server.</p>
<h2 id="a-lot-of-elevated-access">A LOT OF ELEVATED ACCESS</h2>
<blockquote>
<p>If you work with strict security controls, be prepared for Migraton Manager&rsquo;s privileged access requirements:</p>
</blockquote>
<table>
<thead>
<tr>
<th>Account</th>
<th>Permission</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cloud service account</td>
<td>SharePoint Administrator</td>
<td>Agent communication with SPO Admin portal</td>
</tr>
<tr>
<td>Cloud service account</td>
<td>OD4B Site Collection Admin</td>
<td>Agent write access to OneDrives</td>
</tr>
<tr>
<td>On-prem service account</td>
<td>Read Access to Home Drives</td>
<td>Agent read access to home drives</td>
</tr>
<tr>
<td>I.T. admin account</td>
<td>SharePoint Administrator</td>
<td>Scheduling scans and migrations in the SPO Admin portal</td>
</tr>
</tbody>
</table>
<h3 id="why-sharepoint-administrator">Why SharePoint Administrator?</h3>
<p>Under the hood, OneDrive for Business is a personal SharePoint site and from an administrative perspective, Microsoft has done very little to separate OneDrive for Business from SharePoint Online.</p>
<p>There is no OneDrive-specific RBAC. To manage OD4B, you need to be a SharePoint Administrator, and Migration Manager is operated through a blade in the SharePoint Online Admin Console.
The technicians managing and monitoring the data migrations will need the SharePoint Administrator role and so will the Service Account used by the migration agent.</p>
<h3 id="sharepoint-administrator-role-is-not-enough">SharePoint Administrator role is not enough</h3>
<blockquote>
<p>A SharePoint Administrator cannot copy data to OneDrive by default, but they can grant themselves the additional rights needed</p>
</blockquote>
<p>By default, only the owner (user) has access to OneDrive for Business. One option is to define a OD4B Secondary Admin group at the tenant level, but this will only apply to new OneDrives as they are provisioned.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">SPO Admin Portal <span class="p">&gt;</span> Advanced <span class="p">&gt;</span> More Features <span class="p">&gt;</span> Setup My Sites <span class="p">&gt;</span> Secondary Owner
</span></span></code></pre></div><p>For already provisioned OneDrives, use a script to grant the <em>SiteCollectionAdmin</em> permission on each OneDrive to a group containing the Migration Manager cloud service account.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Connect-SPOService</span> <span class="n">-URL</span> <span class="nv">$AdminURL</span>
</span></span><span class="line"><span class="cl"><span class="nb">Set-SPOUser</span> <span class="n">-Site</span> <span class="nv">$UsersOneDriveURL</span> <span class="n">-LoginName</span> <span class="nv">$CloudServiceAccountorGroup</span> <span class="n">-IsSiteCollectionAdmin</span> <span class="nv">$True</span>
</span></span></code></pre></div><p><strong>NOTE</strong>: This command normally expects a user account as the LoginName. If using a group name, it must be in <a href="https://social.technet.microsoft.com/wiki/contents/articles/13921.sharepoint-20102013-claims-encoding.aspx">claims encoded</a> format.</p>
<p>Part two in this series will look at network routing, multi-geo considerations and scheduling issues.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GIT edge cases</title>
      <link>https://write-verbose.com/2021/07/04/gitedgecases/</link>
      <pubDate>Sun, 04 Jul 2021 14:27:50 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/07/04/gitedgecases/</guid>
      <description>&lt;p&gt;Most of the time in GIT we are working at the file level.  It is possible to get more granualar and work with &lt;em&gt;hunks&lt;/em&gt; which are parts of a file e.g. a number of lines.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Most of the time in GIT we are working at the file level.  It is possible to get more granualar and work with <em>hunks</em> which are parts of a file e.g. a number of lines.</p>
<h2 id="using-hunks">Using Hunks</h2>
<p>The <code>--patch</code> option of the <code>git add</code> command causes GIT to automatically split an updated file into hunks.  It then prompts for each hunk and the contributor can decide whether to stage some or all of the hunks.<br>
GIT actually enters a menu system that allows granular control, such as splitting the hunk into smaller units. After adding some hunks but not all to the index, <code>git status</code> shows the same file is ready to be committed and also not yet staged for commit.</p>
<p>There are many commands that can work at the hunk level, including:</p>
<ul>
<li>git checkout</li>
<li>git stash</li>
<li>git reset</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt;git add --patch file.txt <span class="c1"># This command </span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>1/1<span class="o">)</span> Stage this hunk <span class="o">[</span>y,n,q,a,d,s,e,?<span class="o">]</span> ?
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">y - stage this hunk
</span></span><span class="line"><span class="cl">n - <span class="k">do</span> not stage this hunk
</span></span><span class="line"><span class="cl">q - quit
</span></span><span class="line"><span class="cl">a - stage this hunk
</span></span><span class="line"><span class="cl">d - <span class="k">do</span> not stage this hunk or an of the later hunks in the file
</span></span><span class="line"><span class="cl">s - split the current hunk into smaller hunks
</span></span><span class="line"><span class="cl">e - manually edit the current hunk
</span></span><span class="line"><span class="cl">? - print <span class="nb">help</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git status <span class="c1"># After adding some hunks but not all, the status shows the same file is ready to be committed and also not yet staged for commit</span>
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">   modified:  file.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">   modified:   file.txt
</span></span></code></pre></div><h2 id="many-ways-to-reference-a-commit">Many ways to reference a commit</h2>
<p>The <code>git show</code> command provides information about a commit.  The most common way to reference a commit is using its hash (or partial hash), but there are also other ways:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git show 8d4112 <span class="c1">#  use the partial hash to refer to the commit</span>
</span></span><span class="line"><span class="cl">commit 8d411239358d55f45747c401c5c2c3fba8652d71
</span></span><span class="line"><span class="cl">Author: Geoff Dixon &lt;dixon@mail.home&gt;
</span></span><span class="line"><span class="cl">Date:   Mon Jun <span class="m">7</span> 17:44:03 +100
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">&gt; 
</span></span><span class="line"><span class="cl">&gt; git show HEAD <span class="c1"># show information about the latest commit</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git show HEAD^ <span class="c1"># show the parent commit of HEAD</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git show HEAD^^ <span class="c1"># show the second parent of HEAD</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git show HEAD~2 <span class="c1"># show the 2nd commit before HEAD (same as above)</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git show HEAD@<span class="o">{</span><span class="s2">&#34;1 week ago&#34;</span><span class="o">}</span> <span class="c1"># show head 1 week ago</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GitHub - Contribute to a repo using Fork, Clone, Push and Pull Requests</title>
      <link>https://write-verbose.com/2021/06/30/github/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/06/30/github/</guid>
      <description>&lt;p&gt;GitHub hosts open source projects that have multiple contributors. Only a few maintainers have read-write access to the repository, so how do people contribute suggested changes?&lt;/p&gt;
&lt;p&gt;The answer is by copying the repo to their own GitHub account, making changes and submitting a &lt;em&gt;pull request&lt;/em&gt; to the maintainers of the original project. This post explains the steps.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>GitHub hosts open source projects that have multiple contributors. Only a few maintainers have read-write access to the repository, so how do people contribute suggested changes?</p>
<p>The answer is by copying the repo to their own GitHub account, making changes and submitting a <em>pull request</em> to the maintainers of the original project. This post explains the steps.</p>
<h2 id="contributing-on-github">CONTRIBUTING ON GitHub</h2>
<h3 id="forking-a-repo">Forking a repo</h3>
<p>A fork is a clone of the repo on the same hosting provider site (i.e. GitHub). You can view all the forks from the repo home page by clicking on <em>Insights &gt; Forks</em></p>
<p>As an example of how forks are used, the <a href="https://github.com/gohugoio/hugo">Hugo repository on GitHub</a> contains code for a static website generator.  The maintainers of the project have write access and can push changes, but other GitHub users have read access.</p>
<p>Any GitHub contributor can suggest changes by first forking the repo into their own GitHub account. The <em>Fork</em> button at the top-right of the  home page clones the Hugo repo to a copy that appears under the contributors GitHub account. The contributor now has write access to the forked copy, but it isn&rsquo;t that convenient to work directly on GitHub. They need to clone the fork to a GIT repo on their development workstation.</p>
<h3 id="cloning-a-fork">Cloning a fork</h3>
<p>The contributor clones the forked repo to a local GIT repo using <code>git clone &lt;SSH or HTTP address of fork repo&gt;</code>. By default, this clone will track a single remote repo called <em>origin</em> (the fork) that will aceept pushed updates. But how does the local repo keep track of the primary Hugo repo, and how are contributor changes pushed to the original source?</p>
<h3 id="adding-a-second-remote">Adding a second remote</h3>
<p>While the contributor is working on their local changes, the original Hugo repo on GitHub is also getting updates from other contributors. Any conflicts need to be resolved locally rather than expecting the maintainers of the repo to deal with them. So how does the contributor stay up-to-date while working locally on their changes?</p>
<p>The local workstation repo already has a remote (<em>origin</em>, the forked repo on GitHub). Adding the original Hugo repo as a second remote allows the local repo to pull chages from other contributors. This second remote is usually called <em>upstream</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git remote -v <span class="c1"># show current remote repos</span>
</span></span><span class="line"><span class="cl">origin  https://github.com/myaccount/myfork.git <span class="o">(</span>fetch<span class="o">)</span>
</span></span><span class="line"><span class="cl">origin  https://github.com/myaccount/myfork.git <span class="o">(</span>push<span class="o">)</span>
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git remote add upstream https://github.com/sourcerepo/sourceproject.git <span class="c1"># Add a second remote pointing to upstream</span>
</span></span></code></pre></div><h3 id="how-to-push-changes-to-upstream">How to push changes to upstream</h3>
<p>The final piece of the puzzle, is how to get the contributor&rsquo;s changes into the upstream repo without having write access.</p>
<p>GIT itself doesn&rsquo;t offer a solution to this, but GitHub does hence it&rsquo;s popularity for open source projects.<br>
First the contributor pushes their local repo changes to the GitHub fork (origin) using standard GIT commands. Next the contributor creates a <em>pull request</em> asking the maintainers of the <em>upstream</em> source repo to pull changes from the fork.  The pull request is a messaging system that describes the changes and enables differencing checks.</p>
<p>The maintainers of the upstream repo can review and comment on the changes, possibly asking for changes before pulling and merging them into the original repo.</p>
<h2 id="using-git-diff-and-blame">Using GIT Diff and Blame</h2>
<p>DIFF and BLAME are useful when reviewing a pull request or the project history.</p>
<p><code>git blame</code> shows the file history on a line-by-line basis.<br>
For each line, it displays the last commit where a line was changed, who made the change and when.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git blame .<span class="se">\i</span>ndex.md
</span></span><span class="line"><span class="cl">cf6ff2bb <span class="o">(</span>GD 2021-05-05 22:09:05 +0100   1<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">cf6ff2bb <span class="o">(</span>GD 2021-05-05 22:09:05 +0100   2<span class="o">)</span> author: GD
</span></span><span class="line"><span class="cl">cf6ff2bb <span class="o">(</span>GD 2021-05-05 22:09:05 +0100   3<span class="o">)</span> ---
</span></span><span class="line"><span class="cl">cc0e10d2 <span class="o">(</span>GD 2021-05-11 15:55:25 +0100   4<span class="o">)</span> **This is the first post in a series on creating a graph database CMDB.**
</span></span><span class="line"><span class="cl">cf6ff2bb <span class="o">(</span>GD 2021-05-05 22:09:05 +0100   5<span class="o">)</span>
</span></span><span class="line"><span class="cl">7c78446d <span class="o">(</span>GD 2021-05-24 19:50:01 +0100   6<span class="o">)</span> Part 1: This article
</span></span><span class="line"><span class="cl">7c78446d <span class="o">(</span>GD 2021-06-24 21:03:19 +0100   7<span class="o">)</span> Part 2: How to <span class="nb">export</span> computer information from Microsoft Active Directory using PowerShell, <span class="k">for</span> use in a Neo4j CMDB
</span></span></code></pre></div><p><code>git diff</code> shows the differences between commits or between the git areas (working directory, index, repo). For example, to show the differene between the current commit and back two commits:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git diff HEAD HEAD~2 <span class="c1"># show the difference between the current position of HEAD and 2 commits before HEAD</span>
</span></span><span class="line"><span class="cl">diff --git a/content/blog/gitnotes/index.md b/content/blog/gitnotes/index.md
</span></span><span class="line"><span class="cl">index 10fa938..cc16e9f <span class="m">100644</span>
</span></span><span class="line"><span class="cl">--- a/content/blog/gitnotes/index.md  
</span></span><span class="line"><span class="cl">+++ b/content/blog/gitnotes/index.md
</span></span><span class="line"><span class="cl">@@ -14,48 +14,31 @@ 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-The version control system GIT can seem complex, but an understanding of the internal working can <span class="nb">help</span> with day-to-day use and is essential to get yourself out of an unexpected state. This article covers the basics of how git works, exploring the files in the object database and laying a foundation <span class="k">for</span> you to explore futher on your own.
</span></span><span class="line"><span class="cl">+An understanding of git internals helps with day-to-day use and is essential <span class="k">if</span> you need to get yourself out of an unexpected state. This article covers the basics of how git works, allowing you to explore further on your own.
</span></span></code></pre></div><p>The first line shows the diff command <code>diff --git...</code><br>
The next line is git metadata that isn&rsquo;t normally needed <code>index 10fa938..cc16e9f 100644</code><br>
The next two lines show assign symbols to the two versions of the index.md file i.e changes from HEAD are marked with &ldquo;&mdash;&rdquo; and tchanges from HEAD~2 are marked with &ldquo;+++&rdquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--- a/content/blog/gitnotes/index.md  
</span></span><span class="line"><span class="cl">+++ b/content/blog/gitnotes/index.md
</span></span></code></pre></div><p>The next line represents the header of a hunk (portion) of the file showing the lines that have been modified. In this case, 48 lines were removed at line 14 and 31 lines added at line 14. Realistically, when lines are removed and added at the same location it is a modification of the lines.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">@@ -14,48 +14,31 @@
</span></span></code></pre></div><p>Finally, the actual lines that are removed and added are displayed. The &ldquo;-&rdquo; at the start of the line means it was removed. The &ldquo;+&rdquo; at the start of the line means it was added. The line was actually edited to change some of the words.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">-The version control system GIT can seem complex...
</span></span><span class="line"><span class="cl">+An understanding of git internals helps...
</span></span></code></pre></div><p>Another way to view the differences is using the <code>--color-words</code> option. This shows the changes in-line using red for removed and green for added i.e.</p>
<p><code>git diff --color-words HEAD HEAD~2</code></p>
<h3 id="what-else-can-you-compare-with-git-diff">What else can you compare with GIT DIFF?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git diff <span class="c1"># show uncommited changes since the last commit</span>
</span></span><span class="line"><span class="cl">&gt; 
</span></span><span class="line"><span class="cl">&gt; git diff --cached <span class="c1"># compare the repo HEAD to the index</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git diff feature1 main <span class="c1"># compare two branches</span>
</span></span></code></pre></div><h3 id="how-to-see-a-diff-of-every-commit">How to see a diff of every commit</h3>
<p>The <code>git log</code> command has an option to diff every commit. This obviously produces a lot of output.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git log --patch
</span></span></code></pre></div><h3 id="how-to-compare-the-list-of-commits-between-two-branches">How to compare the list of commits between two branches</h3>
<p>Rather than looking at the changes in the commits. You will sometimes want to just look at the history of commits and understand which are only in one branch compared to another. <code>git log</code> can also help here:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git log feature1..main --oneline <span class="c1"># Compare the feature1 branch to main showing the commits only in main</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GIT branches - merging, rebasing and squashing commits</title>
      <link>https://write-verbose.com/2021/06/27/usinggit/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/06/27/usinggit/</guid>
      <description>&lt;p&gt;This article focuses on common GIT actions that affect branches, such as merging, rebasing branches and squashing local commits.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This article focuses on common GIT actions that affect branches, such as merging, rebasing branches and squashing local commits.</p>
<h2 id="merge">MERGE</h2>
<p>Merging brings changes from one branch into another. A feature branch is often created to work on a particular update. When complete, the branch needs to be merged back into &ldquo;main&rdquo;. The process would be as follows:</p>
<p>First switch to the main branch using either <code>git switch main</code> or <code>git checkout main</code>.<br>
Next merge the featureA branch into main using <code>git merge featureA</code>.</p>
<p>GIT will create a new commit with the merged changes. This is a special commit as it has two parents - the previous commit on main and the previous commit on the featureA branch. The main branch is updated to point to this new commit and HEAD continues to point to main. FeatureA still points to the last commit on that branch.</p>
<h2 id="conflicts">CONFLICTS</h2>
<p>If a conflict is detected during a merge, GIT will interupt the process and prompt for user action<br>
GIT will be in a special state where it expects the conflict to be resolved before continuing.<br>
<code>git status</code> at this point shows the message &ldquo;you have unmerged paths&hellip;fix conflicts and run <code>git commit</code>&hellip;use <code>git merge --abort</code> to abort the merge&rdquo;.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">You have unmerged paths.
</span></span><span class="line"><span class="cl">  <span class="o">(</span>fix conflicts and run <span class="s2">&#34;git commit&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Unmerged paths:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to mark resolution<span class="o">)</span>
</span></span><span class="line"><span class="cl">        both modified:   consolidate.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span></code></pre></div><p>GIT will display the files that have conflicts.  The problem can be resolved at the command line, but a graphical diff tool such as <a href="https://www.perforce.com/products/helix-core-apps/merge-diff-tool-p4merge">p4merge</a> may be better.</p>
<p>If you open the files in a basic text editor you will see GIT has marked the conflicts.<br>
In the example below, the file &ldquo;consolidate.py&rdquo; is in conflict. GIT has updated the file with markers showing the lines that need attendtion. The HEAD section shows the lines as they appear in the current branch (main).  Then there is a section break and directly below are the same lines as they appear in the <em>featureA</em> branch.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">import sys
</span></span><span class="line"><span class="cl"><span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
</span></span><span class="line"><span class="cl"><span class="nv">name</span><span class="o">=</span><span class="nb">read</span> <span class="s2">&#34;Enter your name&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">age</span><span class="o">=</span><span class="nb">read</span> <span class="s2">&#34;Enter your age&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">=======</span>
</span></span><span class="line"><span class="cl"><span class="nb">read</span> <span class="s2">&#34;Please enter your name&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">read</span> <span class="s2">&#34;Enter your age&#34;</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt;&gt;&gt;&gt;&gt; featureA
</span></span></code></pre></div><p>To resolve the conflict, manually edit the file so it reflects the desired state and remove the markers and section break.<br>
Save the file,  add it to the GIT index, then commit the change to complete the merge, as shown below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git add consolidate.py
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git commit
</span></span><span class="line"><span class="cl"><span class="o">[</span>main 1aca0e1<span class="o">]</span> Introduce featureA that enables user input
</span></span></code></pre></div><p>In summary:</p>
<ol>
<li>Switch to the branch you are merging into (e.g. <code>git switch main</code>)</li>
<li>Merge the required branch into the current branch (i.e. <code>git merge feature1</code>)</li>
<li>Fix any conflict by editing the file</li>
<li>Add the updated file to the index (<code>git add &lt;file&gt;</code>)</li>
<li>Commit to complete the merge (<code>git commit</code>)</li>
</ol>
<h2 id="fast-forward-merge">FAST FORWARD MERGE</h2>
<p>A fast foward merge occurs automatically when git moves a branch without having to create a new commit. It just re-uses an existing commit.<br>
The most common case is when you want to merge a feature branch into main, but then continue working on the Feature branch with the latest updates from main.<br>
When you first merge the branch into main, GIT creates a new commit on main that has two parents - the previous commit on main and the previous commit on the branch.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git switch main
</span></span><span class="line"><span class="cl">❯ git merge featureA
</span></span></code></pre></div><p>The status is now:</p>
<ul>
<li>main branch: contains the latest changes and any conflict resolutions</li>
<li>featureA branch: contains the working feature before the merge into main</li>
</ul>
<p>To continue developing on featureA, you need to merge main back into the featureA branch so it has the latest updates</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git switch featureA
</span></span><span class="line"><span class="cl">❯ git merge main
</span></span></code></pre></div><p>At this point, GIT realises that there is already a commit that has the merged contents of featureA and main, so it just re-uses this commit.  The merge message shows it performed a &ldquo;fast-forward merge&rdquo;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git merge main
</span></span><span class="line"><span class="cl">Updating 68a874e..1aca0e1
</span></span><span class="line"><span class="cl">Fast-forward
</span></span><span class="line"><span class="cl"> consolidate.py <span class="p">|</span> <span class="m">6</span> +++---
</span></span><span class="line"><span class="cl"> orders.py      <span class="p">|</span> <span class="m">4</span> ++++
</span></span><span class="line"><span class="cl"> <span class="m">2</span> files changed, <span class="m">7</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">3</span> deletions<span class="o">(</span>-<span class="o">)</span>
</span></span></code></pre></div><h2 id="detached-head">DETACHED HEAD</h2>
<p>HEAD is a reference to a branch or a commit. Normally HEAD points to the current branch and thereby indirectly to the latest commit on that branch.  <em>Detached head</em> is a state where the HEAD is not referencing a branch, it is pointing to an older commit.</p>
<p>Why would this happen?  Perhaps you want to do some experimentation without creating a branch.  You would checkout a commit rather than creating a branch.  At this point HEAD is no longer tracking a branch and so it is detached. It acts like a temporary branch. After making some commits, you could do one of the following:</p>
<p>a) Switch back to a branch<br>
b) Put a branch on the current commit</p>
<p>If you switch back to a branch, any previous commits outside a branch are isolated in the object database and are not referenced by any branch. Eventually they will be removed by the GIT garbage collector.</p>
<p>Alternatively, <code>git branch &lt;branchname&gt;</code> can be used to put a branch on the current commit. At this point it is like any other branch and HEAD is no longer detached.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git checkout 460ce0e
</span></span><span class="line"><span class="cl">Note: switching to <span class="s1">&#39;460ce0e&#39;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">You are in <span class="s1">&#39;detached HEAD&#39;</span> state. You can look around, make experimental
</span></span><span class="line"><span class="cl">changes and commit them, and you can discard any commits you make in this
</span></span><span class="line"><span class="cl">state without impacting any branches by switching back to a branch.
</span></span></code></pre></div><h2 id="rebase">REBASE</h2>
<p>Rebase is an alternative to a merge.  It changes the base of a branch, effectively adding it to the top of another branch as if the changes were sequential rather than created in parallel.</p>
<p>The rebase process looks at the first commit that is shared by two branches and uses the next commit as the base of the branch being rebased.  It detaches this branch and re-attaches it to the head of the other branch. Under the hood, the commits do not actually move, new commits are created that are copies of the original commits on the branch. GIT moves the branch and the original commits become orphaned and eventually garbage collected.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git switch featureA <span class="c1"># make featureA the current branch</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git rebase main <span class="c1"># rebase the featureA branch onto main</span>
</span></span></code></pre></div><h3 id="why-use-rebase">Why use Rebase?</h3>
<p>Rebase can help to simplify the history of a project. If there is a lot of merging it can complicate the history.<br>
Howver, use with caution. Rebased history is not the true history, so merging is safer.</p>
<h3 id="squashing-commits">Squashing commits</h3>
<p><em>Squashing</em> re-writes the GIT history, making two or more commits appear as if they were a single commit. Why would you want to do this?  Developers often commit very frequently when working locally on a feature, but don&rsquo;t want to complicate the shared history with all these individual commits.  Squashing commits before merging or pushing to an origin repo simplifies the history in a large project.</p>
<p>The interactive mode of <code>git rebase</code> is used to squash commits. This is totally different to the basic use of rebase. A starting point commit must be specified as we don&rsquo;t normally want to edit the entire history. The starting point is excluded from the list and the interactive mode starts from the next commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git rebase --interactive 80f137
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pick fd4d8d9 Updates Adsense css
</span></span><span class="line"><span class="cl">pick 8d41123 Adds adsense css
</span></span><span class="line"><span class="cl">pick 9b2aafa Adds article
</span></span><span class="line"><span class="cl">pick 32735fb Fixes error in  post
</span></span><span class="line"><span class="cl">pick 7f0063a Fixes typo
</span></span><span class="line"><span class="cl">pick c85a17f Adds article
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Rebase 55a0831..c85a17f onto 55a0831 (6 commands)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Commands:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># p, pick &lt;commit&gt; = use commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span>
</span></span><span class="line"><span class="cl"><span class="c1"># e, edit &lt;commit&gt; = use commit, but stop for amending</span>
</span></span><span class="line"><span class="cl"><span class="c1"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># f, fixup &lt;commit&gt; = like &#34;squash&#34;, but discard this commit&#39;s log message</span>
</span></span><span class="line"><span class="cl"><span class="c1"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span>
</span></span><span class="line"><span class="cl"><span class="c1"># b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># d, drop &lt;commit&gt; = remove commit</span>
</span></span><span class="line"><span class="cl"><span class="c1"># l, label &lt;label&gt; = label current HEAD with a name</span>
</span></span><span class="line"><span class="cl"><span class="c1"># t, reset &lt;label&gt; = reset HEAD to a label</span>
</span></span><span class="line"><span class="cl"><span class="c1"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># .       create a merge commit using the original merge commit&#39;s</span>
</span></span><span class="line"><span class="cl"><span class="c1"># .       message (or the oneline, if no original merge commit was</span>
</span></span><span class="line"><span class="cl"><span class="c1"># .       specified). Use -c &lt;commit&gt; to reword the commit message.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># These lines can be re-ordered; they are executed from top to bottom.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># If you remove a line here THAT COMMIT WILL BE LOST.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># However, if you remove everything, the rebase will be aborted.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span></code></pre></div><p>An interactive editor opens as shown above.  The commits are listed (in reverse order compared to most git commands). The editor gives the commands - such as pick, reword etc.</p>
<p>By default all commits are on a line that starts with &ldquo;pick&rdquo;. Editing these lines will modify the history.<br>
For example, you can move entire lines to change the order of commits.
Changing &ldquo;pick&rdquo; to &ldquo;squash&rdquo;  will cause the commit to be merged with the one above and GIT will prompt to select or edit one of the two commit messages.</p>
<h3 id="the-golden-rule-of-rebase">The golden rule of Rebase</h3>
<p>Rebasing can lead to problems when sharing a repo across a team. The purpose of the rebase is to simplify history, but it can lead to duplication in the GIT multi-master sharing model.  The golden rule is therefore:</p>
<blockquote>
<p>Never rebase shared commits. Only use rebase for commits that have not yet been shared.</p>
</blockquote>
<h2 id="ammending-a-commit">Ammending a commit</h2>
<p>If you want to update the latest commit to add additional files, add them to the index then use the <code>--ammend</code> option on <code>git commit</code>. This will create a new commit with the additional files and leave the previous commit as an orphan that will eventually get garbage collected. You can only use this option to update the latest commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git commit --ammend 
</span></span></code></pre></div><h2 id="tags">TAGS</h2>
<p>Tags are labels for a commit. Tags are normally used to mark releases.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git tag version1_0 -a -m <span class="s2">&#34;First version. Basic features&#34;</span> <span class="c1"># Create a new annotated tag</span>
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git tag version2_0 <span class="c1"># Create a lightweight tag (not annotated)</span>
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git tag <span class="c1"># get a list of tags</span>
</span></span></code></pre></div><p>Tags are rederences to a commit, but unlike branches, tags never move.</p>
<h2 id="clone">CLONE</h2>
<p><code>git clone</code> is used to copy an existing repository into an empty local folder. The copy contains the working files and the full GIT history.<br>
The existing repo can be local or remote. It can be referenced by an SSH or HTTP address. By default, it will clone the branch HEAD is pointing to, but this can be modified using the <code>-branch</code> option.</p>
<p>The command is mostly used to clone a repo from a hosting service such as Github - so it can be edited locally and then pushed back up to Github.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git clone https://github.com/myaccount/myrepo <span class="c1"># clone a repo from Github into the current local folder</span>
</span></span></code></pre></div><p>The source repo is registered as a &ldquo;remote&rdquo; called <em>origin</em> by default. <code>git status</code> will show if the local branch is ahead or behind the remote branch.</p>
<p>The information about the remote repo is stored in the /git/config file. The remote branches are tracked by objects in the <em>.git/refs/remotes folder</em>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git show-ref main <span class="c1"># show all branches that have main in the name and the commit they are pointing to</span>
</span></span><span class="line"><span class="cl">8195805D refs/heads/main
</span></span><span class="line"><span class="cl">B05DB506 refs/remotes/origin/main
</span></span></code></pre></div><p>If the local repo is in-sync with the remote, they will be pointing to the same commit, i.e. the hashes above would be the same.</p>
<p>The <code>git clone -bare</code> option will clone the history but not the working area. It will also not setup the original source as a remote. This  can be used to create a central repo that is just a source for cloning and not worked on directly.</p>
<h2 id="push--fetch--pull">PUSH / FETCH / PULL</h2>
<p><code>git push</code> is used to send local changes to the remote origin repo.  But what happens if there have been other changes on the remote before we push and we now have a conflict?</p>
<p>The answer is to fetch the remote changes and resolve the conflict locally before pushing. There is a comand to get the latest changes from the remote - <code>git fetch</code>, but rather than fetching and then merging in two steps, the <code>git pull</code> command peforms a fetch and merge in one command.</p>
<p>When working with a remote, you should always pull before pushing.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git pull origin
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GIT storage - understanding the stash, working, index, repo</title>
      <link>https://write-verbose.com/2021/06/24/gitandthefourareas/</link>
      <pubDate>Thu, 24 Jun 2021 17:45:34 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/06/24/gitandthefourareas/</guid>
      <description>&lt;p&gt;GIT commands move data between four areas of the object database. This article explores the four areas and the common commands that affect them.&lt;/p&gt;
&lt;p&gt;See the earlier post on &lt;a href=&#34;https://write-verbose.com/2021/06/17/git-cheatnotes/&#34;&gt;How GIT stores information&lt;/a&gt; for information on the GIT object database.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>GIT commands move data between four areas of the object database. This article explores the four areas and the common commands that affect them.</p>
<p>See the earlier post on <a href="/2021/06/17/git-cheatnotes/">How GIT stores information</a> for information on the GIT object database.</p>
<h2 id="what-are-the-four-areas-git-uses">What are the four areas GIT uses?</h2>
<ol>
<li>The <em>Working Area</em> stores project source files updated directly by a code editor</li>
<li>The <em>Index</em> (or Staging Areas) tracks which files from the working area included in the next commit</li>
<li>The <em>Repository</em> (or Repo) is the most important area, where GIT stores snapshots of the tracked files, called <em>commits</em></li>
<li>The <em>Stash</em> is a temporary area, a bit like a clipboard, that can store and retrieve a saved copy of the working area and index</li>
</ol>
<p>Understanding git requires understanding how commands move data between these four areas.</p>
<p><img loading="lazy" src="/assets/images/gitnotes-git1.jpg" alt="FourAreas"  />
</p>
<h2 id="git-status">GIT STATUS</h2>
<p><code>git status</code> is one of the most important commands. It shows the status of the working area and index. The most common output shows untracked files and modified files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">nothing to commit, working tree clean
</span></span></code></pre></div><h3 id="new-files">New files</h3>
<p>When a file is created or copied into the project, it only exists in the working area. <code>git status</code> will show the file as <em>untracked</em>. It has not been added to the index (staging) area and will not be part of the next commit until added. The status command shows the list of new files and suggests how to add them to the index.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Untracked files:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to include in what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">        consolidate.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nothing added to commit but untracked files present <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> to track<span class="o">)</span>
</span></span></code></pre></div><h3 id="modified-files">Modified files</h3>
<p>Files added to the index are tracked by GIT. When a tracked file is updated or modified, <code>git status</code> shows the it as <em>modified</em> and not yet staged for commit. The working area version has changed, but GIT is only tracking the previous version in the index. The updated file needs to be added to the index to be included in the next commit. The status command shows the modified files and suggests actions to take.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes not staged <span class="k">for</span> commit:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   consolidate.py
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
</span></span></code></pre></div><h3 id="changes-not-committed">Changes not committed</h3>
<p><code>git status</code> also shows changes in the index but not yet committed to the repo. These could be new and/or modified files.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Changes to be committed:
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span class="o">)</span>
</span></span><span class="line"><span class="cl">        modified:   consolidate.py
</span></span></code></pre></div><h3 id="remote">Remote</h3>
<p>A <em>remote</em> is a linked repository, for example, a central source repo that the local repo was originally cloned from. GIT maintains the link to the remote and tracks differences. By default, the remote is named <em>origin</em>. <code>git status</code> will show if the remote repo is ahead or behind the current local commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git status
</span></span><span class="line"><span class="cl">On branch master
</span></span><span class="line"><span class="cl">Your branch is ahead of <span class="s1">&#39;origin/master&#39;</span> by <span class="m">1</span> commit.
</span></span><span class="line"><span class="cl">  <span class="o">(</span>use <span class="s2">&#34;git push&#34;</span> to publish your <span class="nb">local</span> commits<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nothing to commit, working tree clean
</span></span></code></pre></div><h2 id="git-add">GIT ADD</h2>
<p>The <code>git add</code> command updates the index (staging) area to track new files or add new versions of already tracked files.  The most common parameters are as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git add mynewfile.txt <span class="c1"># stage a specific file in the index</span>
</span></span><span class="line"><span class="cl">❯ git add folder1/ <span class="c1"># stage all new and modified files in folder1</span>
</span></span><span class="line"><span class="cl">❯ git add -A <span class="c1"># stage all new and modified files in the entire project</span>
</span></span><span class="line"><span class="cl">❯ git add . <span class="c1"># same as above</span>
</span></span><span class="line"><span class="cl">❯ git add -i <span class="c1"># interactive mode. Prompts for a decision on a file-by-file basis</span>
</span></span></code></pre></div><h2 id="git-diff">GIT DIFF</h2>
<p><code>git diff</code> shows differences between the GIT areas, such as between the working area and index, or between the index and repo. Differences are displayed at the command line. <code>git diff</code> is convenient for quick checks and small changes. Graphical tools may be better suited for complex comparisons.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git diff <span class="c1"># shows differences between the working area and index</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git diff --cached <span class="c1"># shows differences between the index and repo</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">diff --git a/consolidate.py b/consolidate.py
</span></span><span class="line"><span class="cl">index de10111..97f66ce <span class="m">100644</span>
</span></span><span class="line"><span class="cl">--- a/consolidate.py
</span></span><span class="line"><span class="cl">+++ b/consolidate.py
</span></span><span class="line"><span class="cl">@@ -1 +1,2 @@
</span></span><span class="line"><span class="cl"> import sys
</span></span><span class="line"><span class="cl">+print <span class="o">(</span>sys.version<span class="o">)</span>
</span></span></code></pre></div><p>In the example output above, there is a difference between the index and the repo. A line has been added in the index version, indicated by the &ldquo;+&rdquo; symbol.</p>
<h2 id="git-commit">GIT COMMIT</h2>
<p>The <code>git commit</code> command creates a point-in-time snapshot of tracked files in the repo. New and modified files from the index are added to the repo as new objects. Unchanged files are just referenced by a link to the existing object in the repo. The commit itself is an object in the repository, pointing to a tree and any parent commit.<br>
A commit is named using a SHA1 hash. It can be referenced in commands using just the first few characters of the hash (enough that it is not ambiguous).</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git commit -m <span class="s2">&#34;Enabled handling of user input&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>main b9b6064<span class="o">]</span> Enabled handling of user input
</span></span><span class="line"><span class="cl"> <span class="m">1</span> file changed, <span class="m">1</span> insertion<span class="o">(</span>+<span class="o">)</span>, <span class="m">1</span> deletion<span class="o">(</span>-<span class="o">)</span>
</span></span></code></pre></div><p>In the output above, a new commit is created on the main branch with partial SHA1 hash <em>b9b6064</em></p>
<h2 id="git-branch">GIT BRANCH</h2>
<p>A branch is just a reference to a commit. Creating a branch does not actually change objects in the repo, it just creates a named pointer to an existing commit.
If you are on the <em>main</em> branch and create a new branch called <em>dev</em>, GIT adds a new <em>dev</em> object in the .git/refs folder pointing to the current commit. Initially both branches are pointing to the same commit.<br>
The <code>git branch</code> command shows the current branches or creates a new branch, but does not switch to it. The asterisk in the output below shows that after creating a new <em>dev</em> branch, main is still the current branch:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git branch dev <span class="c1"># create a new branch. </span>
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git branch <span class="c1"># show branches</span>
</span></span><span class="line"><span class="cl">  dev
</span></span><span class="line"><span class="cl">* main
</span></span></code></pre></div><h2 id="git-switch">GIT SWITCH</h2>
<p><code>git switch</code> is a relatively new command that switches between branches. It does not make changes to the repo, but it does affect the working area and index. When you switch to another branch, the GIT <em>HEAD</em> reference is updated to point to the selected branch. The branch refers to a commit and the files and folders in the working area and index are replaced by the files in this commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git switch dev
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;dev&#39;</span>
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git branch
</span></span><span class="line"><span class="cl">* dev
</span></span><span class="line"><span class="cl">  main
</span></span></code></pre></div><p>You can create a branch and switch to it with the <code>-c</code> option</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git switch -c feature
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s1">&#39;feature&#39;</span>
</span></span></code></pre></div><h2 id="git-checkout">GIT CHECKOUT</h2>
<p>When it comes to moving between branches, <code>git checkout</code> is almost identical to <code>git switch</code>. The checkout command has been around for much longer and has options that perform other actions. The variety of uses for the checkout command was deemed confusing and switch was introduced to focus purely on moving between branches.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git checkout dev <span class="c1"># change to the dev branch</span>
</span></span><span class="line"><span class="cl">Switched to branch <span class="s1">&#39;dev&#39;</span>
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git branch <span class="c1"># show &#39;dev&#39; is now the current branch</span>
</span></span><span class="line"><span class="cl">* dev
</span></span><span class="line"><span class="cl">  feature
</span></span><span class="line"><span class="cl">  main
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git checkout -b feature2 <span class="c1"># create a new branch and switch to it</span>
</span></span><span class="line"><span class="cl">Switched to a new branch <span class="s1">&#39;feature2&#39;</span>
</span></span><span class="line"><span class="cl">❯
</span></span><span class="line"><span class="cl">❯ git branch <span class="c1"># show &#39;feature2&#39; is not the current branch</span>
</span></span><span class="line"><span class="cl">  dev
</span></span><span class="line"><span class="cl">  feature
</span></span><span class="line"><span class="cl">* feature2
</span></span><span class="line"><span class="cl">  main
</span></span></code></pre></div><h2 id="git-log">GIT LOG</h2>
<p><code>git log</code> shows the history of commits and branches. It does not make any changes to the repo, index or working area. Use the &ndash;graph option to see a basic diagram of branches and merges:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git log --oneline --graph --decorate
</span></span><span class="line"><span class="cl">*   a7d531d <span class="o">(</span>HEAD -&gt; main<span class="o">)</span> Merge Feature2, resolve conflict in orders.py
</span></span><span class="line"><span class="cl"><span class="p">|</span><span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="p">|</span> * d0773eb <span class="o">(</span>feature2<span class="o">)</span> Adds input validation to orders.py
</span></span><span class="line"><span class="cl">* <span class="p">|</span> bba3001 Modifies output in orders.py
</span></span><span class="line"><span class="cl"><span class="p">|</span>/
</span></span><span class="line"><span class="cl">* 460ce0e Enables user input
</span></span><span class="line"><span class="cl">* b9b6064 Creates orders.py
</span></span></code></pre></div><h2 id="git-reset">GIT RESET</h2>
<p><code>git reset</code> is used to rollback to a previous commit. It can affect the repo, the index and the working area depending on the parameters.<br>
A common use case is to abandon some changes that have been committed and revert to a previous version of the project. Another is to abandon changes in the working area and revert to the last commit in the repo.</p>
<p>The reset command will move the current branch to the specified commit. By default, it will also overwrite the index with the contents of the commit. If you want to completely remove all traces of the unwanted change, you can also overwrite the working area using the &ndash;hard option</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git log --oneline <span class="c1"># show the history of commits</span>
</span></span><span class="line"><span class="cl">848eae0 <span class="o">(</span>HEAD -&gt; main<span class="o">)</span> Adds search to <span class="m">404</span> page
</span></span><span class="line"><span class="cl">364b33f Changes format of <span class="m">404</span> page
</span></span><span class="line"><span class="cl">d4ff0dc Modifies position of search box 
</span></span><span class="line"><span class="cl">c55dbb1 Enables comments
</span></span><span class="line"><span class="cl">cccb986 Adds home page, header and footer
</span></span><span class="line"><span class="cl"><span class="m">4478398</span> Initial commit
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git reset --hard d4ff0dc  <span class="c1"># Rollback the repo two commits, overwriting the index and working area</span>
</span></span><span class="line"><span class="cl">HEAD is now at d4ff0dc Modifies position of search box
</span></span></code></pre></div><p>Other options are:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git reset --mixed d4ff0dc <span class="c1"># Rollback the repo two commits but only overwrite the index. The working area is not touched. This is also the default if no options are specified.</span>
</span></span><span class="line"><span class="cl">&gt; git reset --soft d4ff0dc <span class="c1"># Rollback the repo two commits, but don&#39;t touch the index or working area</span>
</span></span></code></pre></div><h3 id="head-reset">HEAD RESET</h3>
<p><code>git reset HEAD</code> is a quick way to return the index/working area to the committed state of the repo. This is an unsual reset as it doesn&rsquo;t actually change anything in the repo.</p>
<p>HEAD is usually poiting to the latest commit on the current branch.  Resetting the repo to HEAD changes nothing in the repo, but by default it will perform a <em>mixed</em> reset, overwriting the index.  We can also use the &ndash;hard option to overwrite both the index and working area:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git reset --hard HEAD
</span></span></code></pre></div><h2 id="git-stash">GIT STASH</h2>
<p>The Stash is a temporary storage area to save the working area and index when you need to working on another feature. You don&rsquo;t want to lose or commit what you are currently working on, so you stash the changes, work on something else and then retrieve them later.  Its a bit like saving something in a clipboard.</p>
<p>When you run <code>git stash</code>, GIT copies tracked files in the working area and index that aren&rsquo;t in the current commit and saves them to the stash. It then checks out the current commit (overwriting the working area and index so they match the repo).</p>
<p>When ready to restore the stashed files, run <code>git stash apply</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; git stash --include-untracked  <span class="c1"># Save changes to the stash including untracked files</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git stash list <span class="c1"># List the contents of the stash. This is an array of saves starting with zero</span>
</span></span><span class="line"><span class="cl">&gt;
</span></span><span class="line"><span class="cl">&gt; git stash apply <span class="c1"># Copies the latest entry in the stash to the working area and index. You can also specify an array element number if you don&#39;t want the latest</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>GIT basics - under-the-hood</title>
      <link>https://write-verbose.com/2021/06/17/git-cheatnotes/</link>
      <pubDate>Thu, 17 Jun 2021 20:11:34 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/06/17/git-cheatnotes/</guid>
      <description>&lt;p&gt;GIT has become the de-facto version control system, but it can get complicated quickly. A look under-the-hood can help with day-to-day use and file recovery. This article explores the files in the object database laying a foundation for more advanced use.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>GIT has become the de-facto version control system, but it can get complicated quickly. A look under-the-hood can help with day-to-day use and file recovery. This article explores the files in the object database laying a foundation for more advanced use.</p>
<h2 id="how-does-git-store-objects">HOW DOES GIT STORE OBJECTS?</h2>
<p>GIT stores information in the hidden <code>.git</code> folder in the root of the project. The folder is created when a repository is initialized using <code>git init</code></p>
<blockquote>
<p>Commits, trees and blobs are the fundamental objects in GIT</p>
</blockquote>
<p>They are stored in the .git/objects folder:</p>
<ul>
<li>Commits are a point in time reference to a tree</li>
<li>Trees represent folders</li>
<li>Blobs represent files*</li>
</ul>
<p>*Blobs can also represent &ldquo;hunks&rdquo; (chunks of a file), but thats a more advanced topic for another article</p>
<h2 id="whats-with-all-the-sha1-hashes">WHAT&rsquo;S WITH ALL THE SHA1 HASHES?</h2>
<p>GIT creates a SHA1 checksum for each object and stores them in files under the.git/objects folder. The files are named after the SHA1 hash which means objects in the database are immutable - they cannot change. Modified files always result in new objects with a new hash, rather than updating the existing.</p>
<p>GIT uses the hash values to determine which files have been modfied during a commit. New and modified files are added as new blobs. Unchanged files are just referenced, keeping the existing blob.</p>
<p>To avoid storing everything in one folder, git creates subfolders under .git/objects. The subfolder folder names are the first two characters of the SHA1 hash and the objects are grouped in these subfolders. The filename in the subfolder is the remaining characters of the hash.<br>
For example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ ls .git/objects
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">00</span>
</span></span><span class="line"><span class="cl">00/24a57c6cee77755693e0514f244b1cfa5e645d
</span></span><span class="line"><span class="cl">00/5b63f2cf1d596fa3f88834b98272a9d1bf9fc3
</span></span><span class="line"><span class="cl">00/f823e0b5420e1051c80e0b37922409125e9156
</span></span><span class="line"><span class="cl"><span class="m">01</span>
</span></span><span class="line"><span class="cl">01/28a8cb2ac88861ec18599c0b05f9481bdd3600
</span></span><span class="line"><span class="cl">01/8c65d03d8269df96a7da4c3de1a62cd1d1c0ab
</span></span><span class="line"><span class="cl"><span class="m">02</span>
</span></span><span class="line"><span class="cl">02/188f346460de1876df7dac2669360396f84a58
</span></span></code></pre></div><p>In the above example, there are three subfolders under .git/objects, called &ldquo;00&rdquo;, &ldquo;01&rdquo; and &ldquo;02&rdquo;.
The full SHA1 hash of an object is constructed by adding the parent folder name to the filename.<br>
So the final file listed above has the full hash of <span style="color:lightgreen">02</span>188f346460de1876df7dac2669360396f84a58</p>
<h2 id="can-you-look-inside-the-objects">CAN YOU LOOK INSIDE THE OBJECTS?</h2>
<p>The objects inside the git database are compressed, but can be viewed with the command <code>git cat-file</code><br>
Specify the object hash and either:<br>
-t = show the object type<br>
-p = print the contents</p>
<p>NOTE: You only need part of the hash when using most GIT commands (and GIT sometimes truncates the hash in its own output)</p>
<h3 id="what-type-of-object-is-this">WHAT TYPE OF OBJECT IS THIS?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file 0b4271c56 -t <span class="c1"># display the object type</span>
</span></span><span class="line"><span class="cl">commit
</span></span></code></pre></div><p>The above object is a commit.</p>
<h3 id="whats-inside-a-commit-object">WHAT&rsquo;S INSIDE A COMMIT OBJECT?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file 0b4271c56 -p
</span></span><span class="line"><span class="cl">tree 30b4d42bbe1a39dcc314f7c280b1437a1925585e
</span></span><span class="line"><span class="cl">parent cc0e10d238e78a57115572360a93deba2554d185
</span></span><span class="line"><span class="cl">author GD &lt;GD@LOCAL.HOME&gt; <span class="m">1621179226</span> +0100
</span></span><span class="line"><span class="cl">committer GD &lt;GD@LOCAL.HOME&gt; <span class="m">1621179226</span> +0100
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Updated summaries. Added article
</span></span></code></pre></div><p>In the above output:</p>
<ul>
<li><em>tree</em>  is a hash reference to the root tree (folder).</li>
<li><em>parent</em> is the hash of the parent commit (unless this is the first commit)</li>
<li><em>Author</em> and <em>committer</em> are the operator who created the commit</li>
<li>Finally there is the commit message, <em>Updated summaries&hellip;</em></li>
</ul>
<h3 id="whats-in-a-tree-object">WHAT&rsquo;S IN A TREE OBJECT?</h3>
<p>We can view the contents of a tree object in the same way e.g. using the hash of the tree in the commit above:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file -p 30b4d42bbe
</span></span><span class="line"><span class="cl"><span class="m">100644</span> blob d298be107f27247a24d24f8f78c55d42359007be    .gitignore
</span></span><span class="line"><span class="cl"><span class="m">100644</span> blob e3720ce5ced245ef02620afca619727c001e85bf    404.html
</span></span><span class="line"><span class="cl"><span class="m">100644</span> blob 82b909c8a3de119782d6b66288734f82a4a57d1b    about.md
</span></span><span class="line"><span class="cl"><span class="m">040000</span> tree 272bc4b082fa15dd84b08712206d2edfe2b41e9a    archetypes
</span></span><span class="line"><span class="cl"><span class="m">040000</span> tree e305983083fc1872542004d046abdf3a683407e1    config
</span></span><span class="line"><span class="cl"><span class="m">040000</span> tree 955f968be02f980640e570874f4c155da51882d4    content
</span></span></code></pre></div><p>The first three items in the output are references to blobs (files) in the root of the tree (e.g. the <em>.gitignore</em> file). The rest are references to child trees, which can be explored further using the cat-file command.</p>
<h3 id="whats-in-a-blob">WHAT&rsquo;S IN A BLOB?</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file -t d298be107 <span class="c1"># get the object type</span>
</span></span><span class="line"><span class="cl">blob
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git cat-file -p d298be107 <span class="c1"># get the object contents</span>
</span></span><span class="line"><span class="cl">public/
</span></span></code></pre></div><p>The blob finally contains the actual content, rather than a reference.<br>
In this case, it is the .gitignore file that contains a single line to exclude <em>public</em> from the repo</p>
<h3 id="what-about-branches">WHAT ABOUT BRANCHES?</h3>
<p>Branches are very simple in GIT. They are just references to a commit.</p>
<p>Branch objects aren&rsquo;t compressed so we can look at the contents of the file directly (without needing git cat-file).<br>
Local branches are stored in the .git/refs/heads folder:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ cat .git/refs/heads/main  <span class="c1"># show the contents of the main file</span>
</span></span><span class="line"><span class="cl">0b4271c561e6c7ad5dcf788afdc29bebbf11e171
</span></span></code></pre></div><p>This output is what we expected, the contents of the main branch are a reference to a commit using the SHA1 hash.</p>
<p>If we explore the branch using git cat-file, it gives us information about the commit the branch is pointing to:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ git cat-file -t main <span class="c1"># show the object type</span>
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">❯ 
</span></span><span class="line"><span class="cl">❯ git cat-file -p main <span class="c1"># show the object contents</span>
</span></span><span class="line"><span class="cl">tree 30b4d42bbe1a39dcc314f7c280b1437a1925585e
</span></span><span class="line"><span class="cl">parent cc0e10d238e78a57115572360a93deba2554d185
</span></span><span class="line"><span class="cl">author Geoff Dixon &lt;GBDixg@WESTCLIFF.HOME&gt; <span class="m">1621179226</span> +0100
</span></span><span class="line"><span class="cl">committer Geoff Dixon &lt;GBDixg@WESTCLIFF.HOME&gt; <span class="m">1621179226</span> +0100
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Updated summaries. Added article
</span></span></code></pre></div><p>This is identical to the contents of the commit we looked at earlier, because that was the latest commit on the main branch.</p>
<h3 id="whats-the-head">WHAT&rsquo;S THE HEAD?</h3>
<p>Head is a special pointer in GIT.  It is a reference to the commit that is currently checked-out. Usually the latest commit on the current branch, but not always.</p>
<p>The contents of HEAD is not a hash. It contains a pointer to the name of a branch or commit.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">❯ cat .git/HEAD <span class="c1"># show contents of the HEAD file</span>
</span></span><span class="line"><span class="cl">ref: refs/heads/main
</span></span></code></pre></div><h2 id="summary">SUMMARY</h2>
<p>The git object database is all about references.</p>
<ul>
<li>HEAD is a reference to the current commit</li>
<li>A branch is a reference to a commit</li>
<li>A commit is a reference to a tree</li>
<li>A tree is a reference to blobs and child trees</li>
<li>A blob is the actual content</li>
</ul>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>WSL2 on Windows 10 - quick setup</title>
      <link>https://write-verbose.com/2021/05/15/wsl2-quick/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/05/15/wsl2-quick/</guid>
      <description>&lt;p&gt;Windows Subsystem for Linux (WSL) is a fantastic Dev and Test environment, providing seamless integration for Linux apps and shells running on Windows 10. This post is a quick summary of the manual steps to enable WSL2 in Windows 10.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Windows Subsystem for Linux (WSL) is a fantastic Dev and Test environment, providing seamless integration for Linux apps and shells running on Windows 10. This post is a quick summary of the manual steps to enable WSL2 in Windows 10.</p>
<h2 id="windows-insider-builds">Windows Insider Builds</h2>
<p>At the time of writing, Microsoft is making it much simpler to install and enable WSL2 using a single command. This option is only available in Insider Builds 20262 and higher.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wsl --install
</span></span></code></pre></div><p>For the stable release versions of Windows 10, the following manual steps are required.</p>
<h2 id="enable-virtualization-support">Enable virtualization support</h2>
<p>This is separate to the Hyper-V optional feature, but does use the same architecture.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
</span></span></code></pre></div><h2 id="enable-wsl-feature">Enable WSL feature</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
</span></span></code></pre></div><h2 id="wsl-kernel-update-package">WSL kernel update package</h2>
<p>This is required because Microsoft removed the previously included Linux kernel from Windows. It now gets updated and patched through Windows Update</p>
<p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">Download and install the update package</a></p>
<h2 id="set-the-default-version">Set the default version</h2>
<p>Make sure everything is version 2</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">wsl</span> <span class="p">-</span><span class="n">-set-default-version</span> <span class="n">2</span>
</span></span></code></pre></div><h2 id="install-the-required-distro">Install the required distro</h2>
<p>Ubuntu is the most reliable on Windows at the time of writing</p>
<p><a href="https://www.microsoft.com/en-gb/p/ubuntu-2004-lts/9n6svws3rx71">Ubuntu 20.04 LTS</a></p>
<h2 id="create-username">Create username</h2>
<p>Start the distro from the Start Menu shortcut. When prompted, specify a username and password.</p>
<p>The user is automatically added to the Sudo group.</p>
<h2 id="update-packages-in-the-distro">Update packages in the distro</h2>
<p>Launch Ubuntu and start a terminal shell</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt-get update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt-get upgrade
</span></span></code></pre></div><h2 id="check-you-are-running-version-2">Check you are running version 2</h2>
<p>Windows 10 PowerShell:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">wsl</span> <span class="p">-</span><span class="n">-list</span> <span class="n">-v</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">NAME</span>                   <span class="n">STATE</span>           <span class="n">VERSION</span>
</span></span><span class="line"><span class="cl"><span class="p">*</span> <span class="nb">docker-desktop</span><span class="n">-data</span>    <span class="n">Running</span>         <span class="n">2</span>
</span></span><span class="line"><span class="cl">  <span class="n">Ubuntu</span><span class="p">-</span><span class="n">20</span><span class="p">.</span><span class="n">04</span>           <span class="n">Running</span>         <span class="n">2</span>
</span></span><span class="line"><span class="cl">  <span class="nb">docker-desktop</span>         <span class="n">Running</span>         <span class="n">2</span>
</span></span></code></pre></div><h2 id="location-of-the-vhdx-file">Location of the .vhdx file</h2>
<p>The virtual disk containing the Linux OS is located here:</p>
<p><code>%LOCALAPPDATA%\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\LocalState\ext4.vhdx</code></p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Create custom code snippets in VSCode</title>
      <link>https://write-verbose.com/2021/05/07/vscodesnippets/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/05/07/vscodesnippets/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;BACKGROUND&lt;/h2&gt;
&lt;p&gt;VSCode snippets are a productivity feature allowing blocks of code to be inserted with a couple of keystrokes or tab completion. Its simple to add your own Snippets and dramatically boost your productivity. Read on for the details.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="background">BACKGROUND</h2>
<p>VSCode snippets are a productivity feature allowing blocks of code to be inserted with a couple of keystrokes or tab completion. Its simple to add your own Snippets and dramatically boost your productivity. Read on for the details.</p>
<blockquote>
<p>All paths and keyboard shortcuts in this article assume VSCode is running on Windows</p>
</blockquote>
<p>Predefined Snippets are included with most of the VSCode language extensions (use @category:&ldquo;snippets&rdquo; in the extensions pane to see which ones). However, they may not match your coding style, or have trigger text that suits you. User-defined snippets allow complete customisation. They also support variables that are replaced with required values on insert, making them perfect for boilerplate code.</p>
<h2 id="editing-user-defined-snippets">EDITING USER-DEFINED SNIPPETS</h2>
<p>Open a language-specific Snippet file as follows (example using PowerShell):</p>
<p><code>File &gt; Preferences &gt; User Snippets &gt; PowerShell</code></p>
<p>A .json file is displayed, empty at first.</p>
<p>A Snippet is made up of the following elements</p>
<table>
<thead>
<tr>
<th>Element</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>&ldquo;Function template&rdquo;</td>
<td>The name is shown by Intellisense if there is no description</td>
</tr>
<tr>
<td>prefix</td>
<td>[&ldquo;ft&rdquo;,&ldquo;function&rdquo;]</td>
<td>One or more trigger words that activate intellisense (uses substring matching)</td>
</tr>
<tr>
<td>body</td>
<td>[&ldquo;function Verb-Noun {\r&rdquo;,&quot;[cmdletbinding()]\r&quot;]</td>
<td>The template code to be inserted</td>
</tr>
<tr>
<td>description</td>
<td>Advanced function boilerplate</td>
<td>Optional description displayed by intellisense</td>
</tr>
<tr>
<td>placeholder</td>
<td>${1:Verb-Noun}</td>
<td>An element within the body that is replaced by the user after insertion. The number represents the tab stop position. The text is the default value that is replaced</td>
</tr>
<tr>
<td>choices</td>
<td>${1|one,two,three|}</td>
<td>This placeholder will prompt to choose one of the options between the pipe characters</td>
</tr>
<tr>
<td>$0</td>
<td>[&ldquo;while($i -lt 10){\r&rdquo;,&quot;\t$0\r&quot;,&quot;}&quot;]</td>
<td>A special placeholder that always comes last and ends insertion mode</td>
</tr>
</tbody>
</table>
<h3 id="snippet-example">Snippet example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;Advanced function&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;fa&#34;</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;Function ${1:Verb-Noun}{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;[cmdletBinding()]\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;param(\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;    \r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;)\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;BEGIN{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;PROCESS{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;$0\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;END{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="p">],</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Advanced function boilerplate&#34;</span>
</span></span></code></pre></div><p>Note the use of a JSON array for the body and control characters for new lines. This is quite laborious to create by hand, but VSCode extensions can make this much easier&hellip;</p>
<h3 id="marketplace-snippet-extension">Marketplace Snippet Extension</h3>
<p>There are a number of extensions in the VSCode marketplace that will create a Snippet from highlighted code in the editor.</p>
<p>For example, <a href="https://marketplace.visualstudio.com/items?itemName=ryanolsonx.snippet-creator">Snippet Creator</a> will automatically detetect the in-use language and then prompt for the Snippet prefix and description.  You can then edit the Snippet to fine-tune it.</p>
<h3 id="snippet-scope">Snippet Scope</h3>
<p><strong>Language-specific</strong></p>
<p>Most Snippets will be created in a language-specific Snippet file and will only prompt for insertion when using that language e.g.<br>
        <code>%APPDATA%\Code\User\snippetsPowershell.json</code></p>
<p><strong>Global</strong></p>
<p>There is also a global Snippets file that applies to all languages. This file does not exist by default but can be created from <code>File &gt; Preferences &gt; User Snippets &gt; New Global Snippets file</code>. The file can have any name, but always ends in <code>.code-snippets</code>. For example:<br>
        <code>%APPDATA%\Code\User\snippets\GlobalSnippets.code-snippets</code></p>
<p>The global Snippets can use an additional property called <em>Scope</em> to limit them to a list of languages. If it isn&rsquo;t specified, they are available to all.</p>
<p><strong>Project-specific</strong></p>
<p>If a global Snippets file is placed in the <code>.vscode</code> folder at the root of a project, it is scoped only to that project.  It can still use the scope property to further limit Snippets to specific languages.</p>
<h2 id="keyboard-shortcut">Keyboard Shortcut</h2>
<p>Use <code>File &gt; Preferences &gt; Keyboard Shortcuts &gt; Open Keyboard Shortcuts (JSON)</code> to assign a shortcut to a Snippet. Custom shortcuts are saved in the file <code>%AppData%\Code\User\keybindings.json</code></p>
<p>If the Snippet is not in the Global Snippets file, the langId is used to specify a language specific Snippet:</p>
<h3 id="keybinding-example">Keybinding example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;cmd+k 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;editor.action.insertSnippet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;when&#34;</span><span class="p">:</span> <span class="s2">&#34;editorTextFocus&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;langId&#34;</span><span class="p">:</span> <span class="s2">&#34;csharp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;NewClass&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="hiding-snippets">Hiding Snippets</h2>
<p>Hiding Snippets is useful when there is a lot of noise in the Intellisense prompts. This can occur when you create a user snippet with the same trigger as a language extension snippet.</p>
<blockquote>
<ul>
<li>Open the insert Snippet dialog using CTRL + ALT + J</li>
<li>Start typing the tigger characters to show the Snippet options in the list</li>
<li>Hover over each item and click the Hide from Intellisense option on the right hand side</li>
</ul>
</blockquote>
<h2 id="extension-snippets">Extension Snippets</h2>
<p>I don&rsquo;t recommend trying to edit or remove extension Snippets. Changes are likely to get overwritten when the extension updates.</p>
<p>For information, extension Snippets are stored under <code>%USERPROFILE%\.vscode\extensions</code>. For example the Microsoft PowerShell extension Snippets are at:</p>
<p><code>%USERPROFILE%\.vscode\extensions\ms-vscode.powershell-2021.2.2\snippets\PowerShell.json</code></p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Find a computer&#39;s Active Directory Site and Subnet with PowerShell</title>
      <link>https://write-verbose.com/2019/04/13/find-adsite/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/04/13/find-adsite/</guid>
      <description>&lt;p&gt;Read-on for a PowerShell command to get the Active Directory Subnet and Site from the computername or IP Address.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Read-on for a PowerShell command to get the Active Directory Subnet and Site from the computername or IP Address.</p>
<p><strong>Active Directory Sites</strong> represent locations with good network connectivity. An ADSite is often created for each office or a group of offices in a metropolitan area, to generate the replication topology between Domain Controllers, and to help workstations/servers locate closest services.</p>
<p><strong>Active Directory Subnets</strong> define the IP ranges included in an AD Site. A member workstation/server will have an IP address that should fall within a defined AD subnet, making it part of an AD Site.</p>
<p>AD Site membership is not fixed. Laptops can move between Sites and Subnets when they roam to another location.</p>
<blockquote>
<p>An incorrect or undefined AD subnet can lead to slow logon times and slow access to DFS shares. A domain member would use any server that responds when it isn&rsquo;t in a defined subnet.</p>
</blockquote>
<h2 id="powershell-script">PowerShell script</h2>
<p>The <strong>Find-ADSite</strong> PowerShell function below will return the AD Site and Subnet for a specified computer name or IP Address.<br>
If a company populates subnet descriptions with useful information, it can also identify information such as the specific Office or floor.</p>
<p>AD Administrators may define a <a href="https://blog.mindcore.dk/2013/07/catch-all-or-super-subnet-in-sites-and/">catch-all subnet</a> with a wide address range. By default if the IP address is within more than one subnet, the output will only include the smallest range. Use the -AllMatches parameter to see everything.</p>
<p><img loading="lazy" src="/img/find-adsite1.png" alt="Find-ADSite"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="k">Function</span> <span class="nb">Find-ADSite</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.Synopsis</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Used to get the Active Directory subnet and the site it is assigned to for a Windows computer/IP address
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.Description</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Requires only standard user read access to AD and can determine the ADSite for a local or remote computer
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.PARAMETER</span><span class="cm">  IPAddress
</span></span></span><span class="line"><span class="cl"><span class="cm">  Specifies the IP Address for the subnet/site lookup in as a .NET System.Net.IPAddress
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  When this parameter is used, the computername is not specified.
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.PARAMETER</span><span class="cm">  Computername
</span></span></span><span class="line"><span class="cl"><span class="cm">  Specifies a computername for the subnet/site lookup.
</span></span></span><span class="line"><span class="cl"><span class="cm">  The computername is resolved to an IP address before performing the subnet query.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Defaults to %COMPUTERNAME%
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  When this parameter is used, the IPAddress and IP are not specified.
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.PARAMETER</span><span class="cm">  DC
</span></span></span><span class="line"><span class="cl"><span class="cm">  A specific domain controller in the current users domain for the subnet query
</span></span></span><span class="line"><span class="cl"><span class="cm">  If not specified, standard DC locator methods are used.
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.PARAMETER</span><span class="cm">  AllMatches
</span></span></span><span class="line"><span class="cl"><span class="cm">  A switch parameter that causes the subnet query to return all matching subnets in AD
</span></span></span><span class="line"><span class="cl"><span class="cm">  This is not normally used as the default behaviour (only the most specific match is returned) is usually prefered.
</span></span></span><span class="line"><span class="cl"><span class="cm">  This switch will include &#34;catch-all&#34; subnets that may be defined to accomodate missing subnets
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.Example</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  PS C:\&gt;Find-ADSite -ComputerName PC123456789
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  ComputerName      : PC123456789
</span></span></span><span class="line"><span class="cl"><span class="cm">  IPAddress         : 162.26.192.151
</span></span></span><span class="line"><span class="cl"><span class="cm">  ADSubnetName      : 162.26.192.128/25
</span></span></span><span class="line"><span class="cl"><span class="cm">  ADSubnetDesc      : 3rd Floor Main Road Office
</span></span></span><span class="line"><span class="cl"><span class="cm">  ADSiteName        : EULON01
</span></span></span><span class="line"><span class="cl"><span class="cm">  ADSiteDescription : London
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.Notes</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Version:        1.1
</span></span></span><span class="line"><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="k">CmdletBinding</span><span class="p">(</span><span class="n">DefaultParameterSetName</span> <span class="p">=</span> <span class="s2">&#34;byHost&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="k">Param</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Position</span> <span class="p">=</span> <span class="n">0</span><span class="p">,</span> <span class="k">ValueFromPipeline</span> <span class="p">=</span> <span class="nv">$true</span><span class="p">,</span> <span class="k">ValueFromPipelineByPropertyName</span> <span class="p">=</span> <span class="nv">$True</span><span class="p">,</span> <span class="k">ParameterSetName</span> <span class="p">=</span> <span class="s2">&#34;byHost&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="no">[string]</span><span class="nv">$ComputerName</span> <span class="p">=</span> <span class="nv">$Env:COMPUTERNAME</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Position</span> <span class="p">=</span> <span class="n">0</span><span class="p">,</span> <span class="k">ValueFromPipeline</span> <span class="p">=</span> <span class="nv">$true</span><span class="p">,</span> <span class="k">ValueFromPipelineByPropertyName</span> <span class="p">=</span> <span class="nv">$True</span><span class="p">,</span> <span class="k">Mandatory</span> <span class="p">=</span> <span class="nv">$True</span><span class="p">,</span> <span class="k">ParameterSetName</span> <span class="p">=</span> <span class="s2">&#34;byIPAddress&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="no">[System.Net.IPAddress]</span><span class="nv">$IPAddress</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="k">Parameter</span><span class="p">(</span><span class="k">Position</span> <span class="p">=</span> <span class="n">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="no">[string]</span><span class="nv">$DC</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="k">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">        <span class="no">[switch]</span><span class="nv">$AllMatches</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">switch</span> <span class="p">(</span><span class="nv">$pscmdlet</span><span class="p">.</span><span class="k">ParameterSetName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;byHost&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Resolved</span> <span class="p">=</span> <span class="no">[system.net.dns]</span><span class="p">::</span><span class="n">GetHostByName</span><span class="p">(</span><span class="nv">$Computername</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="no">[System.Net.IPAddress]</span><span class="nv">$IP</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$Resolved</span><span class="p">.</span><span class="n">AddressList</span><span class="p">)[</span><span class="n">0</span><span class="p">]</span> <span class="o">-as</span> <span class="no">[System.Net.IPAddress]</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">Write-Warning</span> <span class="s2">&#34;$ComputerName :: Unable to resolve name to an IP Address&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$IP</span> <span class="p">=</span> <span class="nv">$Null</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;byIPAddress&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Resolved</span> <span class="p">=</span> <span class="no">[system.net.dns]</span><span class="p">::</span><span class="n">GetHostByAddress</span><span class="p">(</span><span class="nv">$IPAddress</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ComputerName</span> <span class="p">=</span> <span class="nv">$Resolved</span><span class="p">.</span><span class="n">HostName</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c"># Write-Warning &#34;$IP :: Could not be resolved to a hostname&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ComputerName</span> <span class="p">=</span> <span class="s2">&#34;Unable to resolve&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$IP</span> <span class="p">=</span> <span class="nv">$IPAddress</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#switch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$IP</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c"># The following maths loops over all the possible subnet mask lengths</span>
</span></span><span class="line"><span class="cl">            <span class="c"># The masks are converted into the number of Bits to allow conversion to CIDR format</span>
</span></span><span class="line"><span class="cl">            <span class="c"># The script tries to lookup every possible range/subnet bits combination and keeps going until it finds a hit in AD</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="no">[psobject[]]</span><span class="nv">$MatchedSubnets</span> <span class="p">=</span> <span class="p">@()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">For</span> <span class="p">(</span><span class="nv">$bit</span> <span class="p">=</span> <span class="n">30</span> <span class="p">;</span> <span class="nv">$bit</span> <span class="o">-ge</span> <span class="n">1</span><span class="p">;</span> <span class="nv">$bit</span><span class="p">--)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="no">[int]</span><span class="nv">$octet</span> <span class="p">=</span> <span class="no">[math]</span><span class="p">::</span><span class="n">Truncate</span><span class="p">((</span><span class="nv">$bit</span> <span class="p">-</span> <span class="n">1</span> <span class="p">)</span> <span class="p">/</span> <span class="n">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$net</span> <span class="p">=</span> <span class="no">[byte[]]</span><span class="p">@()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="nv">$o</span> <span class="p">=</span> <span class="n">0</span><span class="p">;</span> <span class="nv">$o</span> <span class="o">-le</span> <span class="n">3</span><span class="p">;</span> <span class="nv">$o</span><span class="p">++)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ba</span> <span class="p">=</span> <span class="nv">$ip</span><span class="p">.</span><span class="n">GetAddressBytes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="nv">$o</span> <span class="o">-lt</span> <span class="nv">$Octet</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> <span class="p">+=</span> <span class="nv">$ba</span><span class="p">[</span><span class="nv">$o</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">ELSEIF</span> <span class="p">(</span><span class="nv">$o</span> <span class="o">-eq</span> <span class="nv">$octet</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$factor</span> <span class="p">=</span> <span class="n">8</span> <span class="p">+</span> <span class="nv">$Octet</span> <span class="p">*</span> <span class="n">8</span> <span class="p">-</span> <span class="nv">$bit</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Divider</span> <span class="p">=</span> <span class="no">[math]</span><span class="p">::</span><span class="n">pow</span><span class="p">(</span><span class="n">2</span><span class="p">,</span> <span class="nv">$factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$value</span> <span class="p">=</span> <span class="nv">$divider</span> <span class="p">*</span> <span class="no">[math]</span><span class="p">::</span><span class="n">Truncate</span><span class="p">(</span><span class="nv">$ba</span><span class="p">[</span><span class="nv">$o</span><span class="p">]</span> <span class="p">/</span> <span class="nv">$divider</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> <span class="p">+=</span> <span class="nv">$value</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">ELSE</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> <span class="p">+=</span> <span class="n">0</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="c">#Next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c">#Format network in CIDR notation</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Network</span> <span class="p">=</span> <span class="no">[string]</span><span class="p">::</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="nv">$net</span><span class="p">)</span> <span class="p">+</span> <span class="s2">&#34;/$bit&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c"># Try to find this Network in AD Subnets list</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Verbose</span> <span class="s2">&#34;Trying : $Network&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$de</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">DirectoryServices</span><span class="p">.</span><span class="n">DirectoryEntry</span><span class="p">(</span><span class="s2">&#34;LDAP://&#34;</span> <span class="p">+</span> <span class="nv">$DC</span> <span class="p">+</span> <span class="s2">&#34;rootDSE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Root</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">DirectoryServices</span><span class="p">.</span><span class="n">DirectoryEntry</span><span class="p">(</span><span class="s2">&#34;LDAP://$DC</span><span class="p">$(</span><span class="nv">$de</span><span class="p">.</span><span class="n">configurationNamingContext</span><span class="p">)</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ds</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Directoryservices</span><span class="p">.</span><span class="n">DirectorySearcher</span><span class="p">(</span><span class="nv">$root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ds</span><span class="p">.</span><span class="k">filter</span> <span class="p">=</span> <span class="s2">&#34;(CN=$Network)&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Result</span> <span class="p">=</span> <span class="nv">$ds</span><span class="p">.</span><span class="n">findone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Result</span> <span class="p">=</span> <span class="nv">$null</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="nv">$Result</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">write-verbose</span> <span class="s2">&#34;AD Site found for $IP&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c"># Try to split out AD Site from LDAP path</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$SiteDN</span> <span class="p">=</span> <span class="nv">$Result</span><span class="p">.</span><span class="n">GetDirectoryEntry</span><span class="p">().</span><span class="n">siteObject</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$SiteDe</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="n">DirectoryServices</span><span class="p">.</span><span class="n">DirectoryEntry</span><span class="p">(</span><span class="s2">&#34;LDAP://$SiteDN&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ADSite</span> <span class="p">=</span> <span class="nv">$SiteDe</span><span class="p">.</span><span class="n">Name</span><span class="p">[</span><span class="n">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ADSiteDescription</span> <span class="p">=</span> <span class="nv">$SiteDe</span><span class="p">.</span><span class="n">Description</span><span class="p">[</span><span class="n">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$MatchedSubnets</span> <span class="p">+=</span> <span class="no">[PSCustomObject][Ordered]</span><span class="p">@{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ComputerName</span> <span class="p">=</span> <span class="nv">$ComputerName</span>
</span></span><span class="line"><span class="cl">                        <span class="n">IPAddress</span>    <span class="p">=</span> <span class="nv">$IP</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ADSubnetName</span> <span class="p">=</span> <span class="p">$(</span><span class="nv">$Result</span><span class="p">.</span><span class="n">properties</span><span class="p">.</span><span class="n">name</span><span class="p">).</span><span class="n">ToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ADSubnetDesc</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Result</span><span class="p">.</span><span class="n">properties</span><span class="p">.</span><span class="n">description</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ADSiteName</span>       <span class="p">=</span> <span class="nv">$ADSite</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ADSiteDescription</span> <span class="p">=</span> <span class="nv">$ADSiteDescription</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$bFound</span> <span class="p">=</span> <span class="nv">$true</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="c">#endif</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="c">#next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$bFound</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$AllMatches</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c"># output all the matched subnets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$MatchedSubnets</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c"># Only output the subnet with the largest mask bits</span>
</span></span><span class="line"><span class="cl">                <span class="no">[Int32]</span><span class="nv">$MaskBits</span> <span class="p">=</span> <span class="n">0</span> <span class="c"># initial value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$MatchedSubnet</span> <span class="k">in</span> <span class="nv">$MatchedSubnets</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="nv">$MatchedSubnet</span><span class="p">.</span><span class="n">ADSubnetName</span> <span class="o">-match</span> <span class="s2">&#34;\/(?&lt;Bits&gt;\d+)$&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="no">[Int32]</span><span class="nv">$ThisMaskBits</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;Bits&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">Write-Verbose</span> <span class="s2">&#34;ThisMaskBits = &#39;$ThisMaskBits&#39;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="nv">$ThisMaskBits</span> <span class="o">-gt</span> <span class="nv">$MaskBits</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="c"># This is a more specific subnet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                            <span class="nv">$OutputSubnet</span> <span class="p">=</span> <span class="nv">$MatchedSubnet</span>
</span></span><span class="line"><span class="cl">                            <span class="nv">$MaskBits</span> <span class="p">=</span> <span class="nv">$ThisMaskBits</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">Write-Verbose</span> <span class="s2">&#34;No match&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">Write-Verbose</span> <span class="s2">&#34;No match&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$OutputSubnet</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="c">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">Write-Verbose</span> <span class="s2">&#34;AD Subnet not found for $IP&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$IP</span> <span class="o">-eq</span> <span class="nv">$null</span><span class="p">)</span> <span class="p">{</span><span class="nv">$IP</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span><span class="p">}</span> <span class="c"># required to prevent exception on ToString() below</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">PSObject</span> <span class="n">-Property</span> <span class="p">@{</span>
</span></span><span class="line"><span class="cl">                <span class="n">ComputerName</span> <span class="p">=</span> <span class="nv">$ComputerName</span>
</span></span><span class="line"><span class="cl">                <span class="n">IPAddress</span>    <span class="p">=</span> <span class="nv">$IP</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">ADSubnetName</span> <span class="p">=</span> <span class="s2">&#34;Not found&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ADSubnetDesc</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ADSiteName</span>   <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ADSiteDescription</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#end if</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="c">#process</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Export Remote Eventlog with PowerShell</title>
      <link>https://write-verbose.com/2019/04/06/export-eventlog/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/04/06/export-eventlog/</guid>
      <description>&lt;p&gt;This article includes a PowerShell &lt;em&gt;Export-Eventlog&lt;/em&gt; command to quickly export a Windows event log from a remote computer and copy it to the local machine.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This article includes a PowerShell <em>Export-Eventlog</em> command to quickly export a Windows event log from a remote computer and copy it to the local machine.</p>
<p>Event logs are a cornerstone of troubleshooting, but getting access to them can be difficult across the network.</p>
<blockquote>
<p>It can be faster to export a Windows event log on a remote computer,  copy the .evtx file over the network and then query it locally.</p>
</blockquote>
<p>The PowerShell <strong>Get-Winevent</strong> command can work against remote event logs, but it can be painfully slow over the network. Copying an entire exported log (.evtx file) across the same connection is much faster. Get-Winevent can still be used with the <em>-path</em> parameter to query the locally copied .evtx file.</p>
<h2 id="powershell-script">PowerShell Script</h2>
<p><strong>wevtutil.exe</strong> is Windows .exe that can export event logs.  The PowerShell function below uses wevtutil to export one ore more event logs and copy them locally. The computer name is pre-pended to the log name.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="k">Function</span> <span class="nb">Export-EventLog</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			Exports a remote event log to a file.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.DESCRIPTION</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			Uses wevtutil.exe to perform the export on the remote computer
</span></span></span><span class="line"><span class="cl"><span class="cm">			The log(s) are saved to c:\Windows\Temp and then moved over the network to the local computer
</span></span></span><span class="line"><span class="cl"><span class="cm">			The resulting log file is $Path\$computername-$logname.evtx
</span></span></span><span class="line"><span class="cl"><span class="cm">			The file can then be opened in Windows Event Viewer or queried directly using &#34;Get-Winevent -Path....&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			The remote computer must be online and the Windows Firewall must allow inbound RPC and SMB connections
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.PARAMETER</span><span class="cm">  Computername
</span></span></span><span class="line"><span class="cl"><span class="cm">			The name of the remote computer.
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.PARAMETER</span><span class="cm">  Logname
</span></span></span><span class="line"><span class="cl"><span class="cm">			The name(s) of the log file to export.
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.PARAMETER</span><span class="cm">  Path
</span></span></span><span class="line"><span class="cl"><span class="cm">			The local folder path where the output file will be saved
</span></span></span><span class="line"><span class="cl"><span class="cm">			Default = %TEMP%
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.PARAMETER</span><span class="cm">  RemotePath
</span></span></span><span class="line"><span class="cl"><span class="cm">			The remote folder path used to stage the exported file prior to moving it to the local folder path.
</span></span></span><span class="line"><span class="cl"><span class="cm">			Environment variables are not supported.
</span></span></span><span class="line"><span class="cl"><span class="cm">			Default = C:\Windows\Temp
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			PS C:\&gt; Export-EventLog -Computername &#34;PC654321&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			This command will export the System and Application event logs from the remote computer PC654321
</span></span></span><span class="line"><span class="cl"><span class="cm">			The logs will be exported to c:\windows\temp on the remote computer then moved to
</span></span></span><span class="line"><span class="cl"><span class="cm">			c:\temp on the local computer
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			PS C:\&gt; Export-EventLog -Computername &#34;PC654321&#34; -LogName &#34;System&#34;,&#34;Security&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			This command will export the System and Security event logs from the remote computer PC654321
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			PS C:\&gt; &#34;PC654321&#34; | Export-EventLog -LogName &#34;Application&#34;,&#34;Security&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			This command will export the Application and Security event logs from the remote computer PC654321
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			PS C:\&gt; Get-Winevent -Computername $Computer -Listlog * -EA 0 | Where{$_.RecordCount -gt 0} | Export-EventLog -Computername $Computer
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			This command will export all the event logs from the remote computer represented by the $computer variable
</span></span></span><span class="line"><span class="cl"><span class="cm">		</span><span class="sd">.NOTES</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			Version: 1.0
</span></span></span><span class="line"><span class="cl"><span class="cm">	#&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">[</span><span class="k">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">	<span class="k">param</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="k">parameter</span><span class="p">(</span><span class="k">position</span> <span class="p">=</span> <span class="n">0</span><span class="p">,</span> <span class="k">valuefromPipeline</span> <span class="p">=</span> <span class="nv">$true</span><span class="p">,</span> <span class="k">valuefrompipelinebypropertyname</span> <span class="p">=</span> <span class="nv">$true</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="no">[string[]]</span><span class="nv">$Computername</span> <span class="p">=</span> <span class="nv">$Env:COMPUTERNAME</span>
</span></span><span class="line"><span class="cl">		<span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="k">parameter</span><span class="p">(</span><span class="k">position</span> <span class="p">=</span> <span class="n">1</span><span class="p">,</span> <span class="k">valuefrompipelinebypropertyname</span> <span class="p">=</span> <span class="nv">$true</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="no">[string[]]</span><span class="nv">$LogName</span> <span class="p">=</span> <span class="p">@(</span><span class="s2">&#34;System&#34;</span><span class="p">,</span> <span class="s2">&#34;Application&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="k">parameter</span><span class="p">(</span><span class="k">position</span> <span class="p">=</span> <span class="n">2</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="n">ValidateScript</span><span class="p">(</span> <span class="p">{</span> <span class="nb">Test-Path</span> <span class="nv">$_</span> <span class="n">-PathType</span> <span class="s1">&#39;Container&#39;</span> <span class="p">})]</span>
</span></span><span class="line"><span class="cl">		<span class="no">[string]</span><span class="nv">$Path</span> <span class="p">=</span> <span class="nv">$ENV:TEMP</span>
</span></span><span class="line"><span class="cl">		<span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="k">parameter</span><span class="p">(</span><span class="k">position</span> <span class="p">=</span> <span class="n">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="no">[string]</span><span class="nv">$RemotePath</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">Foreach</span> <span class="p">(</span><span class="nv">$Name</span> <span class="k">in</span> <span class="nv">$Computername</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">Write-Progress</span> <span class="n">-id</span> <span class="n">1</span> <span class="n">-Activity</span> <span class="s2">&#34;Computer &#34;</span> <span class="n">-Status</span> <span class="s2">&#34;$Name&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">If</span> <span class="p">(</span><span class="nb">Test-Connection</span> <span class="n">-ComputerName</span> <span class="nv">$Name</span> <span class="n">-Count</span> <span class="n">1</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nv">$LogName</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$Log</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">PSObject</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">Computername</span><span class="p">,</span> <span class="n">LogName</span><span class="p">,</span> <span class="n">Path</span><span class="p">,</span> <span class="n">Result</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span><span class="p">.</span><span class="n">Computername</span> <span class="p">=</span> <span class="nv">$Name</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span><span class="p">.</span><span class="n">LogName</span> <span class="p">=</span> <span class="nv">$Log</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="p">((</span><span class="nb">Get-WinEvent</span> <span class="n">-LogName</span> <span class="nv">$Log</span> <span class="n">-ComputerName</span> <span class="nv">$Name</span> <span class="n">-MaxEvents</span> <span class="n">1</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span> <span class="p">|</span> <span class="nb">Measure-Object</span><span class="p">).</span><span class="n">Count</span> <span class="o">-lt</span> <span class="n">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nb">Write-Warning</span> <span class="n">-Message</span> <span class="s2">&#34;$Name::$log log is empty. Skipping export&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="k">return</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$OutputFileName</span> <span class="p">=</span> <span class="s2">&#34;$Name-</span><span class="p">$(</span><span class="nv">$Log</span> <span class="o">-replace</span> <span class="s2">&#34;/&#34;</span><span class="p">,</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="s2">.evtx&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="nb">Write-Progress</span> <span class="n">-id</span> <span class="n">2</span> <span class="n">-ParentId</span> <span class="n">1</span> <span class="n">-Activity</span> <span class="s2">&#34;Exporting&#34;</span> <span class="n">-Status</span> <span class="s2">&#34;$Log&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="p">(</span><span class="nv">$Name</span> <span class="o">-eq</span> <span class="nv">$Env:COMPUTERNAME</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nb">Write-Verbose</span> <span class="s2">&#34;Local computer...&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="nv">$Cmd</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Env:windir</span><span class="p">)</span><span class="s2">\system32\wevtutil.exe epl &#39;$Log&#39; &#39;$Path\$OutputFileName&#39; /r:$Name /ow:True 2&gt;&amp;1&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="nv">$CmdResult</span> <span class="p">=</span> <span class="nb">Invoke-Expression</span> <span class="n">-Command</span> <span class="nv">$cmd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="p">(</span><span class="nv">$CmdResult</span> <span class="o">-eq</span> <span class="nv">$Null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Verbose</span> <span class="s2">&#34;$Name::$log log export to &#39;$path&#39; = &#39;Success&#39;&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="nv">$Output</span><span class="p">.</span><span class="n">Result</span> <span class="p">=</span> <span class="s2">&#34;Success&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Error</span> <span class="s2">&#34;$Name::$log log export to &#39;$path&#39; = &#39;$CmdResult&#39;&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="nv">$Output</span><span class="p">.</span><span class="n">Result</span> <span class="p">=</span> <span class="s2">&#34;Error - $CMDResult&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nb">Write-Verbose</span> <span class="s2">&#34;Remote computer...&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="c"># Wevtutil LogName filepath /r:&lt;remote computer&gt; /ow:&lt;Overwrite true/false&gt;</span>
</span></span><span class="line"><span class="cl">						<span class="nv">$Cmd</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Env:windir</span><span class="p">)</span><span class="s2">\system32\wevtutil.exe epl &#39;$Log&#39; &#39;$RemotePath\$OutputFileName&#39; /r:$Name /ow:True 2&gt;&amp;1&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="nv">$CmdResult</span> <span class="p">=</span> <span class="nb">Invoke-Expression</span> <span class="n">-Command</span> <span class="nv">$cmd</span>
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="p">(</span><span class="nv">$CmdResult</span> <span class="o">-eq</span> <span class="nv">$Null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="c"># Convert &lt;Drive&gt;:\ to \&lt;Drive&gt;$ for remote connection</span>
</span></span><span class="line"><span class="cl">							<span class="nv">$RemoteUNC</span> <span class="p">=</span> <span class="nv">$RemotePath</span> <span class="o">-Replace</span> <span class="s1">&#39;(?&lt;Drive&gt;[A-Za-z]+):&#39;</span><span class="p">,</span> <span class="s1">&#39;${Drive}$$&#39;</span> <span class="c"># c:\ = c$\</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Verbose</span> <span class="s2">&#34;$Name::$log log export to &#39;\\$Name\$RemoteUNC\$OutputFileName&#39; = &#39;Success&#39;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Progress</span> <span class="n">-id</span> <span class="n">3</span> <span class="n">-ParentId</span> <span class="n">1</span> <span class="n">-Activity</span> <span class="s2">&#34;Copying&#34;</span> <span class="n">-Status</span> <span class="s2">&#34;$Log&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="k">Try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">								<span class="nb">move-item</span> <span class="n">-path</span> <span class="s2">&#34;filesystem::\\$Name\$RemoteUNC\$OutputFileName&#34;</span> <span class="n">-Dest</span> <span class="nv">$Path</span> <span class="n">-Force</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="cl">								<span class="nb">Write-Verbose</span> <span class="s2">&#34;$Name::$log log move to &#39;$path&#39; = Success&#34;</span>
</span></span><span class="line"><span class="cl">								<span class="nv">$Output</span><span class="p">.</span><span class="n">Result</span> <span class="p">=</span> <span class="s2">&#34;Success&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="p">}</span> <span class="k">Catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">								<span class="nb">Write-Error</span> <span class="s2">&#34;$Name::$log log move to &#39;$path&#39; failed - &#39;$_&#39;&#34;</span>
</span></span><span class="line"><span class="cl">								<span class="nv">$Output</span><span class="p">.</span><span class="n">Result</span> <span class="p">=</span> <span class="s2">&#34;Error - &#39;$_&#39;&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Error</span> <span class="s2">&#34;$Name::$log log export to &#39;\\$Name\$RemotePath&#39; = &#39;$CmdResult&#39;&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="nv">$Result</span> <span class="p">=</span> <span class="s2">&#34;Error - $CMDResult&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span><span class="c">#end if</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span><span class="p">.</span><span class="n">Path</span> <span class="p">=</span> <span class="s2">&#34;$Path\$OutputFileName&#34;</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="p">}</span><span class="c">#foreach logname</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">Write-Warning</span> <span class="n">-Message</span> <span class="s2">&#34;$Name :: ping failed&#34;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="c">#foreach Name</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span><span class="c">#process</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c">#EndFunction</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Active Directory ADSystemInfo with PowerShell</title>
      <link>https://write-verbose.com/2019/03/30/adsysteminfo/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/03/30/adsysteminfo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;ADSystemInfo is a built-in COM object in Windows that simplifies lookup of Active Directory user and computer information.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>ADSystemInfo is a built-in COM object in Windows that simplifies lookup of Active Directory user and computer information.</p>
</blockquote>
<p>ADSystemInfo can only return information about the local computer and current user. The computer must be joined to a domain and a domain controller must be reachable when the function is called.</p>
<p>Its simple to instantiate COM objects in PowerShell. The function below shows how to use this object.</p>
<h2 id="example-output">EXAMPLE OUTPUT</h2>
<p><img loading="lazy" src="/img/adsysteminfo.png" alt="Get-ADSystemInfo"  />
</p>
<h2 id="powershell-script">POWERSHELL SCRIPT</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="k">Function</span> <span class="nb">Get-ADSystemInfo</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">	</span><span class="sd">.Synopsis</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Used to lookup specific AD user/computer object properties of the current session
</span></span></span><span class="line"><span class="cl"><span class="cm">	</span><span class="sd">.Description</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Uses &#34;ADSystemInfo&#34; COM object to get Active Directory attributes for the current user and computer
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	</span><span class="sd">.Example</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		PS C:\&gt;Get-ADSystemInfo
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		ComputerDN      : CN=EGBLHCNU335BQCG,OU=GBR,OU=Workstations,OU=EU,OU=Regions,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		SiteName        : EULON
</span></span></span><span class="line"><span class="cl"><span class="cm">		DomainDNSName   : mycompany.com
</span></span></span><span class="line"><span class="cl"><span class="cm">		DomainShortName : MYCOMPANY
</span></span></span><span class="line"><span class="cl"><span class="cm">		ForestDNSName   : mycompany.com
</span></span></span><span class="line"><span class="cl"><span class="cm">		IsNativeMode    : True
</span></span></span><span class="line"><span class="cl"><span class="cm">		PDCRoleOwner    : CN=527616-NAADCP01,CN=Servers,CN=Global,CN=Sites,CN=Configuration,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		SchemaRoleOwner : CN=527616-NAADCP01,CN=Servers,CN=Global,CN=Sites,CN=Configuration,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		UserDN          : CN=gdixon2,OU=Users,OU=GBR,OU=Accounts,OU=EU,OU=Regions,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	</span><span class="sd">.Notes</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Version:        1.0
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	</span><span class="sd">.Link</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		http://msdn.microsoft.com/en-us/library/aa705962(VS.85).aspx
</span></span></span><span class="line"><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="k">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"><span class="k">Param</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">Process</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nv">$Output</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">PSObject</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">				<span class="nb">Select </span><span class="n">ComputerDN</span><span class="p">,</span><span class="n">SiteName</span><span class="p">,</span><span class="n">DomainDNSName</span><span class="p">,</span><span class="n">DomainShortName</span><span class="p">,</span><span class="n">ForestDNSName</span><span class="p">,</span><span class="n">IsNativeMode</span><span class="p">,</span><span class="n">PDCRoleOwner</span><span class="p">,</span><span class="n">SchemaRoleOwner</span><span class="p">,</span><span class="n">UserDN</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$obj</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">-com</span> <span class="n">ADSystemInfo</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$type</span> <span class="p">=</span> <span class="nv">$obj</span><span class="p">.</span><span class="n">gettype</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">ComputerDN</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;ComputerName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">SiteName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;sitename&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">DomainDNSName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;DomainDNSName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">DomainShortName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;DomainShortName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">ForestDNSName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;ForestDNSName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">IsNativeMode</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;IsNativeMode&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">PDCRoleOwner</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;PDCRoleOwner&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span> <span class="o">-replace</span> <span class="s2">&#34;CN=NTDS Settings,&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">SchemaRoleOwner</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;SchemaRoleOwner&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span> <span class="o">-replace</span> <span class="s2">&#34;CN=NTDS Settings,&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="n">UserDN</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="n">InvokeMember</span><span class="p">(</span><span class="s2">&#34;UserName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="nv">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Get-WLAN - PowerShell Toolmaking</title>
      <link>https://write-verbose.com/2019/01/06/powershell-toolmaking-regex/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/01/06/powershell-toolmaking-regex/</guid>
      <description>&lt;p&gt;This post includes a Get-WLAN function to show information about wireless LAN connections, including the SSID and signal strength. It also demonstrates creating a PowerShell wrapper for a built-in Windows command.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This post includes a Get-WLAN function to show information about wireless LAN connections, including the SSID and signal strength. It also demonstrates creating a PowerShell wrapper for a built-in Windows command.</p>
<h2 id="why-create-a-powershell-exe-wrapper">Why create a PowerShell exe wrapper</h2>
<blockquote>
<p>PowerShell Tools are re-usable functions that can be used stand-alone or in a pipeline</p>
</blockquote>
<p>Sometimes its more convenient to create a <em>wrapper script</em> using the output of a command line tool than try to create the function entirely in PowerShell. The example below creates a PowerShell command to get information about WI-Fi connections on the local computer.</p>
<h2 id="using-regex-to-parse-text-output">Using Regex to parse text output</h2>
<p><strong>Regular expressions are the ideal way to convert text output from a command line tool into PowerShell objects, making a re-usable pipeline tool</strong>.  Regex is very powerful, but also intimidating. The solution below uses a handy shortcut to identify boundaries in the output - the <em>not</em> operator - ^.<br>
For example, <code>[^:]+</code> means match one or more characters that are not a colon. In the example below, this is used to split the text on each line in the command output.</p>
<p><strong>The netsh output below needs to be split into key value pairs</strong> (e.g. SSID = MyWifi) and converted to a PSObject. For each line of output, the colon character is the obvious boundary between the key name and the value.</p>
<h3 id="native-command-output">Native Command Output</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">C<span class="p">:</span><span class="nl">\</span><span class="c1">&gt; netsh wlan show interfaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">There is 1 interface on the system:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name                   : Wi-Fi
</span></span><span class="line"><span class="cl">Description            : Intel(r) Dual Band Wireless-AC 8260
</span></span><span class="line"><span class="cl">GUID                   : 42bce393-237c-4bd4-9d5e-18020ba8bb87
</span></span><span class="line"><span class="cl">Physical address       : b7:8a:60:a5:f7:d8
</span></span><span class="line"><span class="cl">State                  : connected
</span></span><span class="line"><span class="cl">SSID                   : MyWiFi
</span></span><span class="line"><span class="cl">BSSID                  : 30:d4:2e:50:de:7f
</span></span><span class="line"><span class="cl">Network type           : Infrastructure
</span></span><span class="line"><span class="cl">Radio type             : 802.11n
</span></span><span class="line"><span class="cl">Authentication         : WPA2-Personal
</span></span><span class="line"><span class="cl">Cipher                 : CCMP
</span></span><span class="line"><span class="cl">Connection mode        : Profile
</span></span><span class="line"><span class="cl">Channel                : 6
</span></span><span class="line"><span class="cl">Receive rate (Mbps)    : 115.6
</span></span><span class="line"><span class="cl">Transmit rate (Mbps)   : 115.6
</span></span><span class="line"><span class="cl">Signal                 : 97%
</span></span><span class="line"><span class="cl">Profile                : MyWiFi
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Hosted network status  : Not available
</span></span></code></pre></div><h3 id="the-regex-explained">The regex explained</h3>
<p>The PowerShell snippet below shows the regular expression and how the matches are added to a hash table collection as name = value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nv">$Properties</span> <span class="p">=</span> <span class="p">@{}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$result</span> <span class="p">=</span> <span class="n">netsh</span> <span class="n">wlan</span> <span class="n">show</span> <span class="n">interfaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Result</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;^\s+(?&lt;name&gt;[^:]+):\s(?&lt;value&gt;.*)$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$name</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">].</span><span class="n">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$val</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">].</span><span class="n">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$Properties</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The Foreach-Object loop above processes the NetSH command output line-by-line.<br>
Each line (the $_ variable) is tested for a match against the RegEx expression using the PowerShell -match operator.</p>
<p>The &ldquo;not&rdquo; operator <code>[^:]+</code> captures all the characters until the colon and saves them in the named capture group &ldquo;name&rdquo; <code>?&lt;name&gt;</code>. The match then expects a colon followed by a space. Finally, everything until the end of the line is saved to the named capture group &ldquo;value&rdquo; <code>?&lt;value&gt;</code>.</p>
<ul>
<li>MATCHES(0) = the entire line</li>
<li>MATCHES(&rsquo;name&rsquo;) = from the start of the line, match any character that is not a colon</li>
<li>MATCHES(&lsquo;value&rsquo;) = match everything from colon [space] to the end of the line</li>
</ul>
<p><img loading="lazy" src="/img/powershell-toolmaking-regex1.png" alt="RegEx"  />
</p>
<p>A complete Get-WLAN PowerShell function is provided below.</p>
<h2 id="powershell-script">PowerShell Script</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="k">Function</span> <span class="nb">Get-WLAN</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">  </span><span class="sd">.SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Gets the properties of WiFI connections
</span></span></span><span class="line"><span class="cl"><span class="cm">  </span><span class="sd">.DESCRIPTION</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    A PowerShell wrapper around NETSH WLAN to convert the output into a PS object
</span></span></span><span class="line"><span class="cl"><span class="cm">  </span><span class="sd">.INPUTS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    None
</span></span></span><span class="line"><span class="cl"><span class="cm">  </span><span class="sd">.OUTPUTS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    PSObject
</span></span></span><span class="line"><span class="cl"><span class="cm">  </span><span class="sd">.EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Get-WLAN
</span></span></span><span class="line"><span class="cl"><span class="cm">  </span><span class="sd">.NOTES</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Author:GD
</span></span></span><span class="line"><span class="cl"><span class="cm">    Website: www.write-verbose.com
</span></span></span><span class="line"><span class="cl"><span class="cm">    Twitter: @writeverbose
</span></span></span><span class="line"><span class="cl"><span class="cm">  #&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="k">cmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="k">param</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$Properties</span> <span class="p">=</span> <span class="p">@{}</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$result</span> <span class="p">=</span> <span class="n">netsh</span> <span class="n">wlan</span> <span class="n">show</span> <span class="n">interfaces</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$LASTEXITCODE</span> <span class="o">-eq</span> <span class="n">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$Properties</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s1">&#39;Computername&#39;</span><span class="p">,</span> <span class="nv">$ENV:COMPUTERNAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$Result</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="cm">&lt;# Example NETSH command output:
</span></span></span><span class="line"><span class="cl"><span class="cm">                Name                   : Wi-Fi
</span></span></span><span class="line"><span class="cl"><span class="cm">                Description            : Intel(R) Dual Band Wireless-AC 8260
</span></span></span><span class="line"><span class="cl"><span class="cm">                State                  : connected
</span></span></span><span class="line"><span class="cl"><span class="cm">                SSID                   : MyWiFi
</span></span></span><span class="line"><span class="cl"><span class="cm">                #&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;^\s+(?&lt;name&gt;[^:]+):\s(?&lt;value&gt;.*)$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$name</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">].</span><span class="n">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$val</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">].</span><span class="n">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Properties</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="c">#foreach</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$Properties</span><span class="p">.</span><span class="n">Count</span> <span class="o">-gt</span> <span class="n">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="no">[PSCustomObject][Ordered]</span><span class="nv">$Properties</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Warning</span> <span class="s2">&#34;Failed to parse NETSH output&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Write-Warning</span> <span class="s2">&#34;Error from NETSH - &#39;</span><span class="p">$(</span><span class="nv">$Error</span><span class="p">[</span><span class="n">0</span><span class="p">])</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="c">#process</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="regex-links">Regex Links</h2>
<p>For some practice with Regular Expressions, check out <a href="https://alf.nu/RegexGolf/">RegEx Golf</a> or <a href="https://regexcrossword.com/">Regex Crosswords</a>. There is even a <a href="https://www.bennadel.com/blog/3629-the-12th-annual-regular-expression-day---june-1st-2019.htm">Regular Expressions day</a>.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Audit Chrome Extensions with PowerShell</title>
      <link>https://write-verbose.com/2018/12/15/audit-google-chrome-extensions/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2018/12/15/audit-google-chrome-extensions/</guid>
      <description>A PowerShell script to list the installed Google Chrome extensions on a local or remote computer</description>
      <content:encoded><![CDATA[<p>This post includes a PowerShell <em>Get-ChromeExtension</em> script to list installed extensions on the local or remote computer.</p>
<p>Browser extensions are supposed to be curated and vetted, but there have been <a href="https://securityboulevard.com/2020/12/3-million-chrome-users-infected-via-extensions-here-we-go-again/">many examples of malware</a>. If you don&rsquo;t already have control of extensions through an allow or blocklist, the first step is to find out what is in-use.</p>
<p>The code below is a PowerShell function to get the installed Google Chrome browser extensions from a local or remote Windows computer.</p>
<blockquote>
<p>Chrome Browser Extensions install into the user profile and do not appear in the Add/Remove Programs list.</p>
</blockquote>
<p>Chrome Extensions are a challenge to audit due to the way they install and lack of enumeration options.
The PowerShell script below gets the installed extensions using the following method:</p>
<ul>
<li>Get the <strong>extension IDs</strong> from the folders names under <code>%userprofile%\AppData\Local\Google\Chrome\User Data\Default\Extensions</code></li>
<li>Lookup the <strong>extension name</strong> on the Chrome Web Store using the extension ID</li>
<li>Get the <strong>extension version</strong> from the <code>manifest.json</code> file in the extension folder</li>
</ul>
<h2 id="example-script-output">Example script output</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">C<span class="p">:</span><span class="nl">\</span><span class="c1">&gt; Get-ChromeExtension | Select Name,Version,Description | ft -AutoSize</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name                            Version      Description
</span></span><span class="line"><span class="cl">----                            -------      -----------
</span></span><span class="line"><span class="cl">Docs                            0.10         Create and edit documents
</span></span><span class="line"><span class="cl">Google Drive                    14.1         Google Drive: create, share and keep all your stuff in one place.
</span></span><span class="line"><span class="cl">YouTube                         4.2.8        The official YouTube website
</span></span><span class="line"><span class="cl">Sheets                          1.2          Create and edit spreadsheets
</span></span><span class="line"><span class="cl">Google Docs Offline             1.4          Get things done offline with the Google Docs family of products.
</span></span><span class="line"><span class="cl">Google Wallet                   1.0.0.4
</span></span><span class="line"><span class="cl">Gmail                           8.1          Fast, searchable email with less spam.
</span></span><span class="line"><span class="cl">Chrome Cast                     6618.312.0.2
</span></span><span class="line"><span class="cl">Slides                          0.10         Create and edit presentations
</span></span><span class="line"><span class="cl">Docs                            0.10         Create and edit documents
</span></span><span class="line"><span class="cl">Google Drive                    14.2         Google Drive: create, share and keep all your stuff in one place.
</span></span><span class="line"><span class="cl">YouTube                         4.2.8        The official YouTube website
</span></span><span class="line"><span class="cl">OneTab                          1.18         Save up to 95% memory and reduce tab clutter
</span></span><span class="line"><span class="cl">uBlock Origin                   1.20.0       Finally, an efficient blocker. Easy on CPU and memory.
</span></span><span class="line"><span class="cl">Dark Reader                     4.7.12       Dark mode for every website. Take care of your eyes, use dark theme for night and daily browsing.
</span></span><span class="line"><span class="cl">Share link via email            3.2.1        Adds a button and context menu item to send the page URL or a link URL via email
</span></span><span class="line"><span class="cl">Sheets                          1.2          Create and edit spreadsheets
</span></span><span class="line"><span class="cl">Google Docs Offline             1.7          Get things done offline with the Google Docs family of products.
</span></span><span class="line"><span class="cl">Pinterest Save Button           4.0.82       Save the things you find on the Web.
</span></span><span class="line"><span class="cl">Google Wallet                   1.0.0.4
</span></span><span class="line"><span class="cl">ColorPick Eyedropper            0.0.2.29     An eye-dropper <span class="p">&amp;</span>amp; color-picker tool that allows you to select color values from webpages.
</span></span><span class="line"><span class="cl">Gmail                           8.2          Fast, searchable email with less spam.
</span></span><span class="line"><span class="cl">Chrome Cast                     7519.422.0.3
</span></span></code></pre></div><h2 id="powershell-script">PowerShell Script</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="k">function</span> <span class="nb">Get-ChromeExtension</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Gets Chrome Extensions from a local or remote computer
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.DESCRIPTION</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Gets the name, version and description of the installed extensions
</span></span></span><span class="line"><span class="cl"><span class="cm">    Admin rights are required to access other profiles on the local computer or
</span></span></span><span class="line"><span class="cl"><span class="cm">    any profiles on a remote computer.
</span></span></span><span class="line"><span class="cl"><span class="cm">    Internet access is required to lookup the extension ID on the Chrome web store
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.PARAMETER</span><span class="cm"> Computername
</span></span></span><span class="line"><span class="cl"><span class="cm">    The name of the computer to connect to
</span></span></span><span class="line"><span class="cl"><span class="cm">    The default is the local machine
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.PARAMETER</span><span class="cm"> Username
</span></span></span><span class="line"><span class="cl"><span class="cm">    The username to query i.e. the userprofile (c:\users\&lt;username&gt;)
</span></span></span><span class="line"><span class="cl"><span class="cm">    If this parameter is omitted, all userprofiles are searched
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    PS C:\&gt; Get-ChromeExtension
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    This command will get the Chrome extensions from all the user profiles on the local computer
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    PS C:\&gt; Get-ChromeExtension -username Jsmith
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    This command will get the Chrome extensions installed under c:\users\jsmith on the local computer
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    PS C:\&gt; Get-ChromeExtension -Computername PC1234,PC4567
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    This command will get the Chrome extensions from all the user profiles on the two remote computers specified
</span></span></span><span class="line"><span class="cl"><span class="cm"> </span><span class="sd">.NOTES</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Version 1.0
</span></span></span><span class="line"><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="k">cmdletbinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="k">PARAM</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="k">parameter</span><span class="p">(</span><span class="k">Position</span> <span class="p">=</span> <span class="n">0</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="no">[string]</span><span class="nv">$Computername</span> <span class="p">=</span> <span class="nv">$ENV:COMPUTERNAME</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="k">parameter</span><span class="p">(</span><span class="k">Position</span> <span class="p">=</span> <span class="n">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="no">[string]</span><span class="nv">$Username</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">BEGIN</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c">#REGION --- Child function</span>
</span></span><span class="line"><span class="cl">        <span class="k">function</span> <span class="nb">Get-ExtensionInfo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">         </span><span class="sd">.SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">            Get Name and Version of the a Chrome extension
</span></span></span><span class="line"><span class="cl"><span class="cm">         </span><span class="sd">.PARAMETER</span><span class="cm"> Folder
</span></span></span><span class="line"><span class="cl"><span class="cm">            A directory object (under %userprofile%\AppData\Local\Google\Chrome\User Data\Default\Extensions)
</span></span></span><span class="line"><span class="cl"><span class="cm">        #&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="k">cmdletbinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">            <span class="k">PARAM</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="k">parameter</span><span class="p">(</span><span class="k">Position</span> <span class="p">=</span> <span class="n">0</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">                <span class="no">[IO.DirectoryInfo]</span><span class="nv">$Folder</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">BEGIN</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$BuiltInExtensions</span> <span class="p">=</span> <span class="p">@{</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;nmmhkkegccagdldgiimedpiccmgmieda&#39;</span> <span class="p">=</span> <span class="s1">&#39;Google Wallet&#39;</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;mhjfbmdgcfjbbpaeojofohoefgiehjai&#39;</span> <span class="p">=</span> <span class="s1">&#39;Chrome PDF Viewer&#39;</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;pkedcjkdefgpdelpbcmbmeomcjbeemfm&#39;</span> <span class="p">=</span> <span class="s1">&#39;Chrome Cast&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c"># Extension folders are under %userprofile%\AppData\Local\Google\Chrome\User Data\Default\Extensions</span>
</span></span><span class="line"><span class="cl">                <span class="c"># Folder names match extension ID e.g. blpcfgokakmgnkcojhhkbfbldkacnbeo</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$ExtID</span> <span class="p">=</span> <span class="nv">$Folder</span><span class="p">.</span><span class="n">Name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="nv">$Folder</span><span class="p">.</span><span class="n">FullName</span> <span class="o">-match</span> <span class="s1">&#39;\\Users\\(?&lt;username&gt;[^\\]+)\\&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Username</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Username</span> <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c"># There can be more than one version installed. Get the latest one</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$LastestExtVersionInstallFolder</span> <span class="p">=</span> <span class="nb">Get-ChildItem</span> <span class="n">-Path</span> <span class="nv">$Folder</span><span class="p">.</span><span class="n">Fullname</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Name</span> <span class="o">-match</span> <span class="s1">&#39;^[0-9\._-]+$&#39;</span> <span class="p">}</span> <span class="p">|</span> <span class="nb">Sort-Object</span> <span class="n">-Property</span> <span class="n">CreationTime</span> <span class="n">-Descending</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-First</span> <span class="n">1</span> <span class="n">-ExpandProperty</span> <span class="n">Name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c"># Get the version from the JSON manifest</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="n">-Path</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Folder</span><span class="p">.</span><span class="n">Fullname</span><span class="p">)</span><span class="s2">\$LastestExtVersionInstallFolder\Manifest.json&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Manifest</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="n">-Path</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Folder</span><span class="p">.</span><span class="n">Fullname</span><span class="p">)</span><span class="s2">\$LastestExtVersionInstallFolder\Manifest.json&#34;</span> <span class="n">-Raw</span> <span class="p">|</span> <span class="nb">ConvertFrom-Json</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="nv">$Manifest</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="o">-not</span><span class="p">(</span><span class="no">[string]</span><span class="p">::</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="nv">$Manifest</span><span class="p">.</span><span class="n">version</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nv">$Version</span> <span class="p">=</span> <span class="nv">$Manifest</span><span class="p">.</span><span class="n">version</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c"># Just use the folder name as the version</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Version</span> <span class="p">=</span> <span class="nv">$LastestExtVersionInstallFolder</span><span class="p">.</span><span class="n">Name</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="nv">$BuiltInExtensions</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="nv">$ExtID</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">                    <span class="c"># Built-in extensions do not appear in the Chrome Store</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Title</span> <span class="p">=</span> <span class="nv">$BuiltInExtensions</span><span class="p">[</span><span class="nv">$ExtID</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Description</span> <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c"># Lookup the extension in the Store</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$url</span> <span class="p">=</span> <span class="s2">&#34;https://chrome.google.com/webstore/detail/&#34;</span> <span class="p">+</span> <span class="nv">$ExtID</span> <span class="p">+</span> <span class="s2">&#34;?hl=en-us&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="c"># You may need to include proxy information</span>
</span></span><span class="line"><span class="cl">                        <span class="c"># $WebRequest = Invoke-WebRequest -Uri $url -ErrorAction Stop -Proxy &#39;http://proxy:port&#39; -ProxyUseDefaultCredentials</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="nv">$WebRequest</span> <span class="p">=</span> <span class="nb">Invoke-WebRequest</span> <span class="n">-Uri</span> <span class="nv">$url</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="nv">$WebRequest</span><span class="p">.</span><span class="n">StatusCode</span> <span class="o">-eq</span> <span class="n">200</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                            <span class="c"># Get the HTML Page Title but remove &#39; - Chrome Web Store&#39;</span>
</span></span><span class="line"><span class="cl">                            <span class="k">if</span> <span class="p">(</span><span class="o">-not</span><span class="p">(</span><span class="no">[string]</span><span class="p">::</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="nv">$WebRequest</span><span class="p">.</span><span class="n">ParsedHtml</span><span class="p">.</span><span class="n">title</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                                <span class="nv">$ExtTitle</span> <span class="p">=</span> <span class="nv">$WebRequest</span><span class="p">.</span><span class="n">ParsedHtml</span><span class="p">.</span><span class="n">title</span>
</span></span><span class="line"><span class="cl">                                <span class="k">if</span> <span class="p">(</span><span class="nv">$ExtTitle</span> <span class="o">-match</span> <span class="s1">&#39;\s-\s.*$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nv">$Title</span> <span class="p">=</span> <span class="nv">$ExtTitle</span> <span class="o">-replace</span> <span class="s1">&#39;\s-\s.*$&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nv">$extType</span> <span class="p">=</span> <span class="s1">&#39;ChromeStore&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nv">$Title</span> <span class="p">=</span> <span class="nv">$ExtTitle</span>
</span></span><span class="line"><span class="cl">                                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                            <span class="c"># Screen scrape the Description meta-data</span>
</span></span><span class="line"><span class="cl">                            <span class="nv">$Description</span> <span class="p">=</span> <span class="nv">$webRequest</span><span class="p">.</span><span class="n">AllElements</span><span class="p">.</span><span class="n">InnerHTML</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;&lt;meta name=&#34;Description&#34; content=&#34;([^&#34;]+)&#34;&gt;&#39;</span> <span class="p">}</span> <span class="p">|</span> <span class="nb">Select-object</span> <span class="n">-First</span> <span class="n">1</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span> <span class="nv">$Matches</span><span class="p">[</span><span class="n">1</span><span class="p">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">Write-Warning</span> <span class="s2">&#34;Error during webstore lookup for &#39;$ExtID&#39; - &#39;$_&#39;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="no">[PSCustomObject][Ordered]</span><span class="p">@{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Name</span>        <span class="p">=</span> <span class="nv">$Title</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Version</span>     <span class="p">=</span> <span class="nv">$Version</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Description</span> <span class="p">=</span> <span class="nv">$Description</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Username</span>    <span class="p">=</span> <span class="nv">$Username</span>
</span></span><span class="line"><span class="cl">                    <span class="n">ID</span>          <span class="p">=</span> <span class="nv">$ExtID</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#End function</span>
</span></span><span class="line"><span class="cl">        <span class="c">#ENDREGION -----</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$ExtensionFolderPath</span> <span class="p">=</span> <span class="s1">&#39;AppData\Local\Google\Chrome\User Data\Default\Extensions&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$Computer</span> <span class="k">in</span> <span class="nv">$Computername</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$Username</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c"># Single userprofile</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Path</span> <span class="p">=</span> <span class="nb">Join-path</span> <span class="n">-path</span> <span class="s2">&#34;fileSystem::\\$Computer\C$\Users\$Username&#34;</span> <span class="n">-ChildPath</span> <span class="nv">$ExtensionFolderPath</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Extensions</span> <span class="p">=</span> <span class="nb">Get-ChildItem</span> <span class="n">-Path</span> <span class="nv">$Path</span> <span class="n">-Directory</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c"># All user profiles that contain this a Chrome extensions folder</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Path</span> <span class="p">=</span> <span class="nb">Join-path</span> <span class="n">-path</span> <span class="s2">&#34;fileSystem::\\$Computer\C$\Users\*&#34;</span> <span class="n">-ChildPath</span> <span class="nv">$ExtensionFolderPath</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Extensions</span> <span class="p">=@()</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Get-Item</span> <span class="n">-Path</span> <span class="nv">$Path</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span> <span class="p">|</span> <span class="nb">ForEach-Object</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Extensions</span> <span class="p">+=</span> <span class="nb">Get-ChildItem</span> <span class="n">-Path</span> <span class="nv">$_</span> <span class="n">-Directory</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">-not</span><span class="p">(</span><span class="nv">$null</span> <span class="o">-eq</span> <span class="nv">$Extensions</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$Extension</span> <span class="k">in</span> <span class="nv">$Extensions</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Output</span> <span class="p">=</span> <span class="nb">Get-ExtensionInfo</span> <span class="n">-Folder</span> <span class="nv">$Extension</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Output</span> <span class="p">|</span> <span class="nb">Add-Member</span> <span class="n">-MemberType</span> <span class="n">NoteProperty</span> <span class="n">-Name</span> <span class="s1">&#39;Computername&#39;</span> <span class="n">-Value</span> <span class="nv">$Computer</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Output</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Warning</span> <span class="s2">&#34;$Computer : no extensions were found&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#foreach</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    
    
    <item>
      <title>WhoAmI</title>
      <link>https://write-verbose.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/about/</guid>
      <description>I live in the U.K. and work remotely on technology projects.
I&amp;rsquo;ve been self-employed for many years, working as an I.T. consultant for Fortune 500 companies, mainly in the financial sector.
Disclaimers: Views expressed are solely my own
Product reviews are based on real experience
Scripts and guides on this site should be tested in a non-production environment
There is no guarantee of accuracy</description>
      <content:encoded><![CDATA[<p>I live in the U.K. and work remotely on technology projects.</p>
<p>I&rsquo;ve been self-employed for many years, working as an I.T. consultant for Fortune 500 companies, mainly in the financial sector.</p>
<h3 id="disclaimers">Disclaimers:</h3>
<p>Views expressed are solely my own</p>
<p>Product reviews are based on real experience</p>
<p>Scripts and guides on this site should be tested in a non-production environment</p>
<p>There is no guarantee of accuracy</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
