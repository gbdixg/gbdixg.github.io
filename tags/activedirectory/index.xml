<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>activedirectory on Write-Verbose</title>
    <link>https://write-verbose.com/tags/activedirectory/</link>
    <description>Recent content in activedirectory on Write-Verbose</description>
    <image>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 13 Apr 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/tags/activedirectory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Find a computer&#39;s Active Directory Site and Subnet with PowerShell</title>
      <link>https://write-verbose.com/2019/04/13/find-adsite/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/04/13/find-adsite/</guid>
      <description>&lt;p&gt;Read-on for a PowerShell command to get the Active Directory Subnet and Site from the computername or IP Address.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Read-on for a PowerShell command to get the Active Directory Subnet and Site from the computername or IP Address.</p>
<p><strong>Active Directory Sites</strong> represent locations with good network connectivity. An ADSite is often created for each office or a group of offices in a metropolitan area, to generate the replication topology between Domain Controllers, and to help workstations/servers locate closest services.</p>
<p><strong>Active Directory Subnets</strong> define the IP ranges included in an AD Site. A member workstation/server will have an IP address that should fall within a defined AD subnet, making it part of an AD Site.</p>
<p>AD Site membership is not fixed. Laptops can move between Sites and Subnets when they roam to another location.</p>
<blockquote>
<p>An incorrect or undefined AD subnet can lead to slow logon times and slow access to DFS shares. A domain member would use any server that responds when it isn&rsquo;t in a defined subnet.</p>
</blockquote>
<h2 id="powershell-script">PowerShell script</h2>
<p>The <strong>Find-ADSite</strong> PowerShell function below will return the AD Site and Subnet for a specified computer name or IP Address.<br>
If a company populates subnet descriptions with useful information, it can also identify information such as the specific Office or floor.</p>
<p>AD Administrators may define a <a href="https://blog.mindcore.dk/2013/07/catch-all-or-super-subnet-in-sites-and/">catch-all subnet</a> with a wide address range. By default if the IP address is within more than one subnet, the output will only include the smallest range. Use the -AllMatches parameter to see everything.</p>
<p><img loading="lazy" src="/img/find-adsite1.png" alt="Find-ADSite"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">Function Find-ADSite <span class="o">{</span>
</span></span><span class="line"><span class="cl">    &lt;<span class="c1">#</span>
</span></span><span class="line"><span class="cl"> .Synopsis
</span></span><span class="line"><span class="cl">  Used to get the Active Directory subnet and the site it is assigned to <span class="k">for</span> a Windows computer/IP address
</span></span><span class="line"><span class="cl"> .Description
</span></span><span class="line"><span class="cl">  Requires only standard user <span class="nb">read</span> access to AD and can determine the ADSite <span class="k">for</span> a <span class="nb">local</span> or remote computer
</span></span><span class="line"><span class="cl"> .PARAMETER  IPAddress
</span></span><span class="line"><span class="cl">  Specifies the IP Address <span class="k">for</span> the subnet/site lookup in as a .NET System.Net.IPAddress
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  When this parameter is used, the computername is not specified.
</span></span><span class="line"><span class="cl"> .PARAMETER  Computername
</span></span><span class="line"><span class="cl">  Specifies a computername <span class="k">for</span> the subnet/site lookup.
</span></span><span class="line"><span class="cl">  The computername is resolved to an IP address before performing the subnet query.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  Defaults to %COMPUTERNAME%
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  When this parameter is used, the IPAddress and IP are not specified.
</span></span><span class="line"><span class="cl"> .PARAMETER  DC
</span></span><span class="line"><span class="cl">  A specific domain controller in the current users domain <span class="k">for</span> the subnet query
</span></span><span class="line"><span class="cl">  If not specified, standard DC locator methods are used.
</span></span><span class="line"><span class="cl"> .PARAMETER  AllMatches
</span></span><span class="line"><span class="cl">  A switch parameter that causes the subnet query to <span class="k">return</span> all matching subnets in AD
</span></span><span class="line"><span class="cl">  This is not normally used as the default behaviour <span class="o">(</span>only the most specific match is returned<span class="o">)</span> is usually prefered.
</span></span><span class="line"><span class="cl">  This switch will include <span class="s2">&#34;catch-all&#34;</span> subnets that may be defined to accomodate missing subnets
</span></span><span class="line"><span class="cl"> .Example
</span></span><span class="line"><span class="cl">  PS C:<span class="se">\&gt;</span>Find-ADSite -ComputerName PC123456789
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  ComputerName      : PC123456789
</span></span><span class="line"><span class="cl">  IPAddress         : 162.26.192.151
</span></span><span class="line"><span class="cl">  ADSubnetName      : 162.26.192.128/25
</span></span><span class="line"><span class="cl">  ADSubnetDesc      : 3rd Floor Main Road Office
</span></span><span class="line"><span class="cl">  ADSiteName        : EULON01
</span></span><span class="line"><span class="cl">  ADSiteDescription : London
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> .Notes
</span></span><span class="line"><span class="cl">  Version:        1.1
</span></span><span class="line"><span class="cl"><span class="c1">#&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="o">[</span>CmdletBinding<span class="o">(</span><span class="nv">DefaultParameterSetName</span> <span class="o">=</span> <span class="s2">&#34;byHost&#34;</span><span class="o">)]</span>
</span></span><span class="line"><span class="cl">    Param<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="o">[</span>Parameter<span class="o">(</span><span class="nv">Position</span> <span class="o">=</span> 0, <span class="nv">ValueFromPipeline</span> <span class="o">=</span> <span class="nv">$true</span>, <span class="nv">ValueFromPipelineByPropertyName</span> <span class="o">=</span> <span class="nv">$True</span>, <span class="nv">ParameterSetName</span> <span class="o">=</span> <span class="s2">&#34;byHost&#34;</span><span class="o">)]</span>
</span></span><span class="line"><span class="cl">        <span class="o">[</span>string<span class="o">]</span><span class="nv">$ComputerName</span> <span class="o">=</span> <span class="nv">$Env</span>:COMPUTERNAME
</span></span><span class="line"><span class="cl">        ,
</span></span><span class="line"><span class="cl">        <span class="o">[</span>Parameter<span class="o">(</span><span class="nv">Position</span> <span class="o">=</span> 0, <span class="nv">ValueFromPipeline</span> <span class="o">=</span> <span class="nv">$true</span>, <span class="nv">ValueFromPipelineByPropertyName</span> <span class="o">=</span> <span class="nv">$True</span>, <span class="nv">Mandatory</span> <span class="o">=</span> <span class="nv">$True</span>, <span class="nv">ParameterSetName</span> <span class="o">=</span> <span class="s2">&#34;byIPAddress&#34;</span><span class="o">)]</span>
</span></span><span class="line"><span class="cl">        <span class="o">[</span>System.Net.IPAddress<span class="o">]</span><span class="nv">$IPAddress</span>
</span></span><span class="line"><span class="cl">        ,
</span></span><span class="line"><span class="cl">        <span class="o">[</span>Parameter<span class="o">(</span><span class="nv">Position</span> <span class="o">=</span> 1<span class="o">)]</span>
</span></span><span class="line"><span class="cl">        <span class="o">[</span>string<span class="o">]</span><span class="nv">$DC</span>
</span></span><span class="line"><span class="cl">        ,
</span></span><span class="line"><span class="cl">        <span class="o">[</span>Parameter<span class="o">()]</span>
</span></span><span class="line"><span class="cl">        <span class="o">[</span>switch<span class="o">]</span><span class="nv">$AllMatches</span>
</span></span><span class="line"><span class="cl">    <span class="o">)</span>
</span></span><span class="line"><span class="cl">    PROCESS <span class="o">{</span>
</span></span><span class="line"><span class="cl">        switch <span class="o">(</span><span class="nv">$pscmdlet</span>.ParameterSetName<span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;byHost&#34;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                try <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Resolved</span> <span class="o">=</span> <span class="o">[</span>system.net.dns<span class="o">]</span>::GetHostByName<span class="o">(</span><span class="nv">$Computername</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="o">[</span>System.Net.IPAddress<span class="o">]</span><span class="nv">$IP</span> <span class="o">=</span> <span class="o">(</span><span class="nv">$Resolved</span>.AddressList<span class="o">)[</span>0<span class="o">]</span> -as <span class="o">[</span>System.Net.IPAddress<span class="o">]</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>catch<span class="o">{</span>
</span></span><span class="line"><span class="cl">                    Write-Warning <span class="s2">&#34;</span><span class="nv">$ComputerName</span><span class="s2"> :: Unable to resolve name to an IP Address&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$IP</span> <span class="o">=</span> <span class="nv">$Null</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;byIPAddress&#34;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                try <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Resolved</span> <span class="o">=</span> <span class="o">[</span>system.net.dns<span class="o">]</span>::GetHostByAddress<span class="o">(</span><span class="nv">$IPAddress</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ComputerName</span> <span class="o">=</span> <span class="nv">$Resolved</span>.HostName
</span></span><span class="line"><span class="cl">                <span class="o">}</span> catch <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># Write-Warning &#34;$IP :: Could not be resolved to a hostname&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ComputerName</span> <span class="o">=</span> <span class="s2">&#34;Unable to resolve&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$IP</span> <span class="o">=</span> <span class="nv">$IPAddress</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="o">}</span><span class="c1">#switch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="nv">$IP</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># The following maths loops over all the possible subnet mask lengths</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># The masks are converted into the number of Bits to allow conversion to CIDR format</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># The script tries to lookup every possible range/subnet bits combination and keeps going until it finds a hit in AD</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="o">[</span>psobject<span class="o">[]]</span><span class="nv">$MatchedSubnets</span> <span class="o">=</span> @<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            For <span class="o">(</span><span class="nv">$bit</span> <span class="o">=</span> <span class="m">30</span> <span class="p">;</span> <span class="nv">$bit</span> -ge 1<span class="p">;</span> <span class="nv">$bit</span>--<span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="o">[</span>int<span class="o">]</span><span class="nv">$octet</span> <span class="o">=</span> <span class="o">[</span>math<span class="o">]</span>::Truncate<span class="o">((</span><span class="nv">$bit</span> - <span class="m">1</span> <span class="o">)</span> / 8<span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$net</span> <span class="o">=</span> <span class="o">[</span>byte<span class="o">[]]</span>@<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="o">(</span><span class="nv">$o</span> <span class="o">=</span> 0<span class="p">;</span> <span class="nv">$o</span> -le 3<span class="p">;</span> <span class="nv">$o</span>++<span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ba</span> <span class="o">=</span> <span class="nv">$ip</span>.GetAddressBytes<span class="o">()</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="o">(</span><span class="nv">$o</span> -lt <span class="nv">$Octet</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> +<span class="o">=</span> <span class="nv">$ba</span><span class="o">[</span><span class="nv">$o</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span> ELSEIF <span class="o">(</span><span class="nv">$o</span> -eq <span class="nv">$octet</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$factor</span> <span class="o">=</span> <span class="m">8</span> + <span class="nv">$Octet</span> * <span class="m">8</span> - <span class="nv">$bit</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Divider</span> <span class="o">=</span> <span class="o">[</span>math<span class="o">]</span>::pow<span class="o">(</span>2, <span class="nv">$factor</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$divider</span> * <span class="o">[</span>math<span class="o">]</span>::Truncate<span class="o">(</span><span class="nv">$ba</span><span class="o">[</span><span class="nv">$o</span><span class="o">]</span> / <span class="nv">$divider</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> +<span class="o">=</span> <span class="nv">$value</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span> ELSE <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> +<span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span> <span class="c1">#Next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1">#Format network in CIDR notation</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Network</span> <span class="o">=</span> <span class="o">[</span>string<span class="o">]</span>::join<span class="o">(</span><span class="s1">&#39;.&#39;</span>, <span class="nv">$net</span><span class="o">)</span> + <span class="s2">&#34;/</span><span class="nv">$bit</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1"># Try to find this Network in AD Subnets list</span>
</span></span><span class="line"><span class="cl">                Write-Verbose <span class="s2">&#34;Trying : </span><span class="nv">$Network</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                try<span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$de</span> <span class="o">=</span> New-Object System.DirectoryServices.DirectoryEntry<span class="o">(</span><span class="s2">&#34;LDAP://&#34;</span> + <span class="nv">$DC</span> + <span class="s2">&#34;rootDSE&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Root</span> <span class="o">=</span> New-Object System.DirectoryServices.DirectoryEntry<span class="o">(</span><span class="s2">&#34;LDAP://</span><span class="nv">$DC</span><span class="k">$(</span><span class="nv">$de</span>.configurationNamingContext<span class="k">)</span><span class="s2">&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ds</span> <span class="o">=</span> New-Object System.Directoryservices.DirectorySearcher<span class="o">(</span><span class="nv">$root</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ds</span>.filter <span class="o">=</span> <span class="s2">&#34;(CN=</span><span class="nv">$Network</span><span class="s2">)&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Result</span> <span class="o">=</span> <span class="nv">$ds</span>.findone<span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>catch<span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Result</span> <span class="o">=</span> <span class="nv">$null</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="o">(</span><span class="nv">$Result</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    write-verbose <span class="s2">&#34;AD Site found for </span><span class="nv">$IP</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c1"># Try to split out AD Site from LDAP path</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$SiteDN</span> <span class="o">=</span> <span class="nv">$Result</span>.GetDirectoryEntry<span class="o">()</span>.siteObject
</span></span><span class="line"><span class="cl">                    <span class="nv">$SiteDe</span> <span class="o">=</span> New-Object -TypeName System.DirectoryServices.DirectoryEntry<span class="o">(</span><span class="s2">&#34;LDAP://</span><span class="nv">$SiteDN</span><span class="s2">&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ADSite</span> <span class="o">=</span> <span class="nv">$SiteDe</span>.Name<span class="o">[</span>0<span class="o">]</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ADSiteDescription</span> <span class="o">=</span> <span class="nv">$SiteDe</span>.Description<span class="o">[</span>0<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$MatchedSubnets</span> +<span class="o">=</span> <span class="o">[</span>PSCustomObject<span class="o">][</span>Ordered<span class="o">]</span>@<span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">ComputerName</span> <span class="o">=</span> <span class="nv">$ComputerName</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">IPAddress</span>    <span class="o">=</span> <span class="nv">$IP</span>.ToString<span class="o">()</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">ADSubnetName</span> <span class="o">=</span> <span class="k">$(</span><span class="nv">$Result</span>.properties.name<span class="k">)</span>.ToString<span class="o">()</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">ADSubnetDesc</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="k">$(</span><span class="nv">$Result</span>.properties.description<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">ADSiteName</span>       <span class="o">=</span> <span class="nv">$ADSite</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">ADSiteDescription</span> <span class="o">=</span> <span class="nv">$ADSiteDescription</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$bFound</span> <span class="o">=</span> <span class="nv">$true</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span><span class="c1">#endif</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span><span class="c1">#next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="o">}</span><span class="c1">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="nv">$bFound</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="nv">$AllMatches</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># output all the matched subnets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$MatchedSubnets</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c1"># Only output the subnet with the largest mask bits</span>
</span></span><span class="line"><span class="cl">                <span class="o">[</span>Int32<span class="o">]</span><span class="nv">$MaskBits</span> <span class="o">=</span> <span class="m">0</span> <span class="c1"># initial value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                Foreach <span class="o">(</span><span class="nv">$MatchedSubnet</span> in <span class="nv">$MatchedSubnets</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="o">(</span><span class="nv">$MatchedSubnet</span>.ADSubnetName -match <span class="s2">&#34;\/(?&lt;Bits&gt;\d+)</span>$<span class="s2">&#34;</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        <span class="o">[</span>Int32<span class="o">]</span><span class="nv">$ThisMaskBits</span> <span class="o">=</span> <span class="nv">$Matches</span><span class="o">[</span><span class="s1">&#39;Bits&#39;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">                        Write-Verbose <span class="s2">&#34;ThisMaskBits = &#39;</span><span class="nv">$ThisMaskBits</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="o">(</span><span class="nv">$ThisMaskBits</span> -gt <span class="nv">$MaskBits</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            <span class="c1"># This is a more specific subnet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                            <span class="nv">$OutputSubnet</span> <span class="o">=</span> <span class="nv">$MatchedSubnet</span>
</span></span><span class="line"><span class="cl">                            <span class="nv">$MaskBits</span> <span class="o">=</span> <span class="nv">$ThisMaskBits</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                            Write-Verbose <span class="s2">&#34;No match&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="o">}</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                        Write-Verbose <span class="s2">&#34;No match&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$OutputSubnet</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span><span class="c1">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            Write-Verbose <span class="s2">&#34;AD Subnet not found for </span><span class="nv">$IP</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="nv">$IP</span> -eq <span class="nv">$null</span><span class="o">)</span> <span class="o">{</span><span class="nv">$IP</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">}</span> <span class="c1"># required to prevent exception on ToString() below</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            New-Object -TypeName PSObject -Property @<span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="nv">ComputerName</span> <span class="o">=</span> <span class="nv">$ComputerName</span>
</span></span><span class="line"><span class="cl">                <span class="nv">IPAddress</span>    <span class="o">=</span> <span class="nv">$IP</span>.ToString<span class="o">()</span>
</span></span><span class="line"><span class="cl">                <span class="nv">ADSubnetName</span> <span class="o">=</span> <span class="s2">&#34;Not found&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="nv">ADSubnetDesc</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="nv">ADSiteName</span>   <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="nv">ADSiteDescription</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span><span class="c1">#end if</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span><span class="c1">#process</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Active Directory ADSystemInfo with PowerShell</title>
      <link>https://write-verbose.com/2019/03/30/adsysteminfo/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/03/30/adsysteminfo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;ADSystemInfo is a built-in COM object in Windows that simplifies lookup of Active Directory user and computer information.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>ADSystemInfo is a built-in COM object in Windows that simplifies lookup of Active Directory user and computer information.</p>
</blockquote>
<p>ADSystemInfo can only return information about the local computer and current user. The computer must be joined to a domain and a domain controller must be reachable when the function is called.</p>
<p>Its simple to instantiate COM objects in PowerShell. The function below shows how to use this object.</p>
<h2 id="example-output">EXAMPLE OUTPUT</h2>
<p><img loading="lazy" src="/img/adsysteminfo.png" alt="Get-ADSystemInfo"  />
</p>
<h2 id="powershell-script">POWERSHELL SCRIPT</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">Function Get-ADSystemInfo<span class="o">{</span>
</span></span><span class="line"><span class="cl">&lt;<span class="c1">#</span>
</span></span><span class="line"><span class="cl">	.Synopsis
</span></span><span class="line"><span class="cl">		Used to lookup specific AD user/computer object properties of the current session
</span></span><span class="line"><span class="cl">	.Description
</span></span><span class="line"><span class="cl">		Uses <span class="s2">&#34;ADSystemInfo&#34;</span> COM object to get Active Directory attributes <span class="k">for</span> the current user and computer
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	.Example
</span></span><span class="line"><span class="cl">		PS C:<span class="se">\&gt;</span>Get-ADSystemInfo
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		ComputerDN      : <span class="nv">CN</span><span class="o">=</span>EGBLHCNU335BQCG,OU<span class="o">=</span>GBR,OU<span class="o">=</span>Workstations,OU<span class="o">=</span>EU,OU<span class="o">=</span>Regions,DC<span class="o">=</span>mycompany,DC<span class="o">=</span>com
</span></span><span class="line"><span class="cl">		SiteName        : EULON
</span></span><span class="line"><span class="cl">		DomainDNSName   : mycompany.com
</span></span><span class="line"><span class="cl">		DomainShortName : MYCOMPANY
</span></span><span class="line"><span class="cl">		ForestDNSName   : mycompany.com
</span></span><span class="line"><span class="cl">		IsNativeMode    : True
</span></span><span class="line"><span class="cl">		PDCRoleOwner    : <span class="nv">CN</span><span class="o">=</span>527616-NAADCP01,CN<span class="o">=</span>Servers,CN<span class="o">=</span>Global,CN<span class="o">=</span>Sites,CN<span class="o">=</span>Configuration,DC<span class="o">=</span>mycompany,DC<span class="o">=</span>com
</span></span><span class="line"><span class="cl">		SchemaRoleOwner : <span class="nv">CN</span><span class="o">=</span>527616-NAADCP01,CN<span class="o">=</span>Servers,CN<span class="o">=</span>Global,CN<span class="o">=</span>Sites,CN<span class="o">=</span>Configuration,DC<span class="o">=</span>mycompany,DC<span class="o">=</span>com
</span></span><span class="line"><span class="cl">		UserDN          : <span class="nv">CN</span><span class="o">=</span>gdixon2,OU<span class="o">=</span>Users,OU<span class="o">=</span>GBR,OU<span class="o">=</span>Accounts,OU<span class="o">=</span>EU,OU<span class="o">=</span>Regions,DC<span class="o">=</span>mycompany,DC<span class="o">=</span>com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	.Notes
</span></span><span class="line"><span class="cl">		Version:        1.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	.Link
</span></span><span class="line"><span class="cl">		http://msdn.microsoft.com/en-us/library/aa705962<span class="o">(</span>VS.85<span class="o">)</span>.aspx
</span></span><span class="line"><span class="cl"><span class="c1">#&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>CmdletBinding<span class="o">()]</span>
</span></span><span class="line"><span class="cl">Param<span class="o">()</span>
</span></span><span class="line"><span class="cl">	Process<span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nv">$Output</span> <span class="o">=</span> New-Object -TypeName PSObject <span class="p">|</span>
</span></span><span class="line"><span class="cl">				Select ComputerDN,SiteName,DomainDNSName,DomainShortName,ForestDNSName,IsNativeMode,PDCRoleOwner,SchemaRoleOwner,UserDN
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$obj</span> <span class="o">=</span> new-object -com ADSystemInfo
</span></span><span class="line"><span class="cl">			<span class="nv">$type</span> <span class="o">=</span> <span class="nv">$obj</span>.gettype<span class="o">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.ComputerDN <span class="o">=</span> <span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;ComputerName&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.SiteName <span class="o">=</span> <span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;sitename&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.DomainDNSName <span class="o">=</span> <span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;DomainDNSName&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.DomainShortName <span class="o">=</span> <span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;DomainShortName&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.ForestDNSName <span class="o">=</span> <span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;ForestDNSName&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.IsNativeMode <span class="o">=</span> <span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;IsNativeMode&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.PDCRoleOwner <span class="o">=</span> <span class="o">(</span><span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;PDCRoleOwner&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span> -replace <span class="s2">&#34;CN=NTDS Settings,&#34;</span>,<span class="s2">&#34;&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.SchemaRoleOwner <span class="o">=</span> <span class="o">(</span><span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;SchemaRoleOwner&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span> -replace <span class="s2">&#34;CN=NTDS Settings,&#34;</span>,<span class="s2">&#34;&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>.UserDN <span class="o">=</span> <span class="nv">$type</span>.InvokeMember<span class="o">(</span><span class="s2">&#34;UserName&#34;</span>,<span class="s2">&#34;GetProperty&#34;</span>,<span class="nv">$null</span>,<span class="nv">$obj</span>,<span class="nv">$null</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>
</span></span><span class="line"><span class="cl">	<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
  </channel>
</rss>
