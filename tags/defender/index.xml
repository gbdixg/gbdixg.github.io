<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Defender on Write-Verbose</title>
    <link>https://write-verbose.com/tags/defender/</link>
    <description>Recent content in Defender on Write-Verbose</description>
    <image>
      <title>Write-Verbose</title>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 31 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/tags/defender/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bypassing Defender EDR using Windows Firewall - mitigations</title>
      <link>https://write-verbose.com/2022/05/31/EDRBypass/</link>
      <pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2022/05/31/EDRBypass/</guid>
      <description>How to prevent an attacker using Windows Firewall to bypass Endpoint Detection</description>
      <content:encoded><![CDATA[<p>Attackers can use Windows Firewall to block EDR telemetry leaving the endpoint.  Read-on for how this is mitigated.</p>
<h2 id="risk-background">Risk background</h2>
<p>As well as the usual source and destination variables, Windows Firewall can also block outbound communication based on the <em>service name</em> or <em>program</em> that initiates the communication.</p>
<p>An attacker with elevated endpoint access will want to shut down Defender EDR as soon as possible and one method is to block the client agent communication with the cloud service.</p>
<p>The following PowerShell commands can achieve this, blocking outbound TCP/443 from:</p>
<ul>
<li><em>WinDefend</em> service (main MDAV process)</li>
<li><em>SenseCNDProxy</em> process (acts as a communication broker)</li>
<li><em>MSSense</em> process (Main MDE process)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># PowerShell commands to Disable outbound 443 from MDE agent to cloud service</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">New-NetFirewallRule</span> <span class="n">-DisplayName</span> <span class="s2">&#34;Block 443 MsMpEng&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;Block 443 MsMpEng&#34;</span> <span class="n">-Direction</span> <span class="n">Outbound</span> <span class="n">-Service</span> <span class="n">WinDefend</span> <span class="n">-Enabled</span> <span class="n">True</span> <span class="n">-RemotePort</span> <span class="mf">443</span> <span class="n">-Protocol</span> <span class="n">TCP</span> <span class="n">-Action</span> <span class="n">Block</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">New-NetFirewallRule</span> <span class="n">-DisplayName</span> <span class="s2">&#34;Block 443 SenseCncProxy&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;Block 443 SenseCncProxy&#34;</span> <span class="n">-Direction</span> <span class="n">Outbound</span> <span class="n">-Program</span> <span class="s2">&#34;%ProgramFiles%\Windows Defender Advanced Threat Protection\SenseCncProxy.exe&#34;</span> <span class="n">-RemotePort</span> <span class="mf">443</span> <span class="n">-Protocol</span> <span class="n">TCP</span> <span class="n">-Action</span> <span class="n">Block</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">New-NetFirewallRule</span> <span class="n">-DisplayName</span> <span class="s2">&#34;Block 443 MsSense&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;Block 443 MsSense&#34;</span> <span class="n">-Direction</span> <span class="n">Outbound</span> <span class="n">-Program</span> <span class="s2">&#34;%ProgramFiles%\Windows Defender Advanced Threat Protection\MsSense.exe&#34;</span> <span class="n">-RemotePort</span> <span class="mf">443</span> <span class="n">-Protocol</span> <span class="n">TCP</span> <span class="n">-Action</span> <span class="n">Block</span>
</span></span></code></pre></div><h2 id="mitigation">Mitigation</h2>
<h3 id="1---tamper-protection">1 - Tamper Protection</h3>
<p>The most important mitigation is to enable <strong>MDE Tamper Protection</strong>.</p>
<p>Tamper protection prevents users with elevated rights on the endpoint making changes to the MDE client configuration. Tamper Projection includes prevention of local firewall rules affecting MDE processes.  If you run the commands above, MDE will generate an alert and block the changes.</p>
<p>Enable Tamper Protection as follows:</p>
<blockquote>
<p>MDE Security Portal &gt; Settings &gt; Endpoints &gt; Advanced Features &gt; Tamper Protection = On</p>
</blockquote>
<h3 id="2--firewall-rule-merging">2- Firewall Rule Merging</h3>
<p>Windows Firewall local rule merging should be disabled to prevent local changes.</p>
<p>The Windows Firewall has <em>Rule Sources</em>.  For example, Group Policy is one rule source and local rules are another. When the Firewall is managed by GPO or Intune, it still allows local rule merging by default.</p>
<p>When rule merging is enabled, local block rules can over-ride policy-based allow rules. Similarly, local allow rules can override policy-based profile defaults (profile defaults are initial rules applied to each profile - Domain / Private / Public).</p>
<p>Disable Local Rule Merging as follows:</p>
<p>Group Policy Editor:</p>
<blockquote>
<p>Computer Configuration &gt; Security Settings &gt; Windows Firewall with Advanced Security &gt; Properties &gt; Settings &gt; [PROFILE NAME] &gt; Settings &gt; Apply local firewall rules = No</p>
</blockquote>
<p>Intune Policy:</p>
<blockquote>
<p>Endpoint security &gt; Firewall &gt; Create policy &gt; Create a profile &gt; Windows 10 / 11 / Server &gt; Microsoft Defender Firewall &gt; [Provide a Name] &gt; Allow local policy merge = False</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>With Tamper Protection enabled and Windows Firewall local rule merging disabled, the chances of at attacker abusing firewall rules are slim.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Access api.securitycenter.microsoft.com interactively with PowerShell</title>
      <link>https://write-verbose.com/2023/05/24/DefenderSecurityAPI/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/05/24/DefenderSecurityAPI/</guid>
      <description>Use Authorization Code Flow to access the Defender Security Center API with PowerShell</description>
      <content:encoded><![CDATA[<p>This post is an introduction to accessing the Defender Security Center API in PowerShell using interactive authentication. It is the basis for building tools and scripts to enhance day-to-day productivity that I&rsquo;ll explore in future posts.</p>
<h2 id="background">Background</h2>
<p>The Defender Security API is a gold mine as it can provide access to key MDE features including:</p>
<ul>
<li>Device information</li>
<li>Alerts</li>
<li>MDE Configuration</li>
<li>Run Advanced Hunting queries</li>
<li>Initiate Live Response and manage Library scripts</li>
<li>Initiate Scans and Isolation</li>
</ul>
<p>I struggled to find examples of using the API interactively. Microsoft articles have examples using a client secret, which is fine for automation, but not ideal for interactive use.  The following steps demonstrate interactive access to the API.</p>
<h2 id="azure-app">Azure App</h2>
<p>The first step is to create an Azure Application to control the permissions available and limit admin access to the API.</p>
<h3 id="create-the-app">Create the App</h3>
<p>In the Azure Portal, go to the <strong>App Registrations</strong> blade and select <strong>New Registration</strong></p>
<p>Enter a name for the app e.g. <strong>DefenderSecurityAPI</strong> (visible in MFA challenges and sign-in logs)</p>
<p>Leave the <em>Supported Account Types</em> on the default <strong>Single Tenant</strong></p>
<p>Do not configure a Redirect URL at this stage.</p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/AppReg1.png" alt="Register App"  />
</p>
<p>Select <strong>Register</strong> to create the app.</p>
<p>You are presented with the App <em>Overview</em> page.  Select <strong>Add a redirect URI</strong>, then <strong>Add a Platform</strong></p>
<p>Select <strong>Mobile and Desktop applications</strong></p>
<p>Enable the check box next to the nativeclient URL and also add local host in the Custom Redirect URIs:</p>
<ul>
<li><strong><a href="https://login.microsoftonline.com/common/oauth2/nativeclient" target="_blank">https://login.microsoftonline.com/common/oauth2/nativeclient</a></strong></li>
<li><strong><a href="http://localhost" target="_blank">http://localhost</a></strong></li>
</ul>
<p>Select <strong>Configure</strong> to save the redirect URLs</p>
<p>Next select <em>API Permissions</em> in the left pane, then <strong>Add a permission</strong></p>
<p>Select the <strong>APIs my organization uses</strong> tab and then use the search box to find <strong>WindowsDefenderATP</strong></p>
<p>Select <strong>Delegated Permissions</strong></p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/APIPerms.png" alt="API Permissions"  />
</p>
<p>Expand the categories and select the individual permissions required<br>
e.g. <em>Alert.Read, AdvancedQuery.Read, Machine.Read, Machine.Scan, Machine.RestrictExecution, Machine.Isolate, Machine.CollectForensics, Machine.Offboard, Software.Read</em></p>
<p>Once you&rsquo;ve finished adding permissions, select <strong>Grant admin consent for tenant_name</strong></p>
<p>Delegated permissions mean both the user and the app must have the required permission. The app won&rsquo;t elevate privileges.</p>
<h3 id="restrict-access-to-the-app">Restrict Access to the app</h3>
<p>To restrict who can use the app, we need to go to the <strong>Enterprise applications</strong> blade, either using the Azure Portal search box, or by navigating to the root of Azure AD and selecting it in the left pane.</p>
<p>Select the app in the list to open its <em>Overview</em> page, then select <strong>Properties</strong> in the left pane.<br>
Change <strong>Assignment Required</strong> to <em>Yes</em> and then <em>Save</em><br>
Select <strong>Users and groups</strong> in the left pane and then select <strong>Add user/group</strong><br>
Select an existing group that will be allowed to authenticate using the App.</p>
<blockquote>
<p>NOTE: Although we consented to API permissions in the previous step, it was only delegated permissions. The group members must also be granted permission to read or change Security assets e.g. through a built-in Role, such as <em>Security Administrator</em>.</p>
</blockquote>
<p>Select the <strong>Overview</strong> link in the left pane and copy the <em>Application ID</em> as this will be a script variable along with the TenantID.</p>
<h2 id="authenticate-using-msalps">Authenticate using MSAL.PS</h2>
<p>Use the <em>MSAL.PS</em> PowerShell module to authenticate interactively and cache an access token. The important part is to specify a security API scope.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Pre-req</span>
</span></span><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">MSAL</span><span class="p">.</span><span class="nb">PS </span><span class="n">-MinimumVersion</span> <span class="mf">4.37</span><span class="p">.</span><span class="py">0</span><span class="p">.</span><span class="py">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Replace with your Application and Tenant IDs</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ApplicationID</span> <span class="p">=</span> <span class="s1">&#39;446e4714-3226-489e-b602-1515d6822e09&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$TenantID</span> <span class="p">=</span> <span class="s1">&#39;b0530087-fc9a-44e7-ad6f-1b045d56e15d&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Specify at least one security center API scope</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Scopes</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s2">&#34;https://api.securitycenter.microsoft.com/Machine.Read&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Authenticate interactively with authorization code flow</span>
</span></span><span class="line"><span class="cl"><span class="nv">$AccessToken</span> <span class="p">=</span> <span class="nb">Get-MsalToken</span> <span class="n">-ClientId</span> <span class="nv">$ApplicationID</span> <span class="n">-TenantId</span> <span class="nv">$TenantID</span> <span class="n">-Scopes</span> <span class="nv">$Scopes</span>
</span></span></code></pre></div><blockquote>
<p>If authentication fails with a message &ldquo;You can&rsquo;t get there from here&rdquo;, see the <em>Conditional Access</em> section below.</p>
</blockquote>
<h2 id="call-the-api">Call the API</h2>
<p>With an access token cached, its straight forward to call the Security Center API using Invoke-Restmethod. The following is a basic example of getting device information:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Build the authentication header</span>
</span></span><span class="line"><span class="cl"><span class="nv">$AuthenticationHeader</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Content-Type&#34;</span>  <span class="p">=</span> <span class="s2">&#34;application/json&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Authorization&#34;</span> <span class="p">=</span> <span class="nv">$AccessToken</span><span class="p">.</span><span class="py">CreateAuthorizationHeader</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;ExpiresOn&#34;</span>     <span class="p">=</span> <span class="nv">$AccessToken</span><span class="p">.</span><span class="py">ExpiresOn</span><span class="p">.</span><span class="py">UTCDateTime</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Example getting details of an MDE client device</span>
</span></span><span class="line"><span class="cl"><span class="c"># The deviceID is available on the device details blade in the Security Center portal</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Method</span> <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$MachineID</span> <span class="p">=</span> <span class="s1">&#39;c6a833d8a0da6ad439076368d1681e7930c49fef&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$URI</span> <span class="p">=</span> <span class="s2">&#34;https://api.securitycenter.microsoft.com/api/machines/</span><span class="nv">$MachineID</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="nv">$URI</span> <span class="n">-Headers</span> <span class="nv">$AuthenticationHeader</span> <span class="n">-Method</span> <span class="nv">$Method</span>
</span></span></code></pre></div><p>Example output:</p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/GraphResponse.png" alt="Device info"  />
</p>
<h2 id="conditional-access">Conditional Access</h2>
<p>There&rsquo;s an automatically created Conditional Access policy that must be modified before you can query the API. If authentication fails with the error below, you need to edit the policy.</p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/CAError.png" alt="Conditional Access"  />
</p>
<p>The CA policy gets created during Defender for Endpoint setup, when MDE is linked to Intune. Its only visible in the CA <em>Classic view</em>:</p>
<p>Azure Active Directory &gt; Security &gt; Conditional Access &gt; Classic Policies &gt; [Windows Defender ATP] Device Policy</p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/CAPolicy.png" alt="Classic Policy"  />
</p>
<p>Don&rsquo;t delete or disable the policy. It could have undesirable results as indicated in this <a href="https://learn.microsoft.com/en-gb/mem/intune/protect/advanced-threat-protection-configure#enable-microsoft-defender-for-endpoint-in-intune" target="_blank">Microsoft article</a>. Instead, add a group exclusion to the policy for the same group authorised to use the Azure App.</p>
<h2 id="summary">Summary</h2>
<p>This article is an introduction to accessing the Defender Security Center API using PowerShell with interactive authentication. Future articles will explore practical use cases.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Enable Defender Firewall event forwarding to MDE</title>
      <link>https://write-verbose.com/2023/02/02/Firewallmde/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/02/02/Firewallmde/</guid>
      <description>A reminder that Firewall Events are not available in MDE Advanced Hunting by default</description>
      <content:encoded><![CDATA[<p>You may notice that Windows Firewall events are not available in Defender for Endpoint Advanced Hunting. This is a quick post on the steps required to enable Firewall audit events.</p>
<p><a href="https://medium.com/@olafhartong" target="_blank">Olaf Hartong&amp;rsquo;s excellent series on MDE Internals</a> highlights that some MDE telemetry is based on Kernel call-backs or drivers, making those areas independent of client audit policy and enabled by default.</p>
<p>Other settings, however, do rely on ETW providers and therefore on the MDE client&rsquo;s security audit policy. Firewall audit events will only be available in MDE if the relevant audit subcategory is enabled.</p>
<h2 id="enable-client-side-firewall-auditing">Enable client-side Firewall auditing</h2>
<p>The following <em>auditpol</em> command will enable Windows Firewall client-side auditing and start sending the telemetry to MDE.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">auditpol /set /subcategory:<span class="s2">&#34;Filtering Platform Connection&#34;</span> /success:disable /failure:enable
</span></span></code></pre></div><p>It&rsquo;s fine to keep this enabled during day-to-day use as it will result in the following</p>
<ul>
<li>Blocked connections create an audit event in the Security Event Log</li>
<li>Allowed connections do not create an audit event</li>
<li><strong>A single audit event is created for each connection attempt</strong>, not each packet</li>
</ul>
<p>I don&rsquo;t recommend auditing Filtering Platform Connection <em>success</em> events as this will generate a lot of events. You may be tempted to also enable <em>Filtering Platform Packet Drop</em>, but this would also generate a high volume.</p>
<h2 id="intune">Intune</h2>
<p>You could of-course use Intune to apply the same setting to an enrolled Windows client. Create a <em>Device Configuration Profile</em> based on the <strong>Settings Catalog</strong>. Enter <em>Filtering</em> in the settings search and enable <em>Success</em> auditing for <strong>Object Access Audit Filtering Platform Connection</strong></p>
<h2 id="advanced-hunting-query">Advanced Hunting Query</h2>
<p>You can view the Firewall events in MDE Avanced Hunting as follows:</p>
<pre tabindex="0"><code class="language-KQL" data-lang="KQL">DeviceEvents
| where Timestamp &gt; ago(1d)
| where ActionType startswith &#34;Firewall&#34;
</code></pre><p>EXAMPLE RESULT:</p>
<table>
<thead>
<tr>
<th>Timestamp</th>
<th>ComputerName</th>
<th>ActionType</th>
<th>IPAddress</th>
<th>RemoteIPCountry</th>
<th>RemoteIPAddr</th>
<th>RemotePort</th>
<th>Protocol</th>
<th>Direction</th>
<th>NetworkProfile</th>
<th>InterfaceType</th>
<th>RuleId</th>
<th>RuleName</th>
<th>Action</th>
<th>Application</th>
<th>Service</th>
<th>User</th>
<th>InitiatingProcess</th>
<th>InitiatingProcessPath</th>
<th>InitiatingProcessCommandLine</th>
</tr>
</thead>
<tbody>
<tr>
<td>2023-02-02T10:30:12.000Z</td>
<td>DESKTOP01</td>
<td>Firewall</td>
<td>192.168.1.100</td>
<td>United States</td>
<td>54.239.29.192</td>
<td>443</td>
<td>TCP</td>
<td>Outbound</td>
<td>Domain</td>
<td>Wi-Fi</td>
<td></td>
<td></td>
<td>Allowed</td>
<td>Chrome.exe</td>
<td></td>
<td>User1</td>
<td>chrome.exe</td>
<td>C:\Program Files (x86)\Google\Chrome\chrome.exe</td>
<td></td>
</tr>
<tr>
<td>2023-02-02T09:01:30.000Z</td>
<td>DESKTOP02</td>
<td>Firewall</td>
<td>192.168.1.200</td>
<td>United States</td>
<td>91.189.91.26</td>
<td>53</td>
<td>UDP</td>
<td>Outbound</td>
<td>Public</td>
<td>Ethernet</td>
<td></td>
<td></td>
<td>Blocked</td>
<td>svchost.exe</td>
<td>DNS</td>
<td>User2</td>
<td>svchost.exe</td>
<td>C:\Windows\System32\svchost.exe</td>
<td></td>
</tr>
<tr>
<td>2023-02-02T08:45:55.000Z</td>
<td>DESKTOP03</td>
<td>Firewall</td>
<td>192.168.1.150</td>
<td>Canada</td>
<td>185.104.10.98</td>
<td>80</td>
<td>TCP</td>
<td>Inbound</td>
<td>Private</td>
<td>Wi-Fi</td>
<td></td>
<td></td>
<td>Blocked</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="example-event-in-windows-security-log">Example Event in Windows Security Log</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Log Name: Security
</span></span><span class="line"><span class="cl">Source: Microsoft Windows Security Auditing
</span></span><span class="line"><span class="cl">Date: 5/2/2023 10:31:12 AM
</span></span><span class="line"><span class="cl">Event ID: <span class="m">5444</span>
</span></span><span class="line"><span class="cl">Task Category: Filtering Platform Connection
</span></span><span class="line"><span class="cl">Level: Information
</span></span><span class="line"><span class="cl">Keywords: Audit Failure
</span></span><span class="line"><span class="cl">User: N/A
</span></span><span class="line"><span class="cl">Computer: MyComputer
</span></span><span class="line"><span class="cl">Description:
</span></span><span class="line"><span class="cl">A network connection request was blocked.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Subject:
</span></span><span class="line"><span class="cl">Security ID: S-1-5-18
</span></span><span class="line"><span class="cl">Account Name: MyComputer$
</span></span><span class="line"><span class="cl">Account Domain: MYDOMAIN
</span></span><span class="line"><span class="cl">Logon ID: 0x3E7
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Network Information:
</span></span><span class="line"><span class="cl">Direction: Inbound
</span></span><span class="line"><span class="cl">Source Address: 192.168.1.100
</span></span><span class="line"><span class="cl">Source Port: <span class="m">54321</span>
</span></span><span class="line"><span class="cl">Destination Address: 192.168.1.200
</span></span><span class="line"><span class="cl">Destination Port: <span class="m">80</span>
</span></span><span class="line"><span class="cl">Protocol: TCP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Filter Information:
</span></span><span class="line"><span class="cl">Filter Run-Time ID: <span class="m">157314</span>
</span></span><span class="line"><span class="cl">Layer Name: Transport
</span></span><span class="line"><span class="cl">Layer Run-Time ID: <span class="m">13</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Additional Information:
</span></span><span class="line"><span class="cl">Reason: The rule does not match the traffic.
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
  </channel>
</rss>
