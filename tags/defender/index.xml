<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Defender on Write-Verbose</title>
    <link>https://write-verbose.com/tags/defender/</link>
    <description>Recent content in Defender on Write-Verbose</description>
    <image>
      <title>Write-Verbose</title>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 27 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/tags/defender/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PSMDE - PowerShell Defender for Endpoint Module</title>
      <link>https://write-verbose.com/2023/08/27/PSMDE/</link>
      <pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/08/27/PSMDE/</guid>
      <description>A PowerShell Module for access to the Defender Security API.</description>
      <content:encoded><![CDATA[<p>PSMDE is a PowerShell module providing interactive access to Device information, Advanced Hunting data and machine actions.</p>
<h2 id="module-functions">Module Functions</h2>
<ul>
<li>Connect-PSMDE</li>
<li>Get-PSMDEDeviceInfo</li>
<li>Get-PSMDELatestVersion</li>
<li>Invoke-PSMDEAvScan</li>
<li>Invoke-PSMDEAdvancedHunting</li>
<li>Invoke-PSMDEIsolation</li>
<li>Revoke-PSMDEIsolation</li>
<li>Invoke-PSMDEFileQuarantine</li>
<li>Save-PSMDESupportInfo</li>
<li>Test-PSMDEMapsConnection</li>
</ul>
<h2 id="installation">Installation</h2>
<h3 id="create-azure-app">Create Azure App</h3>
<p>Create an Azure application to control authentication and authorization.<br>
A step by step process is available <a href="https://write-verbose.com/2023/05/24/DefenderSecurityAPI/" target="_blank">here</a>
The API permissions required are available in the Help text of each module function.</p>
<h3 id="install-msalps">Install MSAL.PS</h3>
<p>PSMDE relies on another module for authentication.  Install the <strong>MSAL.PS</strong> module from the PowerShell gallery.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">MSAL</span><span class="p">.</span><span class="nb">PS </span><span class="n">-Scope</span> <span class="n">CurrentUser</span>
</span></span></code></pre></div><h3 id="download-psmde">Download PSMDE</h3>
<p>The PSMDE module is <a href="https://github.com/gbdixg/PSMDE" target="_blank">available from GitHub</a><br>
Click on Code &gt; Download Zip<br>
Unblock the zip file and extract it to a folder in the $ENV:PSModule path<br>
Make sure you rename the root folder from <em>PSMDE-master</em> to <strong>PSMDE</strong><br>
Edit the Public\<strong>Connect-PSMDE.ps1</strong> file to set your TenantID and ApplicationID</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Connect-PSMDE before edit</span>
</span></span><span class="line"><span class="cl"><span class="k">Param</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">ValidateNotNullOrEmpty</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span><span class="nv">$TenantID</span> <span class="p">=</span> <span class="s1">&#39;00000000-0000-0000-0000-TENANTID&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">ValidateNotNullOrEmpty</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">String</span><span class="p">]</span><span class="nv">$ClientID</span> <span class="p">=</span> <span class="s1">&#39;00000000-0000-0000-0000-APPID&#39;</span>
</span></span></code></pre></div><h2 id="usage">Usage</h2>
<h3 id="security-context">Security Context</h3>
<p>Start PowerShell in the context of an account with access to Defender information i.e. a member of</p>
<ul>
<li>A built in reader role such as <em>Global Reader</em> or <em>Security Reader</em></li>
<li>A privileged role such as <em>Global Admin, Security Opertator, Security Admin</em></li>
<li>A custom role with delegated access to your tenant</li>
</ul>
<h3 id="interactive-powershell">Interactive PowerShell</h3>
<p>Use the module interactively at PowerShell console and explore the module functions</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Import-Module</span> <span class="n">PSMDE</span> <span class="c"># Load the module </span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-Command</span> <span class="n">-Module</span> <span class="n">PSMDE</span> <span class="c"># List available commands</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-Help</span> <span class="nb">Get-PSMDEDeviceInfo</span> <span class="c"># Get help on a command</span>
</span></span></code></pre></div><h2 id="example-1---get-device-information">EXAMPLE 1 - Get device information</h2>
<p>The example below confirms the following for an endpoint:</p>
<ul>
<li>Defender is active and onboarded</li>
<li>Engine and signatures are up-to-date</li>
<li>Last scan times</li>
<li>OS version and IP address information</li>
<li>Logged-on users</li>
<li>MDE alerts</li>
<li>Vulnerabilities</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Import-Module</span> <span class="n">PSMDE</span>  
</span></span><span class="line"><span class="cl"><span class="nb">Connect-PSMDE</span> <span class="n">-TenantID</span> <span class="nv">$TenantID</span> <span class="n">-ClientID</span> <span class="nv">$AppID</span> <span class="c"># Optional parameters. Set defaults in the Connect-PSMDE.ps1 file</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-PSMDEDeviceInfo</span> <span class="n">-Computername</span> <span class="n">PC12345</span>  
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">Computername                  : PC12345
</span></span><span class="line"><span class="cl">osPlatform                    : Windows10
</span></span><span class="line"><span class="cl">version                       : 22H2
</span></span><span class="line"><span class="cl">osBuild                       : 19045
</span></span><span class="line"><span class="cl">isPotentialDuplication        : False
</span></span><span class="line"><span class="cl">machineTags                   : {MDEPilot}
</span></span><span class="line"><span class="cl">healthStatus                  : Active
</span></span><span class="line"><span class="cl">onboardingStatus              : Onboarded
</span></span><span class="line"><span class="cl">defenderAvStatus              : Updated
</span></span><span class="line"><span class="cl">exposureLevel                 : Medium
</span></span><span class="line"><span class="cl">riskScore                     : Medium
</span></span><span class="line"><span class="cl">avEngineVersion               : 1.1.23080.2005
</span></span><span class="line"><span class="cl">avSignatureVersion            : 1.395.1403.0
</span></span><span class="line"><span class="cl">avPlatformVersion             : 4.18.23080.2006
</span></span><span class="line"><span class="cl">avIsSignatureUpToDate         : True
</span></span><span class="line"><span class="cl">avIsEngineUpToDate            : True
</span></span><span class="line"><span class="cl">avIsPlatformUpToDate          : True
</span></span><span class="line"><span class="cl">avSignatureDataRefreshTime    : 27/08/2023 15:35:36
</span></span><span class="line"><span class="cl">avSignatureDataRefreshTimeUTC : 27/08/2023 14:35:36
</span></span><span class="line"><span class="cl">quickScanTime                 : 22/08/2023 03:16:00
</span></span><span class="line"><span class="cl">quickScanTimeUTC              : 22/08/2023 02:16:00
</span></span><span class="line"><span class="cl">fullScanTime                  : 
</span></span><span class="line"><span class="cl">fullScanTimeUTC               : 
</span></span><span class="line"><span class="cl">avmode                        : 0
</span></span><span class="line"><span class="cl">LastSeen                      : 27/08/2023 14:53:08
</span></span><span class="line"><span class="cl">LastSeenUTC                   : 27/08/2023 13:53:08
</span></span><span class="line"><span class="cl">lastIpAddress                 : 192.168.1.140
</span></span><span class="line"><span class="cl">lastExternalIpAddress         : 100.19.112.28
</span></span><span class="line"><span class="cl">managedBy                     : Intune
</span></span><span class="line"><span class="cl">loggedOnUsers                 : {@{id=RnD\user1; lastSeen=27/08/2023 16:23:38; logonTypes=RemoteInteractive}, @{id=azuread\admin1; lastSeen=27/08/2023 16:02:54; logonTypes=Interactive}}
</span></span><span class="line"><span class="cl">alertCount                    : 9
</span></span><span class="line"><span class="cl">alerts                        : {@{serverity=Informational; alertCreationTime=2023-05-08T19:45:47.8359999Z; detectionSource=AutomatedInvestigation; category=SuspiciousActivity; threatName=; threatFamilyName=}, 
</span></span><span class="line"><span class="cl">                                <span class="p">@</span>{serverity=Informational; alertCreationTime=2023-08-15T21:55:56.9250938Z; detectionSource=WindowsDefenderAv; category=Malware; threatName=Virus:DOS/EICAR_Test_File; 
</span></span><span class="line"><span class="cl">                                threatFamilyName=EICAR_Test_File}, @{serverity=Medium; alertCreationTime=2023-05-08T16:11:02.4388031Z; detectionSource=WindowsDefenderAv; category=SuspiciousActivity; 
</span></span><span class="line"><span class="cl">                                threatName=Trojan:PowerShell/Powersploit.L; threatFamilyName=Powersploit}, @{serverity=Medium; alertCreationTime=2023-05-08T16:02:13.0120825Z; detectionSource=WindowsDefenderAtp; 
</span></span><span class="line"><span class="cl">                                category=Execution; threatName=; threatFamilyName=}...}
</span></span><span class="line"><span class="cl">CVEs                          : {@{name=CVE-2023-33144; description=Visual Studio Code Spoofing Vulnerability; severity=Medium; publicExploit=False; firstDetected=2023-06-13T17:30:51Z}, @{name=CVE-2023-21779; 
</span></span><span class="line"><span class="cl">                                description=Visual Studio Code Remote Code Execution Vulnerability; severity=High; publicExploit=False; firstDetected=2023-05-02T14:45:15Z}, @{name=CVE-2023-24893; description=Visual 
</span></span><span class="line"><span class="cl">                                Studio Code Remote Code Execution Vulnerability; severity=High; publicExploit=False; firstDetected=2023-05-02T14:45:15Z}, @{name=CVE-2023-29338; description=Visual Studio Code 
</span></span><span class="line"><span class="cl">                                Information Disclosure Vulnerability; severity=Medium; publicExploit=False; firstDetected=2023-06-08T10:30:35Z}}
</span></span><span class="line"><span class="cl">deviceid                      : c6a833d9a0da6ad439076368d1781e7940c49fef
</span></span></code></pre></div><h2 id="example-2-scan-computers-based-on-advanced-hunting-query-results">EXAMPLE 2: Scan computers based on Advanced Hunting Query results</h2>
<p>The example below achieves the following:</p>
<ul>
<li>Runs an Advanced Hunting query to find endpoints where a file has executed in the last 6 hours</li>
<li>Triggers a full scan on those endpoints</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Invoke-PSMDEAdvancedHunting</span> <span class="n">-Query</span> <span class="p">@</span><span class="s1">&#39;  
</span></span></span><span class="line"><span class="cl"><span class="s1">DeviceProcessEvents
</span></span></span><span class="line"><span class="cl"><span class="s1">| where Timestamp &gt; ago(6h)
</span></span></span><span class="line"><span class="cl"><span class="s1">| where ActionType == &#34;ProcessCreated&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">| where SHA1 == &#34;1bc5066ddf693fc034d6514618854e26a85fd0d1&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">| distinct DeviceName 
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="p">@</span> <span class="p">|</span> <span class="nb">Invoke-PSMDEAvscan</span> <span class="n">-ScanType</span> <span class="n">Full</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">Computername     : PC123456
</span></span><span class="line"><span class="cl"><span class="k">type</span>             : RunAntiVirusScan
</span></span><span class="line"><span class="cl">ScanType         : Full
</span></span><span class="line"><span class="cl">status           : Pending
</span></span><span class="line"><span class="cl">errorHResult     : 0
</span></span><span class="line"><span class="cl">requestor        : admin@tenant.com
</span></span><span class="line"><span class="cl">requestorComment : Full scan initiated by PSMDE
</span></span><span class="line"><span class="cl">DeviceId         : c6a833d9a0da6ad439056368d1681e7940c49fee
</span></span></code></pre></div><h2 id="example-3-isolate-computers">EXAMPLE 3: Isolate computers</h2>
<p>The example below performs the following:</p>
<ul>
<li>Runs an Advanced Hunting query to find endpoints where PowerShell has communicated with a specific public IP</li>
<li>Triggers full isolation of those endpoints</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Invoke-PSMDEAdvancedHunting</span> <span class="n">-Query</span> <span class="p">@</span><span class="s1">&#39;  
</span></span></span><span class="line"><span class="cl"><span class="s1">DeviceNetworkEvents
</span></span></span><span class="line"><span class="cl"><span class="s1">| where Timestamp &gt; ago (6h)
</span></span></span><span class="line"><span class="cl"><span class="s1">| where InitiatingProcessFileName =~&#34;PowerShell.exe&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">| where RemoteIP == &#34;20.50.201.195&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">| distinct DeviceName
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span><span class="p">@</span> <span class="p">|</span> <span class="nb">Invoke-PSMDEIsolation</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">computername  : PC123456
</span></span><span class="line"><span class="cl">isolationType : Full
</span></span><span class="line"><span class="cl">comment       : PSMDE: Isolate device
</span></span><span class="line"><span class="cl">requestor     : <span class="p">&lt;</span>admin@tenant.com&gt;
</span></span><span class="line"><span class="cl">status        : Pending
</span></span><span class="line"><span class="cl">deviceid      : c6a833d9a0da6ad439056368d1681e7940c49fee
</span></span></code></pre></div><h2 id="example-4">EXAMPLE 4</h2>
<p>The following example queries a Microsoft URI for the latest available version of Defender for Endpoint:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Get-PSMDELatestVersion</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">Engine         Platform        Signatures
</span></span><span class="line"><span class="cl">------         --------        ----------
</span></span><span class="line"><span class="cl">1.1.23070.1005 4.18.23070.1004 1.395.1451.0
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Replace sensitive information before committing PowerShell scripts using Git Clean and Smudge Filters</title>
      <link>https://write-verbose.com/2023/08/20/GitClean/</link>
      <pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/08/20/GitClean/</guid>
      <description>Git Filters can replace code at staging to avoid committing unwanted information, such as the Azure AppID or TenantID.</description>
      <content:encoded><![CDATA[<p>The git filter option isn&rsquo;t well documented, but its <strong>very useful for removing sensitive information you don&rsquo;t want appearing in your public repo</strong>. This post provides an example of replacing the Azure TenantID and AppID with dummy values during the git commit process for a PowerShell script.</p>
<h2 id="background">Background</h2>
<p>Best practice is to never hard code sensitive information in your scripts. Better strategies include:</p>
<ul>
<li>Accessing an encrypted vault at runtime (Azure KeyVault, CyberArk Privileged Access etc)</li>
<li>Operator supplied information at runtime (for interactive scripts)</li>
</ul>
<blockquote>
<p>Having said that, there is information that isn&rsquo;t &ldquo;secret&rdquo; but is specific to an environment that needs to be removed before making code public.</p>
</blockquote>
<h2 id="scenario">Scenario</h2>
<p>I&rsquo;ll use the <a href="https://github.com/gbdixg/PSMDE" target="_blank">PSMDE PowerShell module</a> as an example.<br>
This PowerShell module is used interactively to manage Defender for Endpoint from the command line.
The code uses the delegated authentication of an Azure Enterprise Application to access the Defender Security API. It uses <a href="https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow" target="_blank">Authorization Code Flow</a> with the following environment-specific information:</p>
<table>
<thead>
<tr>
<th>Value</th>
<th>Format</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>TenantID</td>
<td>GUID string</td>
<td>Specific to an Azure environment</td>
</tr>
<tr>
<td>ClientID</td>
<td>GUID string</td>
<td>A.K.A ApplicationID. Specific to an Azure Enterprise App.</td>
</tr>
<tr>
<td>Credentials</td>
<td>Multiple options</td>
<td>Username / Password supplied interactively in this case</td>
</tr>
</tbody>
</table>
<p>The <a href="https://github.com/gbdixg/PSMDE/blob/master/Public/Connect-SecurityCenter.ps1" target="_blank">Connect-SecurityCenter.ps1</a> script <strong>makes authentication simple by including default values for the TenantID and ClientID</strong>. The administrator just calls the script and is prompted for credentials with sufficient access.</p>
<p><em>Connect-SecurityCenter.ps1</em> extract with default values for TenantID and ClientID (AppID):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="kd">Function</span><span class="w"> </span><span class="nb">Connect-SecurityCenter</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"> <span class="k">Param</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">ValidateNotNullOrEmpty</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">String</span><span class="p">]</span><span class="nv">$TenantID</span> <span class="p">=</span> <span class="s1">&#39;f8856e0c-f363-4583-9a2f-ef0208473d3c&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">ValidateNotNullOrEmpty</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">String</span><span class="p">]</span><span class="nv">$ClientID</span> <span class="p">=</span> <span class="s1">&#39;7c0cc95f-d722-4533-94e2-92530f29c07c&#39;</span>
</span></span><span class="line"><span class="cl"> <span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="p">...</span>
</span></span></code></pre></div><p>Someone downloading the public code is expected to edit the default values for their own environment.</p>
<blockquote>
<p>So how do we develop this module with our own variable defaults, but avoid committing them to the public repo?</p>
</blockquote>
<h2 id="git-filter">Git Filter</h2>
<p>Git can apply filter scripts to the code during the staging step to replace text. The working directory retains the default values, but the repo code has sanitised replacement text.</p>
<p>A <strong>Clean</strong> filter script is applied when the code is staged to the git index. A <strong>Smudge</strong> filter script is applied at checkout - effectively the opposite direction. The steps below explain how to implement these filters.</p>
<h2 id="step-1-enable-filtering-in-the-git-global-config">Step 1: Enable filtering in the git global config</h2>
<p>Update the git config to enable the filters as follows. This can be done in the per-repo git config, but I find its better as a global option&hellip;</p>
<p>Command format:<br>
git config &ndash;global filter.&lt;filter name&gt;.&lt;clean|smudge&gt;&lt;path to a script | inline command&gt;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Commands to run</span>
</span></span><span class="line"><span class="cl">git config --global filter.gitClean.clean <span class="s2">&#34;~/gitclean.sh&#34;</span>
</span></span><span class="line"><span class="cl">git config --global filter.gitClean.smudge <span class="s2">&#34;~/gitsmudge.sh&#34;</span>
</span></span></code></pre></div><ul>
<li><em>gitClean</em> is the freeform name for the filter. You can create multiple filters with separate scripts.</li>
<li>gitClean has a separate clean script (gitclean.sh) and smudge script (gitsmudge.sh)</li>
<li>Both scripts are in the user&rsquo;s home folder (~/ is c:\users\username on Windows)</li>
</ul>
<h2 id="step-2-create-the-clean-and-smudge-scripts">Step 2: Create the clean and smudge scripts</h2>
<p>Even on Windows git uses bash to execute scripts. You might be able to get PowerShell working, but I found it easier just to stick with bash. The built-in <em>sed</em> command can be used to replace text as follows:</p>
<p>Command format:<br>
sed -e &ldquo;s/&lt;pattern&gt;/&lt;replacement&gt;/&lt;flags&gt;&rdquo;</p>
<p>The text specified by &lt;pattern&gt; is replaced by the text in &lt;replacement&gt;. The &ldquo;g&rdquo; flag replaces all occurrences in the file.</p>
<p>The <strong>gitclean.sh</strong> script replaces the real tenant ID and application ID with dummy text and the <strong>gitsmudge.sh</strong> script reverses the replacement.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># gitclean.sh</span>
</span></span><span class="line"><span class="cl"><span class="nv">TenantID</span><span class="o">=</span><span class="s2">&#34;f8856e0c-f363-4583-9a2f-ef0208473d3c&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">AppID</span><span class="o">=</span><span class="s2">&#34;7c0cc95f-d722-4533-94e2-92530f29c07c&#34;</span>
</span></span><span class="line"><span class="cl">sed -e <span class="s2">&#34;s/</span><span class="nv">$TenantID</span><span class="s2">/00000000-0000-0000-0000-TENANTID/g&#34;</span> -e <span class="s2">&#34;s/</span><span class="nv">$AppID</span><span class="s2">/00000000-0000-0000-0000-APPID/g&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1"># gitsmudge.sh</span>
</span></span><span class="line"><span class="cl"><span class="nv">TenantID</span><span class="o">=</span><span class="s2">&#34;f8856e0c-f363-4583-9a2f-ef0208473d3c&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">AppID</span><span class="o">=</span><span class="s2">&#34;7c0cc95f-d722-4533-94e2-92530f29c07c&#34;</span>
</span></span><span class="line"><span class="cl">sed -e <span class="s2">&#34;s/00000000-0000-0000-0000-TENANTID/</span><span class="nv">$TenantID</span><span class="s2">/g&#34;</span> -e <span class="s2">&#34;s/00000000-0000-0000-0000-APPID/</span><span class="nv">$AppID</span><span class="s2">/g&#34;</span>
</span></span></code></pre></div><p>On Windows the files should be saved in the c:\users\&lt;username&gt; folder.</p>
<p><strong>Watch out for unix line ending and encoding requirements</strong> - In Visual Studio Code:</p>
<ul>
<li>If the status bar shows CRLF, double-click on it and change to LF</li>
<li>If the status bar shows <em>UTF-8 with BOM</em>, double-click on it and change to <em>UTF-8</em></li>
</ul>
<h2 id="step-3-specify-the-file-extensions-that-use-the-filter">Step 3: Specify the file extensions that use the filter</h2>
<p>Edit the git <em>attributes</em> file in the repo:</p>
<blockquote>
<p>.git\info\attributes</p>
</blockquote>
<p>If the file doesn&rsquo;t exist, create it as a new text file with no file extension.<br>
Add a line with &lt;file extension&gt; filter=&lt;filter name&gt; as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">*.ps1 <span class="nv">filter</span><span class="o">=</span>gitClean
</span></span></code></pre></div><h2 id="step-4-stage-the-files-in-the-index">Step 4: Stage the files in the index</h2>
<p>The filter is applied at staging, but it won&rsquo;t be immediately obvious that anything has happened. Add or update the file using <strong>git add</strong>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add public<span class="se">\C</span>onnect-SecurityCenter.ps1
</span></span></code></pre></div><p>The command will complete as normal. The file in the working directory will still have the real TenantID and AppID, but the staged file will have the replacement dummy values. Commit the staged file to the local repo and push to update to the public remote repo.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git commit -m <span class="s2">&#34;Update to Connect-SecurityCenter.ps1&#34;</span>
</span></span><span class="line"><span class="cl">git push origin
</span></span></code></pre></div><p>Check the GitHub repo to confirm the text replacement was successful.</p>
<p>On subsequent updates, <em>git diff</em> will confirm the text replacement is successful at staging, before commit. It won&rsquo;t show any differences for these lines - indicating the dummy values are in-place.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git diff --staged
</span></span></code></pre></div><p>Now that git filtering is in-place, you can edit and update the code without worrying that unwanted information is in the public domain.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Create a Hyper-V VM with a differencing disk using PowerShell</title>
      <link>https://write-verbose.com/2023/08/13/HyperVDiff/</link>
      <pubDate>Sun, 13 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/08/13/HyperVDiff/</guid>
      <description>Save GBs of disk space when there are multiple VMs with the same OS and base configuration</description>
      <content:encoded><![CDATA[<p>This post cover the following:</p>
<ul>
<li>An overview of the steps to create the parent virtual disk</li>
<li>A script to automate creation of child VMs with a differencing disk</li>
</ul>
<h2 id="environment">Environment</h2>
<p>My environment is a Windows 11 host running Client Hyper-V. The VMs are running Windows 11 Enterprise (Eval).<br>
I&rsquo;m using PowerShell 5.1 and haven&rsquo;t tested on other versions of the OS or PowerShell.</p>
<h2 id="parent-disk-creation">Parent Disk creation</h2>
<p>The following is a brief overview of creating the base image that becomes the parent disk.</p>
<ul>
<li>Create a Hyper-V Generation 2 VM</li>
<li>Enable the TPM (Settings &gt; Security)</li>
<li>Install Windows 11</li>
<li>During the OOBE phase, select <em>Other Signin Options &gt; Domain Join</em></li>
<li>Create a local user e.g. &ldquo;Bob&rdquo;</li>
<li>Log on as Bob and configure the system and software</li>
<li>NOTE: Install all software per machine or Sysprep will fail</li>
<li>Enable the built-in Administrator account and set the password</li>
<li>Log off from the Bob account and log on as Administrator</li>
<li>Delete the local profile for Bob&rsquo;s account as follows:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$p</span> <span class="p">=</span> <span class="nb">Get-WMIObject</span> <span class="n">-Class</span> <span class="n">Win32_UserProfile</span> <span class="n">-Filter</span> <span class="s2">&#34;LocalPath=&#39;c:\\users\\Bob&#39;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$p</span><span class="p">.</span><span class="py">Delete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$p</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span></code></pre></div><ul>
<li>Delete the local user account for Bob</li>
<li>Run Sysprep as follows:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">c<span class="p">:</span><span class="nl">\windows\system32\sysprep\sysprep.exe</span><span class="c1"> /generalize /oobe /mode:vm</span>
</span></span></code></pre></div><ul>
<li>Delete the VM in the Hyper-V console (the disk will remain)</li>
<li>Move the VHDX disk file to an appropriate location and set the NTFS properties to be read-only.</li>
</ul>
<h2 id="powershell-script">PowerShell Script</h2>
<p>The script below creates a new VM with a <em>Differencing Disk</em> linked to the parent disk.<br>
The main benefits of a Differencing Disk are:</p>
<ul>
<li>Rapid deployment - only have to go through OOBE and you have a working OS</li>
<li>Save disk space - the base OS is in the parent disk</li>
</ul>
<h3 id="example">Example</h3>
<p><img loading="lazy" src="/img/DiffVM/NewDiffVM.png" alt="New-DiffVM"  />
</p>
<h3 id="script">Script</h3>
<script type="application/javascript" src="https://gist.github.com/gbdixg/ff17941b17b31cacf0b62d9e6c1c4f42.js"></script>

<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Bypassing Defender EDR using Windows Firewall - mitigations</title>
      <link>https://write-verbose.com/2022/05/31/EDRBypass/</link>
      <pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2022/05/31/EDRBypass/</guid>
      <description>How to prevent an attacker using Windows Firewall to bypass Endpoint Detection</description>
      <content:encoded><![CDATA[<p>Attackers can use Windows Firewall to block EDR telemetry leaving the endpoint.  Read-on for how this is mitigated.</p>
<h2 id="risk-background">Risk background</h2>
<p>As well as the usual source and destination variables, Windows Firewall can also block outbound communication based on the <em>service name</em> or <em>program</em> that initiates the communication.</p>
<p>An attacker with elevated endpoint access will want to shut down Defender EDR as soon as possible and one method is to block the client agent communication with the cloud service.</p>
<p>The following PowerShell commands can achieve this, blocking outbound TCP/443 from:</p>
<ul>
<li><em>WinDefend</em> service (main MDAV process)</li>
<li><em>SenseCNDProxy</em> process (acts as a communication broker)</li>
<li><em>MSSense</em> process (Main MDE process)</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># PowerShell commands to Disable outbound 443 from MDE agent to cloud service</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">New-NetFirewallRule</span> <span class="n">-DisplayName</span> <span class="s2">&#34;Block 443 MsMpEng&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;Block 443 MsMpEng&#34;</span> <span class="n">-Direction</span> <span class="n">Outbound</span> <span class="n">-Service</span> <span class="n">WinDefend</span> <span class="n">-Enabled</span> <span class="n">True</span> <span class="n">-RemotePort</span> <span class="mf">443</span> <span class="n">-Protocol</span> <span class="n">TCP</span> <span class="n">-Action</span> <span class="n">Block</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">New-NetFirewallRule</span> <span class="n">-DisplayName</span> <span class="s2">&#34;Block 443 SenseCncProxy&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;Block 443 SenseCncProxy&#34;</span> <span class="n">-Direction</span> <span class="n">Outbound</span> <span class="n">-Program</span> <span class="s2">&#34;%ProgramFiles%\Windows Defender Advanced Threat Protection\SenseCncProxy.exe&#34;</span> <span class="n">-RemotePort</span> <span class="mf">443</span> <span class="n">-Protocol</span> <span class="n">TCP</span> <span class="n">-Action</span> <span class="n">Block</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">New-NetFirewallRule</span> <span class="n">-DisplayName</span> <span class="s2">&#34;Block 443 MsSense&#34;</span> <span class="n">-Name</span> <span class="s2">&#34;Block 443 MsSense&#34;</span> <span class="n">-Direction</span> <span class="n">Outbound</span> <span class="n">-Program</span> <span class="s2">&#34;%ProgramFiles%\Windows Defender Advanced Threat Protection\MsSense.exe&#34;</span> <span class="n">-RemotePort</span> <span class="mf">443</span> <span class="n">-Protocol</span> <span class="n">TCP</span> <span class="n">-Action</span> <span class="n">Block</span>
</span></span></code></pre></div><h2 id="mitigation">Mitigation</h2>
<h3 id="1---tamper-protection">1 - Tamper Protection</h3>
<p>The most important mitigation is to enable <strong>MDE Tamper Protection</strong>.</p>
<p>Tamper protection prevents users with elevated rights on the endpoint making changes to the MDE client configuration. Tamper Projection includes prevention of local firewall rules affecting MDE processes.  If you run the commands above, MDE will generate an alert and block the changes.</p>
<p>Enable Tamper Protection as follows:</p>
<blockquote>
<p>MDE Security Portal &gt; Settings &gt; Endpoints &gt; Advanced Features &gt; Tamper Protection = On</p>
</blockquote>
<h3 id="2--firewall-rule-merging">2- Firewall Rule Merging</h3>
<p>Windows Firewall local rule merging should be disabled to prevent local changes.</p>
<p>The Windows Firewall has <em>Rule Sources</em>.  For example, Group Policy is one rule source and local rules are another. When the Firewall is managed by GPO or Intune, it still allows local rule merging by default.</p>
<p>When rule merging is enabled, local block rules can over-ride policy-based allow rules. Similarly, local allow rules can override policy-based profile defaults (profile defaults are initial rules applied to each profile - Domain / Private / Public).</p>
<p>Disable Local Rule Merging as follows:</p>
<p>Group Policy Editor:</p>
<blockquote>
<p>Computer Configuration &gt; Security Settings &gt; Windows Firewall with Advanced Security &gt; Properties &gt; Settings &gt; [PROFILE NAME] &gt; Settings &gt; Apply local firewall rules = No</p>
</blockquote>
<p>Intune Policy:</p>
<blockquote>
<p>Endpoint security &gt; Firewall &gt; Create policy &gt; Create a profile &gt; Windows 10 / 11 / Server &gt; Microsoft Defender Firewall &gt; [Provide a Name] &gt; Allow local policy merge = False</p>
</blockquote>
<h2 id="summary">Summary</h2>
<p>With Tamper Protection enabled and Windows Firewall local rule merging disabled, the chances of at attacker abusing firewall rules are slim.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Access api.securitycenter.microsoft.com interactively with PowerShell</title>
      <link>https://write-verbose.com/2023/05/24/DefenderSecurityAPI/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/05/24/DefenderSecurityAPI/</guid>
      <description>Use Authorization Code Flow to access the Defender Security Center API with PowerShell</description>
      <content:encoded><![CDATA[<p>This post is an introduction to accessing the Defender Security Center API in PowerShell using interactive authentication. It is the basis for building tools and scripts to enhance day-to-day productivity that I&rsquo;ll explore in future posts.</p>
<h2 id="background">Background</h2>
<p>The Defender Security API is a gold mine as it can provide access to key MDE features including:</p>
<ul>
<li>Device information</li>
<li>Alerts</li>
<li>MDE Configuration</li>
<li>Run Advanced Hunting queries</li>
<li>Initiate Live Response and manage Library scripts</li>
<li>Initiate Scans and Isolation</li>
</ul>
<p>I struggled to find examples of using the API interactively. Microsoft articles have examples using a client secret, which is fine for automation, but not ideal for interactive use.  The following steps demonstrate interactive access to the API.</p>
<h2 id="azure-app">Azure App</h2>
<p>The first step is to create an Azure Application to control the permissions available and limit admin access to the API.</p>
<h3 id="create-the-app">Create the App</h3>
<p>In the Azure Portal, go to the <strong>App Registrations</strong> blade and select <strong>New Registration</strong></p>
<p>Enter a name for the app e.g. <strong>DefenderSecurityAPI</strong> (visible in MFA challenges and sign-in logs)</p>
<p>Leave the <em>Supported Account Types</em> on the default <strong>Single Tenant</strong></p>
<p>Do not configure a Redirect URL at this stage.</p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/AppReg1.png" alt="Register App"  />
</p>
<p>Select <strong>Register</strong> to create the app.</p>
<p>You are presented with the App <em>Overview</em> page.  Select <strong>Add a redirect URI</strong>, then <strong>Add a Platform</strong></p>
<p>Select <strong>Mobile and Desktop applications</strong></p>
<p>Enable the check box next to the nativeclient URL and also add local host in the Custom Redirect URIs:</p>
<ul>
<li><strong><a href="https://login.microsoftonline.com/common/oauth2/nativeclient" target="_blank">https://login.microsoftonline.com/common/oauth2/nativeclient</a></strong></li>
<li><strong><a href="http://localhost" target="_blank">http://localhost</a></strong></li>
</ul>
<p>Select <strong>Configure</strong> to save the redirect URLs</p>
<p>Next select <em>API Permissions</em> in the left pane, then <strong>Add a permission</strong></p>
<p>Select the <strong>APIs my organization uses</strong> tab and then use the search box to find <strong>WindowsDefenderATP</strong></p>
<p>Select <strong>Delegated Permissions</strong></p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/APIPerms.png" alt="API Permissions"  />
</p>
<p>Expand the categories and select the individual permissions required<br>
e.g. <em>Alert.Read, AdvancedQuery.Read, Machine.Read, Machine.Scan, Machine.RestrictExecution, Machine.Isolate, Machine.CollectForensics, Machine.Offboard, Software.Read</em></p>
<p>Once you&rsquo;ve finished adding permissions, select <strong>Grant admin consent for tenant_name</strong></p>
<p>Delegated permissions mean both the user and the app must have the required permission. The app won&rsquo;t elevate privileges.</p>
<h3 id="restrict-access-to-the-app">Restrict Access to the app</h3>
<p>To restrict who can use the app, we need to go to the <strong>Enterprise applications</strong> blade, either using the Azure Portal search box, or by navigating to the root of Azure AD and selecting it in the left pane.</p>
<p>Select the app in the list to open its <em>Overview</em> page, then select <strong>Properties</strong> in the left pane.<br>
Change <strong>Assignment Required</strong> to <em>Yes</em> and then <em>Save</em><br>
Select <strong>Users and groups</strong> in the left pane and then select <strong>Add user/group</strong><br>
Select an existing group that will be allowed to authenticate using the App.</p>
<blockquote>
<p>NOTE: Although we consented to API permissions in the previous step, it was only delegated permissions. The group members must also be granted permission to read or change Security assets e.g. through a built-in Role, such as <em>Security Administrator</em>.</p>
</blockquote>
<p>Select the <strong>Overview</strong> link in the left pane and copy the <em>Application ID</em> as this will be a script variable along with the TenantID.</p>
<h2 id="authenticate-using-msalps">Authenticate using MSAL.PS</h2>
<p>Use the <em>MSAL.PS</em> PowerShell module to authenticate interactively and cache an access token. The important part is to specify a security API scope.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Pre-req</span>
</span></span><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">MSAL</span><span class="p">.</span><span class="nb">PS </span><span class="n">-MinimumVersion</span> <span class="mf">4.37</span><span class="p">.</span><span class="py">0</span><span class="p">.</span><span class="py">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Replace with your Application and Tenant IDs</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ApplicationID</span> <span class="p">=</span> <span class="s1">&#39;446e4714-3226-489e-b602-1515d6822e09&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$TenantID</span> <span class="p">=</span> <span class="s1">&#39;b0530087-fc9a-44e7-ad6f-1b045d56e15d&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Specify at least one security center API scope</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Scopes</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s2">&#34;https://api.securitycenter.microsoft.com/Machine.Read&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Authenticate interactively with authorization code flow</span>
</span></span><span class="line"><span class="cl"><span class="nv">$AccessToken</span> <span class="p">=</span> <span class="nb">Get-MsalToken</span> <span class="n">-ClientId</span> <span class="nv">$ApplicationID</span> <span class="n">-TenantId</span> <span class="nv">$TenantID</span> <span class="n">-Scopes</span> <span class="nv">$Scopes</span>
</span></span></code></pre></div><blockquote>
<p>If authentication fails with a message &ldquo;You can&rsquo;t get there from here&rdquo;, see the <em>Conditional Access</em> section below.</p>
</blockquote>
<h2 id="call-the-api">Call the API</h2>
<p>With an access token cached, its straight forward to call the Security Center API using Invoke-Restmethod. The following is a basic example of getting device information:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Build the authentication header</span>
</span></span><span class="line"><span class="cl"><span class="nv">$AuthenticationHeader</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Content-Type&#34;</span>  <span class="p">=</span> <span class="s2">&#34;application/json&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Authorization&#34;</span> <span class="p">=</span> <span class="nv">$AccessToken</span><span class="p">.</span><span class="py">CreateAuthorizationHeader</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;ExpiresOn&#34;</span>     <span class="p">=</span> <span class="nv">$AccessToken</span><span class="p">.</span><span class="py">ExpiresOn</span><span class="p">.</span><span class="py">UTCDateTime</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Example getting details of an MDE client device</span>
</span></span><span class="line"><span class="cl"><span class="c"># The deviceID is available on the device details blade in the Security Center portal</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Method</span> <span class="p">=</span> <span class="s1">&#39;Get&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$MachineID</span> <span class="p">=</span> <span class="s1">&#39;c6a833d8a0da6ad439076368d1681e7930c49fef&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$URI</span> <span class="p">=</span> <span class="s2">&#34;https://api.securitycenter.microsoft.com/api/machines/</span><span class="nv">$MachineID</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Invoke-RestMethod</span> <span class="n">-Uri</span> <span class="nv">$URI</span> <span class="n">-Headers</span> <span class="nv">$AuthenticationHeader</span> <span class="n">-Method</span> <span class="nv">$Method</span>
</span></span></code></pre></div><p>Example output:</p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/GraphResponse.png" alt="Device info"  />
</p>
<h2 id="conditional-access">Conditional Access</h2>
<p>There&rsquo;s an automatically created Conditional Access policy that must be modified before you can query the API. If authentication fails with the error below, you need to edit the policy.</p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/CAError.png" alt="Conditional Access"  />
</p>
<p>The CA policy gets created during Defender for Endpoint setup, when MDE is linked to Intune. Its only visible in the CA <em>Classic view</em>:</p>
<p>Azure Active Directory &gt; Security &gt; Conditional Access &gt; Classic Policies &gt; [Windows Defender ATP] Device Policy</p>
<p><img loading="lazy" src="/img/DefenderSecurityAPI/CAPolicy.png" alt="Classic Policy"  />
</p>
<p>Don&rsquo;t delete or disable the policy. It could have undesirable results as indicated in this <a href="https://learn.microsoft.com/en-gb/mem/intune/protect/advanced-threat-protection-configure#enable-microsoft-defender-for-endpoint-in-intune" target="_blank">Microsoft article</a>. Instead, add a group exclusion to the policy for the same group authorised to use the Azure App.</p>
<h2 id="summary">Summary</h2>
<p>This article is an introduction to accessing the Defender Security Center API using PowerShell with interactive authentication. Future articles will explore practical use cases.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Enable Defender Firewall event forwarding to MDE</title>
      <link>https://write-verbose.com/2023/02/02/Firewallmde/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/02/02/Firewallmde/</guid>
      <description>A reminder that Firewall Events are not available in MDE Advanced Hunting by default</description>
      <content:encoded><![CDATA[<p>You may notice that Windows Firewall events are not available in Defender for Endpoint Advanced Hunting. This is a quick post on the steps required to enable Firewall audit events.</p>
<p><a href="https://medium.com/@olafhartong" target="_blank">Olaf Hartong&amp;rsquo;s excellent series on MDE Internals</a> highlights that some MDE telemetry is based on Kernel call-backs or drivers, making those areas independent of client audit policy and enabled by default.</p>
<p>Other settings, however, do rely on ETW providers and therefore on the MDE client&rsquo;s security audit policy. Firewall audit events will only be available in MDE if the relevant audit subcategory is enabled.</p>
<h2 id="enable-client-side-firewall-auditing">Enable client-side Firewall auditing</h2>
<p>The following <em>auditpol</em> command will enable Windows Firewall client-side auditing and start sending the telemetry to MDE.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">auditpol /set /subcategory:<span class="s2">&#34;Filtering Platform Connection&#34;</span> /success:disable /failure:enable
</span></span></code></pre></div><p>It&rsquo;s fine to keep this enabled during day-to-day use as it will result in the following</p>
<ul>
<li>Blocked connections create an audit event in the Security Event Log</li>
<li>Allowed connections do not create an audit event</li>
<li><strong>A single audit event is created for each connection attempt</strong>, not each packet</li>
</ul>
<p>I don&rsquo;t recommend auditing Filtering Platform Connection <em>success</em> events as this will generate a lot of events. You may be tempted to also enable <em>Filtering Platform Packet Drop</em>, but this would also generate a high volume.</p>
<h2 id="intune">Intune</h2>
<p>You could of-course use Intune to apply the same setting to an enrolled Windows client. Create a <em>Device Configuration Profile</em> based on the <strong>Settings Catalog</strong>. Enter <em>Filtering</em> in the settings search and enable <em>Success</em> auditing for <strong>Object Access Audit Filtering Platform Connection</strong></p>
<h2 id="advanced-hunting-query">Advanced Hunting Query</h2>
<p>You can view the Firewall events in MDE Avanced Hunting as follows:</p>
<pre tabindex="0"><code class="language-KQL" data-lang="KQL">DeviceEvents
| where Timestamp &gt; ago(1d)
| where ActionType startswith &#34;Firewall&#34;
</code></pre><p>EXAMPLE RESULT:</p>
<table>
<thead>
<tr>
<th>Timestamp</th>
<th>ComputerName</th>
<th>ActionType</th>
<th>IPAddress</th>
<th>RemoteIPCountry</th>
<th>RemoteIPAddr</th>
<th>RemotePort</th>
<th>Protocol</th>
<th>Direction</th>
<th>NetworkProfile</th>
<th>InterfaceType</th>
<th>RuleId</th>
<th>RuleName</th>
<th>Action</th>
<th>Application</th>
<th>Service</th>
<th>User</th>
<th>InitiatingProcess</th>
<th>InitiatingProcessPath</th>
<th>InitiatingProcessCommandLine</th>
</tr>
</thead>
<tbody>
<tr>
<td>2023-02-02T10:30:12.000Z</td>
<td>DESKTOP01</td>
<td>Firewall</td>
<td>192.168.1.100</td>
<td>United States</td>
<td>54.239.29.192</td>
<td>443</td>
<td>TCP</td>
<td>Outbound</td>
<td>Domain</td>
<td>Wi-Fi</td>
<td></td>
<td></td>
<td>Allowed</td>
<td>Chrome.exe</td>
<td></td>
<td>User1</td>
<td>chrome.exe</td>
<td>C:\Program Files (x86)\Google\Chrome\chrome.exe</td>
<td></td>
</tr>
<tr>
<td>2023-02-02T09:01:30.000Z</td>
<td>DESKTOP02</td>
<td>Firewall</td>
<td>192.168.1.200</td>
<td>United States</td>
<td>91.189.91.26</td>
<td>53</td>
<td>UDP</td>
<td>Outbound</td>
<td>Public</td>
<td>Ethernet</td>
<td></td>
<td></td>
<td>Blocked</td>
<td>svchost.exe</td>
<td>DNS</td>
<td>User2</td>
<td>svchost.exe</td>
<td>C:\Windows\System32\svchost.exe</td>
<td></td>
</tr>
<tr>
<td>2023-02-02T08:45:55.000Z</td>
<td>DESKTOP03</td>
<td>Firewall</td>
<td>192.168.1.150</td>
<td>Canada</td>
<td>185.104.10.98</td>
<td>80</td>
<td>TCP</td>
<td>Inbound</td>
<td>Private</td>
<td>Wi-Fi</td>
<td></td>
<td></td>
<td>Blocked</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="example-event-in-windows-security-log">Example Event in Windows Security Log</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Log Name: Security
</span></span><span class="line"><span class="cl">Source: Microsoft Windows Security Auditing
</span></span><span class="line"><span class="cl">Date: 5/2/2023 10:31:12 AM
</span></span><span class="line"><span class="cl">Event ID: <span class="m">5444</span>
</span></span><span class="line"><span class="cl">Task Category: Filtering Platform Connection
</span></span><span class="line"><span class="cl">Level: Information
</span></span><span class="line"><span class="cl">Keywords: Audit Failure
</span></span><span class="line"><span class="cl">User: N/A
</span></span><span class="line"><span class="cl">Computer: MyComputer
</span></span><span class="line"><span class="cl">Description:
</span></span><span class="line"><span class="cl">A network connection request was blocked.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Subject:
</span></span><span class="line"><span class="cl">Security ID: S-1-5-18
</span></span><span class="line"><span class="cl">Account Name: MyComputer$
</span></span><span class="line"><span class="cl">Account Domain: MYDOMAIN
</span></span><span class="line"><span class="cl">Logon ID: 0x3E7
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Network Information:
</span></span><span class="line"><span class="cl">Direction: Inbound
</span></span><span class="line"><span class="cl">Source Address: 192.168.1.100
</span></span><span class="line"><span class="cl">Source Port: <span class="m">54321</span>
</span></span><span class="line"><span class="cl">Destination Address: 192.168.1.200
</span></span><span class="line"><span class="cl">Destination Port: <span class="m">80</span>
</span></span><span class="line"><span class="cl">Protocol: TCP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Filter Information:
</span></span><span class="line"><span class="cl">Filter Run-Time ID: <span class="m">157314</span>
</span></span><span class="line"><span class="cl">Layer Name: Transport
</span></span><span class="line"><span class="cl">Layer Run-Time ID: <span class="m">13</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Additional Information:
</span></span><span class="line"><span class="cl">Reason: The rule does not match the traffic.
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
  </channel>
</rss>
