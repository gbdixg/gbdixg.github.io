<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>PowerShell on Write-Verbose</title>
    <link>https://write-verbose.com/tags/powershell/</link>
    <description>Recent content in PowerShell on Write-Verbose</description>
    <image>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 17 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Read Intune Logs with PowerShell (CMTrace format)</title>
      <link>https://write-verbose.com/2023/04/17/readimelog/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/04/17/readimelog/</guid>
      <description>&lt;p&gt;Read-IMELog - A PowerShell script to read Intune Management Extension (IME) logs&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Read-IMELog - A PowerShell script to read Intune Management Extension (IME) logs</p>
<h2 id="background">Background</h2>
<p>The Intune Management Extension is a Windows client component responsible for running Intune scripts and installing Win32 apps. It creates log files in the following folder:<br>
<em>C:\ProgramData\Microsoft\IntuneManagementExtension\Logs</em></p>
<p>IME Log entries are in the CMTrace format used by System Center Configuration Manager e.g.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-LaTeX" data-lang="LaTeX"><span class="line"><span class="cl">&lt;![LOG[[Win32App] Checking ESP status and phase for sessionId: 0]LOG]!&gt;&lt;time=&#34;23:05:44.2390147&#34; date=&#34;4-16-2023&#34; component=&#34;IntuneManagementExtension&#34; context=&#34;&#34; type=&#34;1&#34; thread=&#34;65&#34; file=&#34;&#34;&gt;
</span></span><span class="line"><span class="cl">&lt;![LOG[[Proxy Poller] Processing session id 2 starts]LOG]!&gt;&lt;time=&#34;23:05:47.8411669&#34; date=&#34;4-16-2023&#34; component=&#34;IntuneManagementExtension&#34; context=&#34;&#34; type=&#34;1&#34; thread=&#34;25&#34; file=&#34;&#34;&gt;
</span></span></code></pre></div><p>They are best viewed using the <a href="https://learn.microsoft.com/en-us/mem/configmgr/core/support/cmtrace">CMTrace tool</a>, but this won&rsquo;t be readily available for a company that doesn&rsquo;t use System Center Configuration Manager. There is no official download for cloud-only businesses using Intune.</p>
<p><strong>Read-IMELog</strong> is a PowerShell script that converts IME logs to PowerShell objects, allowing flexible filtering and sorting.  It can also be used for Config Manager logs.</p>
<h2 id="example-usage-1---filter-on-message-text">Example usage 1 - filter on message text</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$IMELog</span> <span class="p">=</span> <span class="s1">&#39;C:\ProgramData\Microsoft\IntuneManagementExtension\Logs\IntuneManagementExtension.log&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">Read-IMELog</span> <span class="n">-Path</span> <span class="nv">$IMELog</span> <span class="p">|</span> <span class="nb">where-object</span><span class="p">{</span><span class="nv">$_</span><span class="p">.</span><span class="py">message</span> <span class="o">-like</span> <span class="s2">&#34;*ProcessDetection*&#34;</span><span class="p">}</span>  <span class="p">|</span> <span class="nb">Select-object</span> <span class="n">-first</span> <span class="mf">2</span>
</span></span></code></pre></div><p><img loading="lazy" src="/img/ReadImeLog1.png" alt="Example1"  />
</p>
<h2 id="example-usage-2---read-all-ime-logs">Example usage 2 - read all IME logs</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$IMELogFolder</span> <span class="p">=</span> <span class="s1">&#39;C:\ProgramData\Microsoft\IntuneManagementExtension\Logs&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-Childitem</span> <span class="n">-path</span> <span class="nv">$IMELogFolder</span> <span class="p">|</span> <span class="nb">Read-IMELog</span> <span class="p">|</span> <span class="nb">Out-Gridview</span>
</span></span></code></pre></div><p><img loading="lazy" src="/img/ReadImeLog2.png" alt="Example2"  />
</p>
<h2 id="read-imelogps1">Read-IMELog.ps1</h2>
<p>See below for the PowerShell script:</p>
<script type="application/javascript" src="https://gist.github.com/gbdixg/aaf6ebd42d29098700fc46382807b185.js"></script>

<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Creating a GUI App with PowerShell and WPF - Part 2 Controls, Events and XAML</title>
      <link>https://write-verbose.com/2023/03/21/PowerShellWPFPt2/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/21/PowerShellWPFPt2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;More things I learned creating a GUI tool with PowerShell and WPF.&lt;/strong&gt;&lt;br&gt;
The snippets in this article are based on the &lt;a href=&#34;https://github.com/gbdixg/Show-Win32AppUI&#34;&gt;Show-Win32AppUI tool&lt;/a&gt; available on GitHub.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>More things I learned creating a GUI tool with PowerShell and WPF.</strong><br>
The snippets in this article are based on the <a href="https://github.com/gbdixg/Show-Win32AppUI">Show-Win32AppUI tool</a> available on GitHub.</p>
<h1 id="part2---creating-a-multi-page-wpf-app-in-powershell">Part2 - Creating a multi-page WPF app in PowerShell</h1>
<p>(See <a href="/2023/03/21/PowerShellWPFPt1/">part1 of this series</a> for information on using PowerShell Runspaces with WPF).</p>
<p>WPF uses .XAML text files to define the layout and properties of supported <em>controls</em> such as Textboxes, Buttons, Status bars etc. XAML is a form is XML, with opening and closing tags that create a hierarchy of controls. A <em>child</em> control such as a Combobox is displayed within a parent container such as a <em>Window</em>.</p>
<p>Very simple apps may be able to fit controls in a single Window, but a <em>wizard</em>-driven interface will usually need multiple <strong>Pages</strong> to guide the user through selections. There are many ways to create a <strong>multi-page WPF app</strong>. The method below is the one I prefer:</p>
<h2 id="main-window-and-child-pages">Main window and child pages</h2>
<p>The starting point is a WPF <strong>Window</strong> control defined in it&rsquo;s own .XAML file. A Window is a container for other WPF controls, most importantly in this case, a  <strong>Frame</strong> that can load <strong>Pages</strong>. The main Window can show a header, footer and sidebar that is always visible while the Page within the Frame control changes as the user navigates the app.</p>
<p><img loading="lazy" src="/img/WindowFrame.png" alt="MainWindow"  />
</p>
<p>Each page can be defined in a separate .XAML file. A Page is also a container so each page can host controls such as Textboxes, Textblocks, Comboboxes etc. The Frame content is updated at runtime to show a new Page when an event occurs such as clicking navigation buttons.</p>
<p>A Frame does have a built-in navigation control, but it isn&rsquo;t pretty.  I turn it off and use <strong>Button</strong> controls in the main Window.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Partial XAML for a Main Window with a Frame and navigation Buttons--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Window</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;850&#34;</span> <span class="na">Width=</span><span class="s">&#34;450&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Pages will be loaded into this frame at runtime--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Frame</span> <span class="na">x:Name=</span><span class="s">&#34;frame_Pages&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;2&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.ColumnSpan=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">NavigationUIVisibility=</span><span class="s">&#34;Hidden&#34;</span> <span class="err">#</span> <span class="err">Built-in</span> <span class="err">navigation</span> <span class="err">disabled</span>
</span></span><span class="line"><span class="cl">        <span class="na">Margin=</span><span class="s">&#34;0,10,0,0&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Navigation Buttons below the pages--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Button</span> <span class="na">x:Name =</span> <span class="s">&#34;Btn_Previous&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Content=</span><span class="s">&#34;Previous&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Height=</span><span class="s">&#34;35&#34;</span> <span class="na">Width=</span><span class="s">&#34;60&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;2&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="na">BorderThickness=</span><span class="s">&#34;0&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Button</span> <span class="na">x:Name =</span> <span class="s">&#34;Btn_Next&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Content=</span><span class="s">&#34;Next&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Margin=</span><span class="s">&#34;3,0,0,0&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Height=</span><span class="s">&#34;35&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Width=</span><span class="s">&#34;60&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">BorderThickness=</span><span class="s">&#34;0&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/gbdixg/Show-Win32AppUI/tree/main/Show-Win32AppUI/Xaml">Show-Win32UI tool</a> for an example of separate XAML files per Page and main Window.</p>
<h1 id="load-xaml-controls-into-powershell-variables">Load XAML controls into PowerShell variables</h1>
<p>A thread safe Hashtable collection allows WPF controls to be referenced in PowerShell at runtime. Grouping the controls in a collection is convenient as it simplifies passing them into Runspaces.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example of reading controls from XAML files and assigning them to variables</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">LoadXml</span> <span class="p">(</span><span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Convert a .XAML file to an XMLDocument</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$XmlLoader</span> <span class="p">=</span> <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="n">XmlDocument</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$XmlLoader</span><span class="p">.</span><span class="py">Load</span><span class="p">(</span><span class="nv">$filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$XmlLoader</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Load the XAML files</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlMainWindow</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PSScriptRoot</span><span class="s2">\Xaml\MainWindow.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage1</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PScriptRoot</span><span class="s2">\Xaml\Page1.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage2</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PScriptRoot</span><span class="s2">\Xaml\Page2.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Collection storing references to all named WPF controls in the UI</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">=[</span><span class="no">hashtable</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">(</span><span class="vm">@</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Convert Windows and Pages to a XAML object graph</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlMainWindow</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlPage1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlPage2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Add each named control to the $UIControls hashtable (repeat for each Window / Page)</span>
</span></span><span class="line"><span class="cl"><span class="c"># This allows key controls to be referenced directly at runtime, rather than through a parent-child hierarchy of Page&gt;Control</span>
</span></span><span class="line"><span class="cl"><span class="nv">$XmlMainWindow</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage1</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage2</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Example of loading first Page into the Frame</span>
</span></span><span class="line"><span class="cl"><span class="c"># &#34;frame_Pages&#34; in the name of the Frame defined in the XAML file</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">frame_Pages</span><span class="p">.</span><span class="py">Content</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Show the user interface</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span><span class="p">.</span><span class="py">ShowDialog</span><span class="p">()</span>  
</span></span></code></pre></div><h2 id="using-wpf-styles-to-simplify-xaml">Using WPF Styles to simplify XAML</h2>
<p>XAML styles are analogous to CSS in HTML. The XAML style can apply to all controls of a type, such as all TextBoxes, defining properties such as the colour, font, border etc. If a property needs to be changed, it only needs to be updated in one place. Its also a flexible solution because Style properties can still be over-ridden on an individual control.</p>
<p>Styles can be defined in a separate XAML file and then <em>imported</em> on each Window / Page as a <strong>ResourceDictionary</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Styles.xaml defines a TextBox style called ModernTextBox--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ResourceDictionary</span> <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Style</span> <span class="na">TargetType=</span><span class="s">&#34;{x:Type TextBox}&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">x:Key=</span><span class="s">&#34;ModernTextBox&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;BorderThickness&#34;</span> <span class="na">Value=</span><span class="s">&#34;0,0,0,1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;BorderBrush&#34;</span> <span class="na">Value=</span><span class="s">&#34;LightGray&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;Background&#34;</span> <span class="na">Value=</span><span class="s">&#34;Transparent&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;FontSize&#34;</span> <span class="na">Value=</span><span class="s">&#34;18&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Style&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/ResourceDictionary&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MainWindow.xaml imports Styles.xml as a ResourceDictionary--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Window</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;850&#34;</span> <span class="na">Width=</span><span class="s">&#34;450&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Title=</span><span class="s">&#34;Main Window&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Import a style so it can used by controls in this Window--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Window.Resources&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;ResourceDictionary</span> <span class="na">Source=</span><span class="s">&#34;Styles.xaml&#34;</span><span class="nt">/&gt;</span>     
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Window.Resources&gt;</span>
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Page1.xaml imports Styles.xml as a ResourceDictionary--&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Page</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Background=</span><span class="s">&#34;Transparent&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Import a style so it can used by controls in this Page--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Page.Resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ResourceDictionary</span> <span class="na">Source=</span><span class="s">&#34;Styles.xaml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Page.Resources&gt;</span>
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MainWindow.xaml or Page1.xaml uses the style on a Textbox as shown below--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;TextBox</span> <span class="na">x:Name=</span><span class="s">&#34;txt_InstallArgs&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;330&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;30&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBox}&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><h2 id="define-the-wpf-layout-with-the-grid-control">Define the WPF layout with the Grid control</h2>
<p>The <strong>Grid</strong> control overlays invisible rows and columns on a parent container such as a Window or Page. The Controls are then positioned based on the Row and Column number. It is fairly simple to design the Grid layout using a basic text editor.  For a more WYSIWYG experience, use Microsoft Visual Studio to view the UI at design time.</p>
<p>There are three options for Grid Row/Column height / width:</p>
<table>
<thead>
<tr>
<th>Size</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>[Pixels]</td>
<td>A fixed size</td>
</tr>
<tr>
<td>&ldquo;Auto&rdquo;</td>
<td>Expand to fit content</td>
</tr>
<tr>
<td>&ldquo;*&rdquo;</td>
<td>Fit to remaining space in Window / Page</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!-- Example positioning a Textbox above a TextBlock using a Grid
</span></span></span><span class="line"><span class="cl"><span class="c">     TextBox is in Grid.Row = &#34;1&#34; and TextBlock is in Grid.Row = &#34;2&#34;--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Grid&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Grid.ColumnDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;Auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Grid.ColumnDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;*&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Grid.RowDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;TextBox</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Width=</span><span class="s">&#34;350&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBox}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;TextBlock</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;2&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Text=</span><span class="s">&#34;Enter your name&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBlock}&#34;</span><span class="nt">/&gt;</span>   
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/Grid&gt;</span>
</span></span></code></pre></div><h2 id="use-margins-to-create-space-between-controls">Use margins to create space between controls</h2>
<p>The Margin property is available on most controls. The margin creates a buffer of blank space around a control.  The margin can either be the same all round, or different for each vector - left, top, right, and bottom</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Example setting a Margin around a control--&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Different margin for left, top, right, and bottom --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ComboBox</span> <span class="na">x:Name=</span><span class="s">&#34;combo_Supercedence&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Column=</span><span class="s">&#34;0&#34;</span>  
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Row=</span><span class="s">&#34;11&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;360&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;24&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Margin=</span><span class="s">&#34;15,5,0,0&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Same margin all round --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ComboBox</span> <span class="na">x:Name=</span><span class="s">&#34;combo_Supercedence&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Column=</span><span class="s">&#34;0&#34;</span>  
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Row=</span><span class="s">&#34;11&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;360&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;24&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Margin=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>   
</span></span></code></pre></div><h2 id="defining-event-handlers">Defining Event Handlers</h2>
<p>WPF controls support events that occur based on user input. Some events are common to most controls, such as <strong>MouseEnter</strong> and <strong>MouseLeave</strong> while other events are specific to a control type, such as <strong>SelectionChanged</strong> in a ComboBox.</p>
<p>PowerShell uses an &ldquo;Add_[Event Name]&rdquo; syntax to define the code to run when the event fires as below. The per-control event list is available in the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.combobox?view=windowsdesktop-7.0#events">MS Documentation</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Example event handler - code will run when the Combo box selection changes</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">combo_language</span><span class="p">.</span><span class="py">Add_SelectionChanged</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nv">$Language</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">combo_language</span><span class="p">.</span><span class="py">SelectedItem</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Example event handler - code will run when the button is left clicked</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">btn_Next</span><span class="p">.</span><span class="py">Add_Click</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="py">frame_Pages</span><span class="p">.</span><span class="py">Content</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Creating a GUI App with PowerShell and WPF - Part 1 Runspaces</title>
      <link>https://write-verbose.com/2023/03/21/PowerShellWPFPt1/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/21/PowerShellWPFPt1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Things I learned creating a GUI tool with PowerShell and WPF.&lt;/strong&gt;&lt;br&gt;
The snippets in this article are based on the &lt;a href=&#34;https://github.com/gbdixg/Show-Win32AppUI&#34;&gt;Show-Win32AppUI tool&lt;/a&gt; available on GitHub.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p><strong>Things I learned creating a GUI tool with PowerShell and WPF.</strong><br>
The snippets in this article are based on the <a href="https://github.com/gbdixg/Show-Win32AppUI">Show-Win32AppUI tool</a> available on GitHub.</p>
<h1 id="disclaimer">Disclaimer</h1>
<p>I realise PowerShell isn&rsquo;t suited to creating GUI apps. The main reason to use PowerShell is <em>supportability</em>. Specifically, when working with Colleagues who aren&rsquo;t comfortable maintaining a compiled language like C#. Its far easier to make small changes to variables or paths in a script.</p>
<h1 id="why-wpf">Why WPF?</h1>
<p>WPF is a more modern and flexible choice for a UI than the something like WinForms.  There are many newer frameworks available, but most require a runtime on the target platform.  WPF is easy to deploy as it&rsquo;s built-into the .NET Framework and available by default on Windows 10/11.</p>
<h1 id="part1---design-the-app-around-powershell-runspaces">Part1 - Design the app around PowerShell Runspaces</h1>
<p>If you try to create a GUI app with a single thread, it will be unresponsive and hang whenever an action takes more than a few seconds. PowerShell runs under a single thread (STA mode) making it unsuitable for a responsive GUI app.  However, creating separate <em>Runspaces</em> is a workaround for this problem. Runspaces are analogous to spinning up new PowerShell sessions in the background to execute discrete script blocks.</p>
<p>While Runspaces are effective, they also add a lot of complexity. For example:</p>
<ul>
<li>Functions and variables are not shared between Runspaces by default and have to be imported when the Runspace is started.</li>
<li>You should use a thread-safe collection when updating shared variables inside a Runspace.</li>
<li>The WPF UI can&rsquo;t be updated directly from a separate Runspace</li>
<li>Writing to a single file from multiple Runspaces requires a locking mechanism, such as a Mutex</li>
<li>The lifecycle of Runspaces must be managed, capturing output at completion</li>
<li>Warning, Verbose and Error streams in the Runspace are not captured by default</li>
<li>Warning, Verbose and Error streams do not appear in the console by default.</li>
</ul>
<p>These concepts are covered in more detail below.</p>
<h2 id="sharing-variables-functions-and-modules-with-a-runspace">Sharing variables, functions and modules with a Runspace</h2>
<p><strong>Required modules</strong> must be specifically loaded into the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.initialsessionstate?view=powershellsdk-7.3.0">InitialSessionState</a> of the Runspace. The Runspace won&rsquo;t automatically have access to modules already loaded in the <em>parent</em> PowerShell session.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example of importing modules into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$modulesToLoad</span><span class="p">=</span><span class="vm">@</span><span class="p">(</span><span class="s1">&#39;Microsoft.Graph.Intune&#39;</span><span class="p">,</span><span class="s1">&#39;MSAL.PS&#39;</span><span class="p">)</span> <span class="c"># Must be installed on the computer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$initialSessionState</span> <span class="p">=</span> <span class="p">[</span><span class="no">initialsessionstate</span><span class="p">]::</span><span class="n">CreateDefault</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$module</span> <span class="k">in</span> <span class="nv">$modulesToLoad</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$initialSessionState</span><span class="p">.</span><span class="py">ImportPSModule</span><span class="p">(</span><span class="nv">$module</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span></code></pre></div><p>You can also import <strong>standalone Functions</strong> into a Runspace using the <em>InitialSessionState</em>. The following imports functions already loaded in the <em>parent</em> session, but you could also load directly from a file on disk.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example importing parent session functions into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$FunctionsToImport</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s1">&#39;Write-TxtLog&#39;</span><span class="p">,</span><span class="s1">&#39;Get-APIResults&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$function</span> <span class="k">in</span> <span class="nv">$functionsToImport</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$definition</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="s2">&#34;Function:\</span><span class="nv">$Function</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$entry</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Management</span><span class="p">.</span><span class="py">Automation</span><span class="p">.</span><span class="py">Runspaces</span><span class="p">.</span><span class="py">SessionStateFunctionEntry</span> <span class="n">-ArgumentList</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$definition</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$initialSessionState</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="nv">$entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Variables</strong> can be shared with a Runspace using the <strong>SetVariable</strong> method of the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.sessionstateproxy?view=powershellsdk-7.3.0">SessionStateProxy</a> class.  SetVariable parameters are the <em>variable name</em> (without the &lsquo;$&rsquo;) and the value to set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example importing parent session variables into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$VariablesToImport</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="s1">&#39;displayName&#39;</span><span class="p">)</span> <span class="c"># existing variables in the parent session</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">Foreach</span><span class="p">(</span><span class="nv">$var</span> <span class="k">in</span> <span class="nv">$VariablesToImport</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$VarValue</span> <span class="p">=</span> <span class="nb">Get-Variable</span> <span class="n">-Name</span> <span class="nv">$Var</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-ExpandProperty</span> <span class="n">Value</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="nv">$Var</span><span class="p">,</span><span class="nv">$VarValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="runspace-output-using-a-thread-safe-collection">Runspace output using a thread-safe collection</h2>
<p>Output from a Runspace can be captured during execution using a thread-safe collection imported from the parent session. When a Runspace updates the collection the updated values are available in the parent session and any concurrent Runspaces that also import the collection.  Thread safe collections usually need to be <em>locked</em> during update to prevent conflicts.</p>
<p>With a <strong>synchronised Arraylist</strong>, values added in the Runspace will immediately available to all other Runspaces and the parent session, as in following example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example using locks on a thread safe collection ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$BackgroundJobs</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.collections.arraylist</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Collections</span><span class="p">.</span><span class="n">ArrayList</span><span class="p">))</span> <span class="c"># Thread safe collection</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;BackgroundJobs&#39;</span><span class="p">,</span><span class="nv">$BackgroundJobs</span><span class="p">)</span> <span class="c"># Pass the variable into the RunSpace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># This is the Runspace script block</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># lock</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="s2">&#34;New item&#34;</span><span class="p">)</span> <span class="c"># modify ArrayList</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># unlock</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">},</span><span class="vm">$True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span><span class="p">.</span><span class="py">Runspace</span> <span class="p">=</span> <span class="nv">$Runspace</span>
</span></span><span class="line"><span class="cl"><span class="vm">$null</span> <span class="p">=</span> <span class="nv">$PSCode</span><span class="p">.</span><span class="py">BeginInvoke</span><span class="p">()</span>
</span></span></code></pre></div><p>There are also <em>Queues and Stacks</em> in .NET that automatically implement locking and don&rsquo;t need the System.Threading.Monitor code in the above example e.g. a <em>ConcurrentQueue</em>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### ConcurrentQueue example - doesn&#39;t need System.Threading.Monitor ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Collections.Concurrent.ConcurrentQueue[psobject]</span><span class="p">]::</span><span class="n">new</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryAdd</span><span class="p">([</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span> <span class="n">givenName</span> <span class="p">=</span> <span class="s1">&#39;Bill&#39;</span><span class="p">;</span><span class="n">sn</span><span class="p">=</span><span class="s1">&#39;Gates&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryAdd</span><span class="p">([</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span> <span class="n">givenName</span> <span class="p">=</span> <span class="s1">&#39;Steve&#39;</span><span class="p">;</span><span class="n">sn</span><span class="p">=</span><span class="s1">&#39;Jobs&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;colQueue&#39;</span><span class="p">,</span><span class="nv">$colQueue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># This is the Runspace script block</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># No locking required when ConcurrentQueue is modified in the Runspace</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$Entry</span> <span class="p">=</span> <span class="vm">$null</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryDequeue</span><span class="p">([</span><span class="no">ref</span><span class="p">]</span><span class="nv">$Entry</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Write-Output</span> <span class="nv">$Entry</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"> <span class="p">},</span><span class="vm">$True</span><span class="p">)</span>   
</span></span></code></pre></div><p>More information on thread safe collections is available <a href="https://learn.microsoft.com/en-us/dotnet/standard/collections/thread-safe/">here</a></p>
<h2 id="how-to-update-the-wpf-user-interface-from-another-runspace">How to update the WPF user interface from another Runspace</h2>
<p>If you try to modify the WPF user interface from a separate Runspace, PowerShell will throw an error indicating only the owning thread (Runspace) can update it.</p>
<p><img loading="lazy" src="/img/UIThreadError2.png" alt="UIError"  />
</p>
<p>The solution is to wrap the update in a <strong>Dispatcher.Invoke</strong> method as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example updating a WPF control from another thread (Runspace) ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># In the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="c"># txt_SetupFile is a WPF text box created in the parent session of the Runspace</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">txt_SetupFile</span><span class="p">.</span><span class="py">Dispatcher</span><span class="p">.</span><span class="py">Invoke</span><span class="p">([</span><span class="no">action</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="py">txt_SetupFile</span><span class="p">.</span><span class="py">Text</span> <span class="p">=</span> <span class="s2">&#34;Successfully updated from another Runspace&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span><span class="s2">&#34;Normal&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="writing-to-the-same-log-file-from-separate-runspaces">Writing to the same log file from separate Runspaces</h2>
<p>Runspaces also make it more complex to write to a single log file. There is potential for a deadlock or <a href="https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#race-conditions">race condition</a> to occur. A <strong>Mutex</strong> is one way to implement the required locking:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example using a Mutex lock before writing to a log file ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># In the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="c"># LogMutex is an arbitrary name but must be the same when used in any Runspace and the parent session</span>
</span></span><span class="line"><span class="cl"><span class="nv">$mtx</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Threading</span><span class="p">.</span><span class="py">Mutex</span><span class="p">(</span><span class="vm">$false</span><span class="p">,</span> <span class="s2">&#34;LogMutex&#34;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">If</span> <span class="p">(</span><span class="nv">$mtx</span><span class="p">.</span><span class="py">WaitOne</span><span class="p">()){</span> <span class="c"># Wait until this Runspace can get a lock on the LogMutex object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># Lock obtained. Other Runspaces are now waiting</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Add-Content</span> <span class="n">-Path</span> <span class="nv">$logFile</span> <span class="n">-Value</span> <span class="nv">$Message</span>  <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">void</span><span class="p">]</span><span class="nv">$mtx</span><span class="p">.</span><span class="py">ReleaseMutex</span><span class="p">()</span> <span class="c"># release the lock</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$mtx</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="managing-runspace-lifecycle">Managing Runspace lifecycle</h2>
<p>A Runspace executes its script block asynchronously and output (if any) is available at the end. The parent session must manage Runspaces, checking for completion, processing output and ultimately disposing of them.  If you don&rsquo;t dispose of Runspaces they will persist until the parent PowerShell session is closed and could eat-up memory.</p>
<p>A <strong>Timer</strong> is a common way to manage Runspaces in an event-driven WPF script. When the Timer event fires, its script blocks checks for Runspace completion as in the example below. A thread safe collection is used to keep track of Runspaces until they are disposed of.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example Timer code to clean-up completed Runspaces ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Create a collection to track Runspaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PS</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">(</span><span class="nv">$codeToRunInRunspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$handle</span> <span class="p">=</span> <span class="nv">$PS</span><span class="p">.</span><span class="py">BeginInvoke</span><span class="p">()</span> <span class="c"># Start the runspace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Add the new Runspace to the RunspaceJobs collection</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceJobs</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.collections.arraylist</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Collections</span><span class="p">.</span><span class="n">ArrayList</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># lock</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="py">Add</span><span class="p">([</span><span class="no">PSCustomObject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">powerShell</span> <span class="p">=</span> <span class="nv">$PS</span>  <span class="c"># System.Management.Automation.PowerShell object</span>
</span></span><span class="line"><span class="cl">        <span class="n">runspace</span> <span class="p">=</span> <span class="nv">$handle</span> <span class="c"># System.Management.Automation.PowerShellAsyncResult Object</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span> <span class="p">|</span> <span class="nb">Out-Null</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># unlock</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Timer to manage Runspace lifecycle</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Windows</span><span class="p">.</span><span class="py">Forms</span><span class="p">.</span><span class="py">Timer</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Enabled</span> <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Interval</span> <span class="p">=</span> <span class="mf">5000</span>  <span class="c"># Timer code runs every 5 seconds</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Add_Tick</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># In the timer code</span>
</span></span><span class="line"><span class="cl">    <span class="k">Foreach</span><span class="p">(</span><span class="nv">$job</span> <span class="k">in</span> <span class="nv">$Script:RunspaceJobs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">IsCompleted</span> <span class="o">-eq</span> <span class="vm">$True</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">           <span class="c"># Capture completed Runspace output and dispose of it to free-up memory</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$RSOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">EndInvoke</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="n">runspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="c"># Remove the job from the tracking collection</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="py">Remove</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Host</span> <span class="s2">&#34;Runspace disposal Failed &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="c">#foreach</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">})</span><span class="c">#End of timer scriptblock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Start</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="capturing-verbose-warning-and-error-streams-from-a-runspace">Capturing Verbose, Warning and Error streams from a Runspace</h2>
<p>By default, the Runspace output streams are not displayed in the parent session console and are lost when the Runspace is disposed.<br>
The output can be captured at Runspace completion using the <strong>Streams</strong> object. The modification below to the Timer script block saves the output to a log file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">#### Modified Timer code to capture additional output streams at clean-up ####</span>
</span></span><span class="line"><span class="cl"><span class="k">Foreach</span><span class="p">(</span><span class="nv">$job</span> <span class="k">in</span> <span class="nv">$Global:BackgroundJobs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">IsCompleted</span> <span class="o">-eq</span> <span class="vm">$True</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Runspace &#39;</span><span class="p">$(</span><span class="nv">$job</span><span class="p">.</span><span class="py">powershell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="s2">&#39; completed...&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c"># Could also include &#39;DEBUG&#39; and &#39;Information&#39; streams if used in your Runspaces</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$Streams</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Verbose&#39;</span><span class="p">=</span><span class="s1">&#39;VERBOSE&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Warning&#39;</span><span class="p">=</span><span class="s1">&#39;WARN&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Error&#39;</span><span class="p">=</span><span class="s1">&#39;ERROR&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">Foreach</span><span class="p">(</span><span class="nv">$StreamType</span> <span class="k">in</span> <span class="nv">$Streams</span><span class="p">.</span><span class="n">Keys</span><span class="p">){</span>                        
</span></span><span class="line"><span class="cl">            <span class="nv">$StreamOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powershell</span><span class="p">.</span><span class="py">Streams</span><span class="p">.</span><span class="s2">&#34;</span><span class="nv">$StreamType</span><span class="s2">&#34;</span>  <span class="c"># Capture the Runspace output for each stream</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="nv">$StreamOutput</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$StreamOutput</span> <span class="p">|</span> <span class="nb">Foreach-Object</span> <span class="p">{</span> <span class="nb">Write-TxtLog</span> <span class="nv">$_</span> <span class="n">-indent</span> <span class="mf">2</span> <span class="n">-severity</span> <span class="vm">$</span><span class="p">(</span><span class="nv">$Streams</span><span class="p">[</span><span class="nv">$StreamType</span><span class="p">])</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Remove-Variable</span> <span class="n">-name</span> <span class="s1">&#39;StreamOutput&#39;</span> <span class="n">-force</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Disposing of runspace...&#34;</span> <span class="n">-indent</span> <span class="mf">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$RSOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">EndInvoke</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="n">runspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c"># Remove the job from the tracking list</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="py">Remove</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Failed &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span> <span class="n">-indent</span> <span class="mf">2</span> <span class="n">-severity</span> <span class="n">ERROR</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c">#foreach</span>
</span></span></code></pre></div><h2 id="displaying-verbose-warning-and-error-streams-in-the-console">Displaying Verbose, Warning and Error Streams in the console</h2>
<p>The approach above captures output when the Runspace code has completed. If you want feedback in the console during execution there are a couple of methods.</p>
<p>Firstly, the simplest option is to use the <strong>.NET Console.Writeline()</strong> method. Although this doesn&rsquo;t capture the PowerShell streams, it is a simple way to provide real-time console output in the parent session.<br>
You will need to implement your own colour-coding to distinguish between warnings or errors if needed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example Runspace code to write to parent PowerShell console ###</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">console</span><span class="p">]::</span><span class="n">ForegroundColor</span><span class="p">=</span><span class="s1">&#39;YELLOW&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">Console</span><span class="p">]::</span><span class="n">WriteLine</span><span class="p">(</span><span class="s1">&#39;Username was not found&#39;</span><span class="p">)</span>  <span class="c"># Automatically writes to the parent session</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">console</span><span class="p">]::</span><span class="n">ResetColor</span><span class="p">()</span>
</span></span></code></pre></div><p>Alternatively, you could pass the built-in $Host variable from the parent session into the Runspace and use methods like WriteVerboseLine() as shown below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example writing to parent console using the $Host variable </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;ParentHost&#39;</span><span class="p">,</span><span class="nv">$Host</span><span class="p">)</span>  <span class="c"># Built-in host variable passed into the Runspace as $ParentHost</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Write to the parent console from the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">ui</span><span class="p">.</span><span class="py">WriteVerboseLine</span><span class="p">(</span><span class="s2">&#34;Realtime verbose output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">UI</span><span class="p">.</span><span class="py">WriteWarningLine</span><span class="p">(</span><span class="s2">&#34;Realtime warning output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">UI</span><span class="p">.</span><span class="py">WriteErrorLine</span><span class="p">(</span><span class="s2">&#34;Realtime error output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/gbdixg/Show-Win32AppUI">Show-Win32AppUI tool</a> for an example of using these ideas together in a WPF app.</p>
<p>See <a href="/2023/03/21/PowerShellWPFPt2/">part2 of this series</a> for information on WPF controls, events and XAML.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Avoid excess permissions with a custom app to access MSGraph PowerShell</title>
      <link>https://write-verbose.com/2023/03/19/AzureAppRegistration/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/19/AzureAppRegistration/</guid>
      <description>&lt;p&gt;A step by step guide to registering a custom Azure application for interactive MSGraph PowerShell. The example will create an app for use with the &lt;a href=&#34;https://write-verbose.com/2023/03/18/Show-Win32AppUI/&#34;&gt;Show-Win32AppUI tool&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>A step by step guide to registering a custom Azure application for interactive MSGraph PowerShell. The example will create an app for use with the <a href="/2023/03/18/Show-Win32AppUI/">Show-Win32AppUI tool</a>.</p>
<h1 id="why-use-a-custom-app">Why use a custom app?</h1>
<p>The Microsoft Graph enables access to a wide scope of Azure / Microsoft 365 providers and resources. A compromised Global Administrator account or errant script could cause widespread damage very quickly.</p>
<p>A custom Azure application can limit MS Graph access to specific requirements of a PowerShell script, reducing the risk.</p>
<h1 id="disable-user-consent">Disable user consent</h1>
<p>The first step is to prevent users granting application consent. User consent is enabled by default and presents a risk of unwanted access to company data.</p>
<p>In the <a href="https://aad.portal.azure.com/">Azure AD portal</a>, navigate to <strong>Enterprise applications</strong> and then <strong>Consent and permissions</strong>.</p>
<p>Many companies change the setting to <strong>Do not allow user consent</strong>. Note that this does create an admin overhead, so you could look into the advanced options of defining low-risk permissions or using conditional access.</p>
<p><img loading="lazy" src="/img/CustomApp0.png" alt="User consent"  />
</p>
<p>The following admin roles can then grant application consent:</p>
<ul>
<li>Cloud App Administrators</li>
<li>Global Administrators</li>
</ul>
<h1 id="clean-up-microsoft-graph-powershell">Clean-up Microsoft Graph PowerShell</h1>
<p>If you want to implement Custom Apps for access to MSGraph, you should first review and remove excess permissions from the <em>Microsoft Graph PowerShell</em> app. Over time administrators may have consented to more and more permissions.</p>
<p>It isn&rsquo;t possible to remove permissions or revoke consent in the admin portal, but it does provide the PowerShell commands.</p>
<p>In the <a href="https://aad.portal.azure.com/">Azure AD portal</a>, navigate to <strong>Enterprise applications</strong><br>
In the <em>All applications</em> view, select <strong>Microsoft Graph PowerShell</strong> and then <strong>Permissions</strong><br>
Click <strong>Review Permissions</strong></p>
<p><img loading="lazy" src="/img/CustomApp05.png" alt="User consent"  />
</p>
<p>Select <strong>This application has more permissions that I want</strong>. The following PowerShell is displayed (uses the AzureAD module):</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Connect-AzureAD</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Get Service Principal using objectId</span>
</span></span><span class="line"><span class="cl"><span class="nv">$sp</span> <span class="p">=</span> <span class="nb">Get-AzureADServicePrincipal</span> <span class="n">-ObjectId</span> <span class="s2">&#34;1aded007-dfd1-49cc-8b70-9923a4f53a05&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Get all delegated permissions for the service principal</span>
</span></span><span class="line"><span class="cl"><span class="nv">$spOAuth2PermissionsGrants</span> <span class="p">=</span> <span class="nb">Get-AzureADOAuth2PermissionGrant</span> <span class="n">-All</span> <span class="vm">$true</span><span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="py">clientId</span> <span class="o">-eq</span> <span class="nv">$sp</span><span class="p">.</span><span class="py">ObjectId</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Remove all delegated permissions</span>
</span></span><span class="line"><span class="cl"><span class="nv">$spOAuth2PermissionsGrants</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Remove-AzureADOAuth2PermissionGrant</span> <span class="n">-ObjectId</span> <span class="nv">$_</span><span class="p">.</span><span class="py">ObjectId</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Get all application permissions for the service principal</span>
</span></span><span class="line"><span class="cl"><span class="nv">$spApplicationPermissions</span> <span class="p">=</span> <span class="nb">Get-AzureADServiceAppRoleAssignedTo</span> <span class="n">-ObjectId</span> <span class="nv">$sp</span><span class="p">.</span><span class="py">ObjectId</span> <span class="n">-All</span> <span class="vm">$true</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="py">PrincipalType</span> <span class="o">-eq</span> <span class="s2">&#34;ServicePrincipal&#34;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Remove all delegated permissions</span>
</span></span><span class="line"><span class="cl"><span class="nv">$spApplicationPermissions</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">Remove-AzureADServiceAppRoleAssignment</span> <span class="n">-ObjectId</span> <span class="nv">$_</span><span class="p">.</span><span class="py">PrincipalId</span> <span class="n">-AppRoleAssignmentId</span> <span class="nv">$_</span><span class="p">.</span><span class="py">objectId</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h1 id="custom-app-step-by-step">Custom app Step by Step</h1>
<p>The following steps create a new application with delegated API access to MSGraph, suitable for use from a PowerShell script. The permissions are specific to the <a href="/2023/03/18/Show-Win32AppUI/">Show-Win32AppUI</a></p>
<p>Open the <a href="https://aad.portal.azure.com/">Azure AD portal</a> and select <strong>App registrations</strong></p>
<p>Click on <strong>New Registration</strong> to start the process</p>
<p><img loading="lazy" src="/img/CustomApp1.png" alt="New registration"  />
</p>
<p>Enter a name for the application and select the <strong>single tenant</strong> option. Do not enter a redirect URI at this stage.</p>
<p><img loading="lazy" src="/img/CustomApp2.png" alt="App Name"  />
</p>
<p>Click on <strong>Register</strong></p>
<p>The application is created and the admin center shows the <em>Overview</em> page.</p>
<p>Click <strong>Add a Redirect URI</strong></p>
<p><img loading="lazy" src="/img/CustomApp3.png" alt="App Name"  />
</p>
<p>The authentication step is displayed. Click on <strong>Add a platform</strong></p>
<p><img loading="lazy" src="/img/CustomApp4.png" alt="App Name"  />
</p>
<p>Select <strong>Mobile and desktop applications</strong></p>
<p><img loading="lazy" src="/img/CustomApp5.png" alt="App Name"  />
</p>
<p>Enable the <em>nativeclient</em> URI to support PowerShell 5.1 scripts. Add a custom redirect URI of <em>http://localhost</em> to support PowerShell 7.x scripts.</p>
<p><img loading="lazy" src="/img/CustomApp6.png" alt="App Name"  />
</p>
<p>Click <strong>Configure</strong> to save the URIs</p>
<p>Now back on the Authentication page, ensure the following options are set:</p>
<ul>
<li>Supported account types = <strong>Accounts in this organizational directory only</strong></li>
<li>Allow public client flows = <strong>No</strong></li>
</ul>
<p><img loading="lazy" src="/img/CustomApp7.png" alt="App Name"  />
</p>
<p>Click <strong>API permissions</strong> in the left pane</p>
<p>User.Read delegated access is already assigned by default.  Click <strong>Add a permission</strong></p>
<p><img loading="lazy" src="/img/CustomApp8.png" alt="App Name"  />
</p>
<p>Select the <strong>Microsoft Graph</strong> API</p>
<p><img loading="lazy" src="/img/CustomApp9.png" alt="App Name"  />
</p>
<p>Select <strong>Delegated permissions</strong></p>
<p><img loading="lazy" src="/img/CustomApp10.png" alt="App Name"  />
</p>
<p>Search for each of the following delegated permissions, enable and click <strong>Add permissions</strong></p>
<ul>
<li>DeviceManagementApps.ReadWrite.All</li>
</ul>
<p><img loading="lazy" src="/img/CustomApp11.png" alt="App Name"  />
</p>
<p>Repeat the process to add permissions for the following:</p>
<ul>
<li>Group.ReadWrite.All</li>
<li>GroupMember.ReadWrite.All</li>
<li>Directory.AccessAsUser.All</li>
</ul>
<p>The API permissions page will show the list of added permissions with a warning that consent is <em>not granted</em>.<br>
Click <strong>Grant admin consent for <tenant></strong></p>
<p><img loading="lazy" src="/img/CustomApp12.png" alt="App Name"  />
</p>
<p>The warnings will be replaced by a green tick.</p>
<p>Return to the application <strong>Overview</strong> page and note the <em>Application (client) ID</em> - this will be used to authenticate</p>
<h1 id="add-assignment-restrictions">Add assignment restrictions</h1>
<p>By default anyone in the tenant can access the application (although they need Role permissions to make changes in Azure AD and Intune). This step will limit access to a specific group.</p>
<p>View the <strong>Properties</strong> page of the app and change <strong>Assignment required</strong> to <em>Yes</em></p>
<p><img loading="lazy" src="/img/CustomApp125.png" alt="App Name"  />
</p>
<p>Next click on <strong>Users and groups</strong> then <strong>add user/group</strong>. Select the required Azure AD group and <em>Assign</em>. Only members of this group can authenticate using the app.</p>
<p><img loading="lazy" src="/img/CustomApp126.png" alt="App Name"  />
</p>
<h1 id="authenticating-using-the-custom-app">Authenticating using the custom app</h1>
<p><em>Delegated consent</em> uses the intersection of application permissions and user permissions to authorise access. i.e. the authenticated user must have the required permissions as well as the application.</p>
<p>Use interactive authentication to provide credentials with the required role permissions. Interactive auth prompts using the familiar browser page:</p>
<p><img loading="lazy" src="/img/CustomApp13.png" alt="App Name"  />
</p>
<p>Examples of PowerShell authentication using the app are below:</p>
<h2 id="msalps-authentication">MSAL.PS authentication</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$TenantID</span> <span class="p">=</span> <span class="p">&lt;</span><span class="n">your</span> <span class="n">tenant</span> <span class="n">ID</span> <span class="n">obtained</span> <span class="n">from</span> <span class="n">the</span> <span class="n">AAD</span> <span class="n">Overview</span> <span class="n">page</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ClientID</span> <span class="p">=</span> <span class="p">&lt;</span><span class="n">application</span> <span class="n">ID</span> <span class="n">of</span> <span class="n">the</span> <span class="n">custom</span> <span class="n">app</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Token</span> <span class="p">=</span> <span class="nb">Get-MSALToken</span> <span class="n">-TenantID</span> <span class="nv">$TenantID</span> <span class="n">-ClientID</span> <span class="nv">$ClientID</span> <span class="n">-Interactive</span>
</span></span></code></pre></div><h2 id="intunewin32app-authentication">IntuneWin32App authentication</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$TenantID</span> <span class="p">=</span> <span class="p">&lt;</span><span class="n">your</span> <span class="n">tenant</span> <span class="n">ID</span> <span class="n">obtained</span> <span class="n">from</span> <span class="n">the</span> <span class="n">AAD</span> <span class="n">Overview</span> <span class="n">page</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ClientID</span> <span class="p">=</span> <span class="p">&lt;</span><span class="n">application</span> <span class="n">ID</span> <span class="n">of</span> <span class="n">the</span> <span class="n">custom</span> <span class="n">app</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Connect-MSIntuneGraph</span> <span class="n">-TenantID</span> <span class="nv">$TenantID</span> <span class="n">-ClientID</span> <span class="nv">$ClientID</span> <span class="n">-Interactive</span>
</span></span></code></pre></div><p>The Connect-MSIntuneGraph command in the IntuneWin32App module creates global variables to store the token for later use:</p>
<ul>
<li>$Global:AuthenticationHeader</li>
<li>$Global:AccessToken</li>
</ul>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Create custom code snippets in VSCode</title>
      <link>https://write-verbose.com/2021/05/07/vscodesnippets/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/05/07/vscodesnippets/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;BACKGROUND&lt;/h2&gt;
&lt;p&gt;VSCode snippets are a productivity feature allowing blocks of code to be inserted with a couple of keystrokes or tab completion. Its simple to add your own Snippets and dramatically boost your productivity. Read on for the details.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="background">BACKGROUND</h2>
<p>VSCode snippets are a productivity feature allowing blocks of code to be inserted with a couple of keystrokes or tab completion. Its simple to add your own Snippets and dramatically boost your productivity. Read on for the details.</p>
<blockquote>
<p>All paths and keyboard shortcuts in this article assume VSCode is running on Windows</p>
</blockquote>
<p>Predefined Snippets are included with most of the VSCode language extensions (use @category:&ldquo;snippets&rdquo; in the extensions pane to see which ones). However, they may not match your coding style, or have trigger text that suits you. User-defined snippets allow complete customisation. They also support variables that are replaced with required values on insert, making them perfect for boilerplate code.</p>
<h2 id="editing-user-defined-snippets">EDITING USER-DEFINED SNIPPETS</h2>
<p>Open a language-specific Snippet file as follows (example using PowerShell):</p>
<p><code>File &gt; Preferences &gt; User Snippets &gt; PowerShell</code></p>
<p>A .json file is displayed, empty at first.</p>
<p>A Snippet is made up of the following elements</p>
<table>
<thead>
<tr>
<th>Element</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>&ldquo;Function template&rdquo;</td>
<td>The name is shown by Intellisense if there is no description</td>
</tr>
<tr>
<td>prefix</td>
<td>[&ldquo;ft&rdquo;,&ldquo;function&rdquo;]</td>
<td>One or more trigger words that activate intellisense (uses substring matching)</td>
</tr>
<tr>
<td>body</td>
<td>[&ldquo;function Verb-Noun {\r&rdquo;,&quot;[cmdletbinding()]\r&quot;]</td>
<td>The template code to be inserted</td>
</tr>
<tr>
<td>description</td>
<td>Advanced function boilerplate</td>
<td>Optional description displayed by intellisense</td>
</tr>
<tr>
<td>placeholder</td>
<td>${1:Verb-Noun}</td>
<td>An element within the body that is replaced by the user after insertion. The number represents the tab stop position. The text is the default value that is replaced</td>
</tr>
<tr>
<td>choices</td>
<td>${1|one,two,three|}</td>
<td>This placeholder will prompt to choose one of the options between the pipe characters</td>
</tr>
<tr>
<td>$0</td>
<td>[&ldquo;while($i -lt 10){\r&rdquo;,&quot;\t$0\r&quot;,&quot;}&quot;]</td>
<td>A special placeholder that always comes last and ends insertion mode</td>
</tr>
</tbody>
</table>
<h3 id="snippet-example">Snippet example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;Advanced function&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;fa&#34;</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;Function ${1:Verb-Noun}{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;[cmdletBinding()]\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;param(\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;    \r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;)\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;BEGIN{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;PROCESS{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;$0\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;END{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="p">],</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Advanced function boilerplate&#34;</span>
</span></span></code></pre></div><p>Note the use of a JSON array for the body and control characters for new lines. This is quite laborious to create by hand, but VSCode extensions can make this much easier&hellip;</p>
<h3 id="marketplace-snippet-extension">Marketplace Snippet Extension</h3>
<p>There are a number of extensions in the VSCode marketplace that will create a Snippet from highlighted code in the editor.</p>
<p>For example, <a href="https://marketplace.visualstudio.com/items?itemName=ryanolsonx.snippet-creator">Snippet Creator</a> will automatically detetect the in-use language and then prompt for the Snippet prefix and description.  You can then edit the Snippet to fine-tune it.</p>
<h3 id="snippet-scope">Snippet Scope</h3>
<p><strong>Language-specific</strong></p>
<p>Most Snippets will be created in a language-specific Snippet file and will only prompt for insertion when using that language e.g.<br>
        <code>%APPDATA%\Code\User\snippetsPowershell.json</code></p>
<p><strong>Global</strong></p>
<p>There is also a global Snippets file that applies to all languages. This file does not exist by default but can be created from <code>File &gt; Preferences &gt; User Snippets &gt; New Global Snippets file</code>. The file can have any name, but always ends in <code>.code-snippets</code>. For example:<br>
        <code>%APPDATA%\Code\User\snippets\GlobalSnippets.code-snippets</code></p>
<p>The global Snippets can use an additional property called <em>Scope</em> to limit them to a list of languages. If it isn&rsquo;t specified, they are available to all.</p>
<p><strong>Project-specific</strong></p>
<p>If a global Snippets file is placed in the <code>.vscode</code> folder at the root of a project, it is scoped only to that project.  It can still use the scope property to further limit Snippets to specific languages.</p>
<h2 id="keyboard-shortcut">Keyboard Shortcut</h2>
<p>Use <code>File &gt; Preferences &gt; Keyboard Shortcuts &gt; Open Keyboard Shortcuts (JSON)</code> to assign a shortcut to a Snippet. Custom shortcuts are saved in the file <code>%AppData%\Code\User\keybindings.json</code></p>
<p>If the Snippet is not in the Global Snippets file, the langId is used to specify a language specific Snippet:</p>
<h3 id="keybinding-example">Keybinding example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;cmd+k 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;editor.action.insertSnippet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;when&#34;</span><span class="p">:</span> <span class="s2">&#34;editorTextFocus&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;langId&#34;</span><span class="p">:</span> <span class="s2">&#34;csharp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;NewClass&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="hiding-snippets">Hiding Snippets</h2>
<p>Hiding Snippets is useful when there is a lot of noise in the Intellisense prompts. This can occur when you create a user snippet with the same trigger as a language extension snippet.</p>
<blockquote>
<ul>
<li>Open the insert Snippet dialog using CTRL + ALT + J</li>
<li>Start typing the tigger characters to show the Snippet options in the list</li>
<li>Hover over each item and click the Hide from Intellisense option on the right hand side</li>
</ul>
</blockquote>
<h2 id="extension-snippets">Extension Snippets</h2>
<p>I don&rsquo;t recommend trying to edit or remove extension Snippets. Changes are likely to get overwritten when the extension updates.</p>
<p>For information, extension Snippets are stored under <code>%USERPROFILE%\.vscode\extensions</code>. For example the Microsoft PowerShell extension Snippets are at:</p>
<p><code>%USERPROFILE%\.vscode\extensions\ms-vscode.powershell-2021.2.2\snippets\PowerShell.json</code></p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Find a computer&#39;s Active Directory Site and Subnet with PowerShell</title>
      <link>https://write-verbose.com/2019/04/13/find-adsite/</link>
      <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/04/13/find-adsite/</guid>
      <description>&lt;p&gt;Read-on for a PowerShell command to get the Active Directory Subnet and Site from the computername or IP Address.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Read-on for a PowerShell command to get the Active Directory Subnet and Site from the computername or IP Address.</p>
<p><strong>Active Directory Sites</strong> represent locations with good network connectivity. An ADSite is often created for each office or a group of offices in a metropolitan area, to generate the replication topology between Domain Controllers, and to help workstations/servers locate closest services.</p>
<p><strong>Active Directory Subnets</strong> define the IP ranges included in an AD Site. A member workstation/server will have an IP address that should fall within a defined AD subnet, making it part of an AD Site.</p>
<p>AD Site membership is not fixed. Laptops can move between Sites and Subnets when they roam to another location.</p>
<blockquote>
<p>An incorrect or undefined AD subnet can lead to slow logon times and slow access to DFS shares. A domain member would use any server that responds when it isn&rsquo;t in a defined subnet.</p>
</blockquote>
<h2 id="powershell-script">PowerShell script</h2>
<p>The <strong>Find-ADSite</strong> PowerShell function below will return the AD Site and Subnet for a specified computer name or IP Address.<br>
If a company populates subnet descriptions with useful information, it can also identify information such as the specific Office or floor.</p>
<p>AD Administrators may define a <a href="https://blog.mindcore.dk/2013/07/catch-all-or-super-subnet-in-sites-and/">catch-all subnet</a> with a wide address range. By default if the IP address is within more than one subnet, the output will only include the smallest range. Use the -AllMatches parameter to see everything.</p>
<p><img loading="lazy" src="/img/find-adsite1.png" alt="Find-ADSite"  />
</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="kd">Function</span><span class="w"> </span><span class="nb">Find-ADSite</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">Synopsis</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Used to get the Active Directory subnet and the site it is assigned to for a Windows computer/IP address
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">Description</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Requires only standard user read access to AD and can determine the ADSite for a local or remote computer
</span></span></span><span class="line"><span class="cl"><span class="cm"> .PARAMETER  IPAddress
</span></span></span><span class="line"><span class="cl"><span class="cm">  Specifies the IP Address for the subnet/site lookup in as a .NET System.Net.IPAddress
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  When this parameter is used, the computername is not specified.
</span></span></span><span class="line"><span class="cl"><span class="cm"> .PARAMETER  Computername
</span></span></span><span class="line"><span class="cl"><span class="cm">  Specifies a computername for the subnet/site lookup.
</span></span></span><span class="line"><span class="cl"><span class="cm">  The computername is resolved to an IP address before performing the subnet query.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Defaults to %COMPUTERNAME%
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  When this parameter is used, the IPAddress and IP are not specified.
</span></span></span><span class="line"><span class="cl"><span class="cm"> .PARAMETER  DC
</span></span></span><span class="line"><span class="cl"><span class="cm">  A specific domain controller in the current users domain for the subnet query
</span></span></span><span class="line"><span class="cl"><span class="cm">  If not specified, standard DC locator methods are used.
</span></span></span><span class="line"><span class="cl"><span class="cm"> .PARAMETER  AllMatches
</span></span></span><span class="line"><span class="cl"><span class="cm">  A switch parameter that causes the subnet query to return all matching subnets in AD
</span></span></span><span class="line"><span class="cl"><span class="cm">  This is not normally used as the default behaviour (only the most specific match is returned) is usually prefered.
</span></span></span><span class="line"><span class="cl"><span class="cm">  This switch will include &#34;catch-all&#34; subnets that may be defined to accomodate missing subnets
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">Example</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  PS C:\&gt;Find-ADSite -ComputerName PC123456789
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  ComputerName      : PC123456789
</span></span></span><span class="line"><span class="cl"><span class="cm">  IPAddress         : 162.26.192.151
</span></span></span><span class="line"><span class="cl"><span class="cm">  ADSubnetName      : 162.26.192.128/25
</span></span></span><span class="line"><span class="cl"><span class="cm">  ADSubnetDesc      : 3rd Floor Main Road Office
</span></span></span><span class="line"><span class="cl"><span class="cm">  ADSiteName        : EULON01
</span></span></span><span class="line"><span class="cl"><span class="cm">  ADSiteDescription : London
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">Notes</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  Version:        1.1
</span></span></span><span class="line"><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">(</span><span class="na">DefaultParameterSetName</span> <span class="p">=</span> <span class="s2">&#34;byHost&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="k">Param</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">(</span><span class="na">Position</span> <span class="p">=</span> <span class="mf">0</span><span class="p">,</span> <span class="na">ValueFromPipeline</span> <span class="p">=</span> <span class="vm">$true</span><span class="p">,</span> <span class="na">ValueFromPipelineByPropertyName</span> <span class="p">=</span> <span class="vm">$True</span><span class="p">,</span> <span class="na">ParameterSetName</span> <span class="p">=</span> <span class="s2">&#34;byHost&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">string</span><span class="p">]</span><span class="nv">$ComputerName</span> <span class="p">=</span> <span class="nv">$Env:COMPUTERNAME</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">(</span><span class="na">Position</span> <span class="p">=</span> <span class="mf">0</span><span class="p">,</span> <span class="na">ValueFromPipeline</span> <span class="p">=</span> <span class="vm">$true</span><span class="p">,</span> <span class="na">ValueFromPipelineByPropertyName</span> <span class="p">=</span> <span class="vm">$True</span><span class="p">,</span> <span class="na">Mandatory</span> <span class="p">=</span> <span class="vm">$True</span><span class="p">,</span> <span class="na">ParameterSetName</span> <span class="p">=</span> <span class="s2">&#34;byIPAddress&#34;</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Net.IPAddress</span><span class="p">]</span><span class="nv">$IPAddress</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">(</span><span class="na">Position</span> <span class="p">=</span> <span class="mf">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">string</span><span class="p">]</span><span class="nv">$DC</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">Parameter</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">switch</span><span class="p">]</span><span class="nv">$AllMatches</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">switch</span> <span class="p">(</span><span class="nv">$pscmdlet</span><span class="p">.</span><span class="na">ParameterSetName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;byHost&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Resolved</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.net.dns</span><span class="p">]::</span><span class="n">GetHostByName</span><span class="p">(</span><span class="nv">$Computername</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Net.IPAddress</span><span class="p">]</span><span class="nv">$IP</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$Resolved</span><span class="p">.</span><span class="n">AddressList</span><span class="p">)[</span><span class="mf">0</span><span class="p">]</span> <span class="o">-as</span> <span class="p">[</span><span class="no">System.Net.IPAddress</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">Write-Warning</span> <span class="s2">&#34;</span><span class="nv">$ComputerName</span><span class="s2"> :: Unable to resolve name to an IP Address&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$IP</span> <span class="p">=</span> <span class="vm">$Null</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;byIPAddress&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Resolved</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.net.dns</span><span class="p">]::</span><span class="n">GetHostByAddress</span><span class="p">(</span><span class="nv">$IPAddress</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ComputerName</span> <span class="p">=</span> <span class="nv">$Resolved</span><span class="p">.</span><span class="py">HostName</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c"># Write-Warning &#34;$IP :: Could not be resolved to a hostname&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ComputerName</span> <span class="p">=</span> <span class="s2">&#34;Unable to resolve&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$IP</span> <span class="p">=</span> <span class="nv">$IPAddress</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#switch</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$IP</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c"># The following maths loops over all the possible subnet mask lengths</span>
</span></span><span class="line"><span class="cl">            <span class="c"># The masks are converted into the number of Bits to allow conversion to CIDR format</span>
</span></span><span class="line"><span class="cl">            <span class="c"># The script tries to lookup every possible range/subnet bits combination and keeps going until it finds a hit in AD</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="no">psobject[]</span><span class="p">]</span><span class="nv">$MatchedSubnets</span> <span class="p">=</span> <span class="vm">@</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">For</span> <span class="p">(</span><span class="nv">$bit</span> <span class="p">=</span> <span class="mf">30</span> <span class="p">;</span> <span class="nv">$bit</span> <span class="o">-ge</span> <span class="mf">1</span><span class="p">;</span> <span class="nv">$bit</span><span class="p">--)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">int</span><span class="p">]</span><span class="nv">$octet</span> <span class="p">=</span> <span class="p">[</span><span class="no">math</span><span class="p">]::</span><span class="n">Truncate</span><span class="p">((</span><span class="nv">$bit</span> <span class="p">-</span> <span class="mf">1</span> <span class="p">)</span> <span class="p">/</span> <span class="mf">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$net</span> <span class="p">=</span> <span class="p">[</span><span class="no">byte[]</span><span class="p">]</span><span class="vm">@</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="nv">$o</span> <span class="p">=</span> <span class="mf">0</span><span class="p">;</span> <span class="nv">$o</span> <span class="o">-le</span> <span class="mf">3</span><span class="p">;</span> <span class="nv">$o</span><span class="p">++)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ba</span> <span class="p">=</span> <span class="nv">$ip</span><span class="p">.</span><span class="py">GetAddressBytes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="nv">$o</span> <span class="o">-lt</span> <span class="nv">$Octet</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> <span class="p">+=</span> <span class="nv">$ba</span><span class="p">[</span><span class="nv">$o</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">ELSEIF</span> <span class="p">(</span><span class="nv">$o</span> <span class="o">-eq</span> <span class="nv">$octet</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$factor</span> <span class="p">=</span> <span class="mf">8</span> <span class="p">+</span> <span class="nv">$Octet</span> <span class="p">*</span> <span class="mf">8</span> <span class="p">-</span> <span class="nv">$bit</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Divider</span> <span class="p">=</span> <span class="p">[</span><span class="no">math</span><span class="p">]::</span><span class="n">pow</span><span class="p">(</span><span class="mf">2</span><span class="p">,</span> <span class="nv">$factor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$value</span> <span class="p">=</span> <span class="nv">$divider</span> <span class="p">*</span> <span class="p">[</span><span class="no">math</span><span class="p">]::</span><span class="n">Truncate</span><span class="p">(</span><span class="nv">$ba</span><span class="p">[</span><span class="nv">$o</span><span class="p">]</span> <span class="p">/</span> <span class="nv">$divider</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> <span class="p">+=</span> <span class="nv">$value</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">ELSE</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nv">$Net</span> <span class="p">+=</span> <span class="mf">0</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="c">#Next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c">#Format network in CIDR notation</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Network</span> <span class="p">=</span> <span class="p">[</span><span class="no">string</span><span class="p">]::</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="nv">$net</span><span class="p">)</span> <span class="p">+</span> <span class="s2">&#34;/</span><span class="nv">$bit</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c"># Try to find this Network in AD Subnets list</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Verbose</span> <span class="s2">&#34;Trying : </span><span class="nv">$Network</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$de</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">DirectoryServices</span><span class="p">.</span><span class="py">DirectoryEntry</span><span class="p">(</span><span class="s2">&#34;LDAP://&#34;</span> <span class="p">+</span> <span class="nv">$DC</span> <span class="p">+</span> <span class="s2">&#34;rootDSE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Root</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">DirectoryServices</span><span class="p">.</span><span class="py">DirectoryEntry</span><span class="p">(</span><span class="s2">&#34;LDAP://</span><span class="nv">$DC</span><span class="p">$(</span><span class="nv">$de</span><span class="p">.</span><span class="n">configurationNamingContext</span><span class="p">)</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ds</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Directoryservices</span><span class="p">.</span><span class="py">DirectorySearcher</span><span class="p">(</span><span class="nv">$root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ds</span><span class="p">.</span><span class="k">filter</span> <span class="p">=</span> <span class="s2">&#34;(CN=</span><span class="nv">$Network</span><span class="s2">)&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Result</span> <span class="p">=</span> <span class="nv">$ds</span><span class="p">.</span><span class="py">findone</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Result</span> <span class="p">=</span> <span class="vm">$null</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="nv">$Result</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nb">write-verbose</span> <span class="s2">&#34;AD Site found for </span><span class="nv">$IP</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="c"># Try to split out AD Site from LDAP path</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$SiteDN</span> <span class="p">=</span> <span class="nv">$Result</span><span class="p">.</span><span class="py">GetDirectoryEntry</span><span class="p">().</span><span class="py">siteObject</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$SiteDe</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">DirectoryServices</span><span class="p">.</span><span class="py">DirectoryEntry</span><span class="p">(</span><span class="s2">&#34;LDAP://</span><span class="nv">$SiteDN</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ADSite</span> <span class="p">=</span> <span class="nv">$SiteDe</span><span class="p">.</span><span class="n">Name</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$ADSiteDescription</span> <span class="p">=</span> <span class="nv">$SiteDe</span><span class="p">.</span><span class="n">Description</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$MatchedSubnets</span> <span class="p">+=</span> <span class="p">[</span><span class="no">PSCustomObject][Ordered</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ComputerName</span> <span class="p">=</span> <span class="nv">$ComputerName</span>
</span></span><span class="line"><span class="cl">                        <span class="n">IPAddress</span>    <span class="p">=</span> <span class="nv">$IP</span><span class="p">.</span><span class="py">ToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ADSubnetName</span> <span class="p">=</span> <span class="vm">$</span><span class="p">(</span><span class="nv">$Result</span><span class="p">.</span><span class="py">properties</span><span class="p">.</span><span class="n">name</span><span class="p">).</span><span class="py">ToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ADSubnetDesc</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Result</span><span class="p">.</span><span class="py">properties</span><span class="p">.</span><span class="n">description</span><span class="p">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ADSiteName</span>       <span class="p">=</span> <span class="nv">$ADSite</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ADSiteDescription</span> <span class="p">=</span> <span class="nv">$ADSiteDescription</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$bFound</span> <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="c">#endif</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="c">#next</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$bFound</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$AllMatches</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c"># output all the matched subnets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$MatchedSubnets</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c"># Only output the subnet with the largest mask bits</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">Int32</span><span class="p">]</span><span class="nv">$MaskBits</span> <span class="p">=</span> <span class="mf">0</span> <span class="c"># initial value</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$MatchedSubnet</span> <span class="k">in</span> <span class="nv">$MatchedSubnets</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="nv">$MatchedSubnet</span><span class="p">.</span><span class="py">ADSubnetName</span> <span class="o">-match</span> <span class="s2">&#34;\/(?&lt;Bits&gt;\d+)$&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="p">[</span><span class="no">Int32</span><span class="p">]</span><span class="nv">$ThisMaskBits</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;Bits&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">Write-Verbose</span> <span class="s2">&#34;ThisMaskBits = &#39;</span><span class="nv">$ThisMaskBits</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="nv">$ThisMaskBits</span> <span class="o">-gt</span> <span class="nv">$MaskBits</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="c"># This is a more specific subnet</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                            <span class="nv">$OutputSubnet</span> <span class="p">=</span> <span class="nv">$MatchedSubnet</span>
</span></span><span class="line"><span class="cl">                            <span class="nv">$MaskBits</span> <span class="p">=</span> <span class="nv">$ThisMaskBits</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nb">Write-Verbose</span> <span class="s2">&#34;No match&#34;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">Write-Verbose</span> <span class="s2">&#34;No match&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$OutputSubnet</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="c">#endif</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">Write-Verbose</span> <span class="s2">&#34;AD Subnet not found for </span><span class="nv">$IP</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$IP</span> <span class="o">-eq</span> <span class="vm">$null</span><span class="p">)</span> <span class="p">{</span><span class="nv">$IP</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span><span class="p">}</span> <span class="c"># required to prevent exception on ToString() below</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">PSObject</span> <span class="n">-Property</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">ComputerName</span> <span class="p">=</span> <span class="nv">$ComputerName</span>
</span></span><span class="line"><span class="cl">                <span class="n">IPAddress</span>    <span class="p">=</span> <span class="nv">$IP</span><span class="p">.</span><span class="py">ToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="n">ADSubnetName</span> <span class="p">=</span> <span class="s2">&#34;Not found&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ADSubnetDesc</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ADSiteName</span>   <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="n">ADSiteDescription</span> <span class="p">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#end if</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="c">#process</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Export Remote Eventlog with PowerShell</title>
      <link>https://write-verbose.com/2019/04/06/export-eventlog/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/04/06/export-eventlog/</guid>
      <description>&lt;p&gt;This article includes a PowerShell &lt;em&gt;Export-Eventlog&lt;/em&gt; command to quickly export a Windows event log from a remote computer and copy it to the local machine.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This article includes a PowerShell <em>Export-Eventlog</em> command to quickly export a Windows event log from a remote computer and copy it to the local machine.</p>
<p>Event logs are a cornerstone of troubleshooting, but getting access to them can be difficult across the network.</p>
<blockquote>
<p>It can be faster to export a Windows event log on a remote computer,  copy the .evtx file over the network and then query it locally.</p>
</blockquote>
<p>The PowerShell <strong>Get-Winevent</strong> command can work against remote event logs, but it can be painfully slow over the network. Copying an entire exported log (.evtx file) across the same connection is much faster. Get-Winevent can still be used with the <em>-path</em> parameter to query the locally copied .evtx file.</p>
<h2 id="powershell-script">PowerShell Script</h2>
<p><strong>wevtutil.exe</strong> is Windows .exe that can export event logs.  The PowerShell function below uses wevtutil to export one ore more event logs and copy them locally. The computer name is pre-pended to the log name.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="kd">Function</span><span class="w"> </span><span class="nb">Export-EventLog</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">		.</span><span class="sd">SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			Exports a remote event log to a file.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		.</span><span class="sd">DESCRIPTION</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			Uses wevtutil.exe to perform the export on the remote computer
</span></span></span><span class="line"><span class="cl"><span class="cm">			The log(s) are saved to c:\Windows\Temp and then moved over the network to the local computer
</span></span></span><span class="line"><span class="cl"><span class="cm">			The resulting log file is $Path\$computername-$logname.evtx
</span></span></span><span class="line"><span class="cl"><span class="cm">			The file can then be opened in Windows Event Viewer or queried directly using &#34;Get-Winevent -Path....&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			The remote computer must be online and the Windows Firewall must allow inbound RPC and SMB connections
</span></span></span><span class="line"><span class="cl"><span class="cm">		.PARAMETER  Computername
</span></span></span><span class="line"><span class="cl"><span class="cm">			The name of the remote computer.
</span></span></span><span class="line"><span class="cl"><span class="cm">		.PARAMETER  Logname
</span></span></span><span class="line"><span class="cl"><span class="cm">			The name(s) of the log file to export.
</span></span></span><span class="line"><span class="cl"><span class="cm">		.PARAMETER  Path
</span></span></span><span class="line"><span class="cl"><span class="cm">			The local folder path where the output file will be saved
</span></span></span><span class="line"><span class="cl"><span class="cm">			Default = %TEMP%
</span></span></span><span class="line"><span class="cl"><span class="cm">		.PARAMETER  RemotePath
</span></span></span><span class="line"><span class="cl"><span class="cm">			The remote folder path used to stage the exported file prior to moving it to the local folder path.
</span></span></span><span class="line"><span class="cl"><span class="cm">			Environment variables are not supported.
</span></span></span><span class="line"><span class="cl"><span class="cm">			Default = C:\Windows\Temp
</span></span></span><span class="line"><span class="cl"><span class="cm">		.</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			PS C:\&gt; Export-EventLog -Computername &#34;PC654321&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			This command will export the System and Application event logs from the remote computer PC654321
</span></span></span><span class="line"><span class="cl"><span class="cm">			The logs will be exported to c:\windows\temp on the remote computer then moved to
</span></span></span><span class="line"><span class="cl"><span class="cm">			c:\temp on the local computer
</span></span></span><span class="line"><span class="cl"><span class="cm">		.</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			PS C:\&gt; Export-EventLog -Computername &#34;PC654321&#34; -LogName &#34;System&#34;,&#34;Security&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			This command will export the System and Security event logs from the remote computer PC654321
</span></span></span><span class="line"><span class="cl"><span class="cm">		.</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			PS C:\&gt; &#34;PC654321&#34; | Export-EventLog -LogName &#34;Application&#34;,&#34;Security&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			This command will export the Application and Security event logs from the remote computer PC654321
</span></span></span><span class="line"><span class="cl"><span class="cm">		.</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			PS C:\&gt; Get-Winevent -Computername $Computer -Listlog * -EA 0 | Where{$_.RecordCount -gt 0} | Export-EventLog -Computername $Computer
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			This command will export all the event logs from the remote computer represented by the $computer variable
</span></span></span><span class="line"><span class="cl"><span class="cm">		.</span><span class="sd">NOTES</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">			Version: 1.0
</span></span></span><span class="line"><span class="cl"><span class="cm">	#&gt;</span>
</span></span><span class="line"><span class="cl">	<span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">	<span class="k">param</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="nb">parameter</span><span class="p">(</span><span class="na">position</span> <span class="p">=</span> <span class="mf">0</span><span class="p">,</span> <span class="na">valuefromPipeline</span> <span class="p">=</span> <span class="vm">$true</span><span class="p">,</span> <span class="na">valuefrompipelinebypropertyname</span> <span class="p">=</span> <span class="vm">$true</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="no">string[]</span><span class="p">]</span><span class="nv">$Computername</span> <span class="p">=</span> <span class="nv">$Env:COMPUTERNAME</span>
</span></span><span class="line"><span class="cl">		<span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="nb">parameter</span><span class="p">(</span><span class="na">position</span> <span class="p">=</span> <span class="mf">1</span><span class="p">,</span> <span class="na">valuefrompipelinebypropertyname</span> <span class="p">=</span> <span class="vm">$true</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="no">string[]</span><span class="p">]</span><span class="nv">$LogName</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s2">&#34;System&#34;</span><span class="p">,</span> <span class="s2">&#34;Application&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="nb">parameter</span><span class="p">(</span><span class="na">position</span> <span class="p">=</span> <span class="mf">2</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="nb">ValidateScript</span><span class="p">(</span> <span class="p">{</span> <span class="nb">Test-Path</span> <span class="nv">$_</span> <span class="n">-PathType</span> <span class="s1">&#39;Container&#39;</span> <span class="p">})]</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="no">string</span><span class="p">]</span><span class="nv">$Path</span> <span class="p">=</span> <span class="nv">$ENV:TEMP</span>
</span></span><span class="line"><span class="cl">		<span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="nb">parameter</span><span class="p">(</span><span class="na">position</span> <span class="p">=</span> <span class="mf">3</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">		<span class="p">[</span><span class="no">string</span><span class="p">]</span><span class="nv">$RemotePath</span> <span class="p">=</span> <span class="s2">&#34;C:\Windows\Temp&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">Foreach</span> <span class="p">(</span><span class="nv">$Name</span> <span class="k">in</span> <span class="nv">$Computername</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">Write-Progress</span> <span class="n">-id</span> <span class="mf">1</span> <span class="n">-Activity</span> <span class="s2">&#34;Computer &#34;</span> <span class="n">-Status</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">If</span> <span class="p">(</span><span class="nb">Test-Connection</span> <span class="n">-ComputerName</span> <span class="nv">$Name</span> <span class="n">-Count</span> <span class="mf">1</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nv">$LogName</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$Log</span> <span class="p">=</span> <span class="nv">$_</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">PSObject</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">Computername</span><span class="p">,</span> <span class="n">LogName</span><span class="p">,</span> <span class="n">Path</span><span class="p">,</span> <span class="n">Result</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span><span class="p">.</span><span class="py">Computername</span> <span class="p">=</span> <span class="nv">$Name</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span><span class="p">.</span><span class="py">LogName</span> <span class="p">=</span> <span class="nv">$Log</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="p">((</span><span class="nb">Get-WinEvent</span> <span class="n">-LogName</span> <span class="nv">$Log</span> <span class="n">-ComputerName</span> <span class="nv">$Name</span> <span class="n">-MaxEvents</span> <span class="mf">1</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span> <span class="p">|</span> <span class="nb">Measure-Object</span><span class="p">).</span><span class="py">Count</span> <span class="o">-lt</span> <span class="mf">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nb">Write-Warning</span> <span class="n">-Message</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">::</span><span class="nv">$log</span><span class="s2"> log is empty. Skipping export&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="k">return</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$OutputFileName</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">-</span><span class="p">$(</span><span class="nv">$Log</span> <span class="o">-replace</span> <span class="s2">&#34;/&#34;</span><span class="p">,</span><span class="s2">&#34;-&#34;</span><span class="p">)</span><span class="s2">.evtx&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="nb">Write-Progress</span> <span class="n">-id</span> <span class="mf">2</span> <span class="n">-ParentId</span> <span class="mf">1</span> <span class="n">-Activity</span> <span class="s2">&#34;Exporting&#34;</span> <span class="n">-Status</span> <span class="s2">&#34;</span><span class="nv">$Log</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="p">(</span><span class="nv">$Name</span> <span class="o">-eq</span> <span class="nv">$Env:COMPUTERNAME</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nb">Write-Verbose</span> <span class="s2">&#34;Local computer...&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="nv">$Cmd</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Env:windir</span><span class="p">)</span><span class="s2">\system32\wevtutil.exe epl &#39;</span><span class="nv">$Log</span><span class="s2">&#39; &#39;</span><span class="nv">$Path</span><span class="s2">\</span><span class="nv">$OutputFileName</span><span class="s2">&#39; /r:</span><span class="nv">$Name</span><span class="s2"> /ow:True 2&gt;&amp;1&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="nv">$CmdResult</span> <span class="p">=</span> <span class="nb">Invoke-Expression</span> <span class="n">-Command</span> <span class="nv">$cmd</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="p">(</span><span class="nv">$CmdResult</span> <span class="o">-eq</span> <span class="vm">$Null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Verbose</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">::</span><span class="nv">$log</span><span class="s2"> log export to &#39;</span><span class="nv">$path</span><span class="s2">&#39; = &#39;Success&#39;&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="nv">$Output</span><span class="p">.</span><span class="py">Result</span> <span class="p">=</span> <span class="s2">&#34;Success&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Error</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">::</span><span class="nv">$log</span><span class="s2"> log export to &#39;</span><span class="nv">$path</span><span class="s2">&#39; = &#39;</span><span class="nv">$CmdResult</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="nv">$Output</span><span class="p">.</span><span class="py">Result</span> <span class="p">=</span> <span class="s2">&#34;Error - </span><span class="nv">$CMDResult</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nb">Write-Verbose</span> <span class="s2">&#34;Remote computer...&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="c"># Wevtutil LogName filepath /r:&lt;remote computer&gt; /ow:&lt;Overwrite true/false&gt;</span>
</span></span><span class="line"><span class="cl">						<span class="nv">$Cmd</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Env:windir</span><span class="p">)</span><span class="s2">\system32\wevtutil.exe epl &#39;</span><span class="nv">$Log</span><span class="s2">&#39; &#39;</span><span class="nv">$RemotePath</span><span class="s2">\</span><span class="nv">$OutputFileName</span><span class="s2">&#39; /r:</span><span class="nv">$Name</span><span class="s2"> /ow:True 2&gt;&amp;1&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="nv">$CmdResult</span> <span class="p">=</span> <span class="nb">Invoke-Expression</span> <span class="n">-Command</span> <span class="nv">$cmd</span>
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="p">(</span><span class="nv">$CmdResult</span> <span class="o">-eq</span> <span class="vm">$Null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="c"># Convert &lt;Drive&gt;:\ to \&lt;Drive&gt;$ for remote connection</span>
</span></span><span class="line"><span class="cl">							<span class="nv">$RemoteUNC</span> <span class="p">=</span> <span class="nv">$RemotePath</span> <span class="o">-Replace</span> <span class="s1">&#39;(?&lt;Drive&gt;[A-Za-z]+):&#39;</span><span class="p">,</span> <span class="s1">&#39;${Drive}$$&#39;</span> <span class="c"># c:\ = c$\</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Verbose</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">::</span><span class="nv">$log</span><span class="s2"> log export to &#39;\\</span><span class="nv">$Name</span><span class="s2">\</span><span class="nv">$RemoteUNC</span><span class="s2">\</span><span class="nv">$OutputFileName</span><span class="s2">&#39; = &#39;Success&#39;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Progress</span> <span class="n">-id</span> <span class="mf">3</span> <span class="n">-ParentId</span> <span class="mf">1</span> <span class="n">-Activity</span> <span class="s2">&#34;Copying&#34;</span> <span class="n">-Status</span> <span class="s2">&#34;</span><span class="nv">$Log</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="k">Try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">								<span class="nb">move-item</span> <span class="n">-path</span> <span class="s2">&#34;filesystem::\\</span><span class="nv">$Name</span><span class="s2">\</span><span class="nv">$RemoteUNC</span><span class="s2">\</span><span class="nv">$OutputFileName</span><span class="s2">&#34;</span> <span class="n">-Dest</span> <span class="nv">$Path</span> <span class="n">-Force</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="cl">								<span class="nb">Write-Verbose</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">::</span><span class="nv">$log</span><span class="s2"> log move to &#39;</span><span class="nv">$path</span><span class="s2">&#39; = Success&#34;</span>
</span></span><span class="line"><span class="cl">								<span class="nv">$Output</span><span class="p">.</span><span class="py">Result</span> <span class="p">=</span> <span class="s2">&#34;Success&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="p">}</span> <span class="k">Catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">								<span class="nb">Write-Error</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">::</span><span class="nv">$log</span><span class="s2"> log move to &#39;</span><span class="nv">$path</span><span class="s2">&#39; failed - &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">								<span class="nv">$Output</span><span class="p">.</span><span class="py">Result</span> <span class="p">=</span> <span class="s2">&#34;Error - &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nb">Write-Error</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2">::</span><span class="nv">$log</span><span class="s2"> log export to &#39;\\</span><span class="nv">$Name</span><span class="s2">\</span><span class="nv">$RemotePath</span><span class="s2">&#39; = &#39;</span><span class="nv">$CmdResult</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">							<span class="nv">$Result</span> <span class="p">=</span> <span class="s2">&#34;Error - </span><span class="nv">$CMDResult</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span><span class="c">#end if</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span><span class="p">.</span><span class="py">Path</span> <span class="p">=</span> <span class="s2">&#34;</span><span class="nv">$Path</span><span class="s2">\</span><span class="nv">$OutputFileName</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">					<span class="nv">$Output</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="p">}</span><span class="c">#foreach logname</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">Write-Warning</span> <span class="n">-Message</span> <span class="s2">&#34;</span><span class="nv">$Name</span><span class="s2"> :: ping failed&#34;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="c">#foreach Name</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span><span class="c">#process</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c">#EndFunction</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Active Directory ADSystemInfo with PowerShell</title>
      <link>https://write-verbose.com/2019/03/30/adsysteminfo/</link>
      <pubDate>Sat, 30 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/03/30/adsysteminfo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;ADSystemInfo is a built-in COM object in Windows that simplifies lookup of Active Directory user and computer information.&lt;/p&gt;
&lt;/blockquote&gt;</description>
      <content:encoded><![CDATA[<blockquote>
<p>ADSystemInfo is a built-in COM object in Windows that simplifies lookup of Active Directory user and computer information.</p>
</blockquote>
<p>ADSystemInfo can only return information about the local computer and current user. The computer must be joined to a domain and a domain controller must be reachable when the function is called.</p>
<p>Its simple to instantiate COM objects in PowerShell. The function below shows how to use this object.</p>
<h2 id="example-output">EXAMPLE OUTPUT</h2>
<p><img loading="lazy" src="/img/adsysteminfo.png" alt="Get-ADSystemInfo"  />
</p>
<h2 id="powershell-script">POWERSHELL SCRIPT</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="kd">Function</span><span class="w"> </span><span class="nb">Get-ADSystemInfo</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Synopsis</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Used to lookup specific AD user/computer object properties of the current session
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Description</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Uses &#34;ADSystemInfo&#34; COM object to get Active Directory attributes for the current user and computer
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Example</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		PS C:\&gt;Get-ADSystemInfo
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		ComputerDN      : CN=EGBLHCNU335BQCG,OU=GBR,OU=Workstations,OU=EU,OU=Regions,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		SiteName        : EULON
</span></span></span><span class="line"><span class="cl"><span class="cm">		DomainDNSName   : mycompany.com
</span></span></span><span class="line"><span class="cl"><span class="cm">		DomainShortName : MYCOMPANY
</span></span></span><span class="line"><span class="cl"><span class="cm">		ForestDNSName   : mycompany.com
</span></span></span><span class="line"><span class="cl"><span class="cm">		IsNativeMode    : True
</span></span></span><span class="line"><span class="cl"><span class="cm">		PDCRoleOwner    : CN=527616-NAADCP01,CN=Servers,CN=Global,CN=Sites,CN=Configuration,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		SchemaRoleOwner : CN=527616-NAADCP01,CN=Servers,CN=Global,CN=Sites,CN=Configuration,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">		UserDN          : CN=gdixon2,OU=Users,OU=GBR,OU=Accounts,OU=EU,OU=Regions,DC=mycompany,DC=com
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Notes</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		Version:        1.0
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">	.</span><span class="sd">Link</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">		http://msdn.microsoft.com/en-us/library/aa705962(VS.85).aspx
</span></span></span><span class="line"><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nb">CmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl"><span class="k">Param</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">Process</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nv">$Output</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">PSObject</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">				<span class="nb">Select </span><span class="n">ComputerDN</span><span class="p">,</span><span class="n">SiteName</span><span class="p">,</span><span class="n">DomainDNSName</span><span class="p">,</span><span class="n">DomainShortName</span><span class="p">,</span><span class="n">ForestDNSName</span><span class="p">,</span><span class="n">IsNativeMode</span><span class="p">,</span><span class="n">PDCRoleOwner</span><span class="p">,</span><span class="n">SchemaRoleOwner</span><span class="p">,</span><span class="n">UserDN</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$obj</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">-com</span> <span class="n">ADSystemInfo</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$type</span> <span class="p">=</span> <span class="nv">$obj</span><span class="p">.</span><span class="py">gettype</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">ComputerDN</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;ComputerName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">SiteName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;sitename&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">DomainDNSName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;DomainDNSName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">DomainShortName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;DomainShortName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">ForestDNSName</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;ForestDNSName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">IsNativeMode</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;IsNativeMode&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">PDCRoleOwner</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;PDCRoleOwner&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span> <span class="o">-replace</span> <span class="s2">&#34;CN=NTDS Settings,&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">SchemaRoleOwner</span> <span class="p">=</span> <span class="p">(</span><span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;SchemaRoleOwner&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span> <span class="o">-replace</span> <span class="s2">&#34;CN=NTDS Settings,&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span><span class="p">.</span><span class="py">UserDN</span> <span class="p">=</span> <span class="nv">$type</span><span class="p">.</span><span class="py">InvokeMember</span><span class="p">(</span><span class="s2">&#34;UserName&#34;</span><span class="p">,</span><span class="s2">&#34;GetProperty&#34;</span><span class="p">,</span><span class="vm">$null</span><span class="p">,</span><span class="nv">$obj</span><span class="p">,</span><span class="vm">$null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nv">$Output</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Get-WLAN - PowerShell Toolmaking</title>
      <link>https://write-verbose.com/2019/01/06/powershell-toolmaking-regex/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2019/01/06/powershell-toolmaking-regex/</guid>
      <description>&lt;p&gt;This post includes a Get-WLAN function to show information about wireless LAN connections, including the SSID and signal strength. It also demonstrates creating a PowerShell wrapper for a built-in Windows command.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>This post includes a Get-WLAN function to show information about wireless LAN connections, including the SSID and signal strength. It also demonstrates creating a PowerShell wrapper for a built-in Windows command.</p>
<h2 id="why-create-a-powershell-exe-wrapper">Why create a PowerShell exe wrapper</h2>
<blockquote>
<p>PowerShell Tools are re-usable functions that can be used stand-alone or in a pipeline</p>
</blockquote>
<p>Sometimes its more convenient to create a <em>wrapper script</em> using the output of a command line tool than try to create the function entirely in PowerShell. The example below creates a PowerShell command to get information about WI-Fi connections on the local computer.</p>
<h2 id="using-regex-to-parse-text-output">Using Regex to parse text output</h2>
<p><strong>Regular expressions are the ideal way to convert text output from a command line tool into PowerShell objects, making a re-usable pipeline tool</strong>.  Regex is very powerful, but also intimidating. The solution below uses a handy shortcut to identify boundaries in the output - the <em>not</em> operator - ^.<br>
For example, <code>[^:]+</code> means match one or more characters that are not a colon. In the example below, this is used to split the text on each line in the command output.</p>
<p><strong>The netsh output below needs to be split into key value pairs</strong> (e.g. SSID = MyWifi) and converted to a PSObject. For each line of output, the colon character is the obvious boundary between the key name and the value.</p>
<h3 id="native-command-output">Native Command Output</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">C<span class="p">:</span><span class="nl">\</span><span class="c1">&gt; netsh wlan show interfaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">There is 1 interface on the system:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name                   : Wi-Fi
</span></span><span class="line"><span class="cl">Description            : Intel(r) Dual Band Wireless-AC 8260
</span></span><span class="line"><span class="cl">GUID                   : 42bce393-237c-4bd4-9d5e-18020ba8bb87
</span></span><span class="line"><span class="cl">Physical address       : b7:8a:60:a5:f7:d8
</span></span><span class="line"><span class="cl">State                  : connected
</span></span><span class="line"><span class="cl">SSID                   : MyWiFi
</span></span><span class="line"><span class="cl">BSSID                  : 30:d4:2e:50:de:7f
</span></span><span class="line"><span class="cl">Network type           : Infrastructure
</span></span><span class="line"><span class="cl">Radio type             : 802.11n
</span></span><span class="line"><span class="cl">Authentication         : WPA2-Personal
</span></span><span class="line"><span class="cl">Cipher                 : CCMP
</span></span><span class="line"><span class="cl">Connection mode        : Profile
</span></span><span class="line"><span class="cl">Channel                : 6
</span></span><span class="line"><span class="cl">Receive rate (Mbps)    : 115.6
</span></span><span class="line"><span class="cl">Transmit rate (Mbps)   : 115.6
</span></span><span class="line"><span class="cl">Signal                 : 97%
</span></span><span class="line"><span class="cl">Profile                : MyWiFi
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Hosted network status  : Not available
</span></span></code></pre></div><h3 id="the-regex-explained">The regex explained</h3>
<p>The PowerShell snippet below shows the regular expression and how the matches are added to a hash table collection as name = value.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nv">$Properties</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$result</span> <span class="p">=</span> <span class="n">netsh</span> <span class="n">wlan</span> <span class="n">show</span> <span class="n">interfaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Result</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;^\s+(?&lt;name&gt;[^:]+):\s(?&lt;value&gt;.*)$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$name</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">].</span><span class="py">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$val</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">].</span><span class="py">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$Properties</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The Foreach-Object loop above processes the NetSH command output line-by-line.<br>
Each line (the $_ variable) is tested for a match against the RegEx expression using the PowerShell -match operator.</p>
<p>The &ldquo;not&rdquo; operator <code>[^:]+</code> captures all the characters until the colon and saves them in the named capture group &ldquo;name&rdquo; <code>?&lt;name&gt;</code>. The match then expects a colon followed by a space. Finally, everything until the end of the line is saved to the named capture group &ldquo;value&rdquo; <code>?&lt;value&gt;</code>.</p>
<ul>
<li>MATCHES(0) = the entire line</li>
<li>MATCHES(&rsquo;name&rsquo;) = from the start of the line, match any character that is not a colon</li>
<li>MATCHES(&lsquo;value&rsquo;) = match everything from colon [space] to the end of the line</li>
</ul>
<p><img loading="lazy" src="/img/powershell-toolmaking-regex1.png" alt="RegEx"  />
</p>
<p>A complete Get-WLAN PowerShell function is provided below.</p>
<h2 id="powershell-script">PowerShell Script</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="kd">Function</span><span class="w"> </span><span class="nb">Get-WLAN</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">  .</span><span class="sd">SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Gets the properties of WiFI connections
</span></span></span><span class="line"><span class="cl"><span class="cm">  .</span><span class="sd">DESCRIPTION</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    A PowerShell wrapper around NETSH WLAN to convert the output into a PS object
</span></span></span><span class="line"><span class="cl"><span class="cm">  .</span><span class="sd">INPUTS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    None
</span></span></span><span class="line"><span class="cl"><span class="cm">  .</span><span class="sd">OUTPUTS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    PSObject
</span></span></span><span class="line"><span class="cl"><span class="cm">  .</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Get-WLAN
</span></span></span><span class="line"><span class="cl"><span class="cm">  .</span><span class="sd">NOTES</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Author:GD
</span></span></span><span class="line"><span class="cl"><span class="cm">    Website: www.write-verbose.com
</span></span></span><span class="line"><span class="cl"><span class="cm">    Twitter: @writeverbose
</span></span></span><span class="line"><span class="cl"><span class="cm">  #&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">cmdletBinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="k">param</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$Properties</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$result</span> <span class="p">=</span> <span class="n">netsh</span> <span class="n">wlan</span> <span class="n">show</span> <span class="n">interfaces</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nv">$LASTEXITCODE</span> <span class="o">-eq</span> <span class="mf">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$Properties</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="s1">&#39;Computername&#39;</span><span class="p">,</span> <span class="nv">$ENV:COMPUTERNAME</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$Result</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="cm">&lt;# Example NETSH command output:
</span></span></span><span class="line"><span class="cl"><span class="cm">                Name                   : Wi-Fi
</span></span></span><span class="line"><span class="cl"><span class="cm">                Description            : Intel(R) Dual Band Wireless-AC 8260
</span></span></span><span class="line"><span class="cl"><span class="cm">                State                  : connected
</span></span></span><span class="line"><span class="cl"><span class="cm">                SSID                   : MyWiFi
</span></span></span><span class="line"><span class="cl"><span class="cm">                #&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;^\s+(?&lt;name&gt;[^:]+):\s(?&lt;value&gt;.*)$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$name</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">].</span><span class="py">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$val</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">].</span><span class="py">Trim</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Properties</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="c">#foreach</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$Properties</span><span class="p">.</span><span class="py">Count</span> <span class="o">-gt</span> <span class="mf">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">PSCustomObject][Ordered</span><span class="p">]</span><span class="nv">$Properties</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Warning</span> <span class="s2">&#34;Failed to parse NETSH output&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Write-Warning</span> <span class="s2">&#34;Error from NETSH - &#39;</span><span class="p">$(</span><span class="nv">$Error</span><span class="p">[</span><span class="mf">0</span><span class="p">])</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="c">#process</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="regex-links">Regex Links</h2>
<p>For some practice with Regular Expressions, check out <a href="https://alf.nu/RegexGolf/">RegEx Golf</a> or <a href="https://regexcrossword.com/">Regex Crosswords</a>. There is even a <a href="https://www.bennadel.com/blog/3629-the-12th-annual-regular-expression-day---june-1st-2019.htm">Regular Expressions day</a>.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Audit Chrome Extensions with PowerShell</title>
      <link>https://write-verbose.com/2018/12/15/audit-google-chrome-extensions/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2018/12/15/audit-google-chrome-extensions/</guid>
      <description>A PowerShell script to list the installed Google Chrome extensions on a local or remote computer</description>
      <content:encoded><![CDATA[<p>This post includes a PowerShell <em>Get-ChromeExtension</em> script to list installed extensions on the local or remote computer.</p>
<p>Browser extensions are supposed to be curated and vetted, but there have been <a href="https://securityboulevard.com/2020/12/3-million-chrome-users-infected-via-extensions-here-we-go-again/">many examples of malware</a>. If you don&rsquo;t already have control of extensions through an allow or blocklist, the first step is to find out what is in-use.</p>
<p>The code below is a PowerShell function to get the installed Google Chrome browser extensions from a local or remote Windows computer.</p>
<blockquote>
<p>Chrome Browser Extensions install into the user profile and do not appear in the Add/Remove Programs list.</p>
</blockquote>
<p>Chrome Extensions are a challenge to audit due to the way they install and lack of enumeration options.
The PowerShell script below gets the installed extensions using the following method:</p>
<ul>
<li>Get the <strong>extension IDs</strong> from the folders names under <code>%userprofile%\AppData\Local\Google\Chrome\User Data\Default\Extensions</code></li>
<li>Lookup the <strong>extension name</strong> on the Chrome Web Store using the extension ID</li>
<li>Get the <strong>extension version</strong> from the <code>manifest.json</code> file in the extension folder</li>
</ul>
<h2 id="example-script-output">Example script output</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="line"><span class="cl">C<span class="p">:</span><span class="nl">\</span><span class="c1">&gt; Get-ChromeExtension | Select Name,Version,Description | ft -AutoSize</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Name                            Version      Description
</span></span><span class="line"><span class="cl">----                            -------      -----------
</span></span><span class="line"><span class="cl">Docs                            0.10         Create and edit documents
</span></span><span class="line"><span class="cl">Google Drive                    14.1         Google Drive: create, share and keep all your stuff in one place.
</span></span><span class="line"><span class="cl">YouTube                         4.2.8        The official YouTube website
</span></span><span class="line"><span class="cl">Sheets                          1.2          Create and edit spreadsheets
</span></span><span class="line"><span class="cl">Google Docs Offline             1.4          Get things done offline with the Google Docs family of products.
</span></span><span class="line"><span class="cl">Google Wallet                   1.0.0.4
</span></span><span class="line"><span class="cl">Gmail                           8.1          Fast, searchable email with less spam.
</span></span><span class="line"><span class="cl">Chrome Cast                     6618.312.0.2
</span></span><span class="line"><span class="cl">Slides                          0.10         Create and edit presentations
</span></span><span class="line"><span class="cl">Docs                            0.10         Create and edit documents
</span></span><span class="line"><span class="cl">Google Drive                    14.2         Google Drive: create, share and keep all your stuff in one place.
</span></span><span class="line"><span class="cl">YouTube                         4.2.8        The official YouTube website
</span></span><span class="line"><span class="cl">OneTab                          1.18         Save up to 95% memory and reduce tab clutter
</span></span><span class="line"><span class="cl">uBlock Origin                   1.20.0       Finally, an efficient blocker. Easy on CPU and memory.
</span></span><span class="line"><span class="cl">Dark Reader                     4.7.12       Dark mode for every website. Take care of your eyes, use dark theme for night and daily browsing.
</span></span><span class="line"><span class="cl">Share link via email            3.2.1        Adds a button and context menu item to send the page URL or a link URL via email
</span></span><span class="line"><span class="cl">Sheets                          1.2          Create and edit spreadsheets
</span></span><span class="line"><span class="cl">Google Docs Offline             1.7          Get things done offline with the Google Docs family of products.
</span></span><span class="line"><span class="cl">Pinterest Save Button           4.0.82       Save the things you find on the Web.
</span></span><span class="line"><span class="cl">Google Wallet                   1.0.0.4
</span></span><span class="line"><span class="cl">ColorPick Eyedropper            0.0.2.29     An eye-dropper <span class="p">&amp;</span>amp; color-picker tool that allows you to select color values from webpages.
</span></span><span class="line"><span class="cl">Gmail                           8.2          Fast, searchable email with less spam.
</span></span><span class="line"><span class="cl">Chrome Cast                     7519.422.0.3
</span></span></code></pre></div><h2 id="powershell-script">PowerShell Script</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">Get-ChromeExtension</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Gets Chrome Extensions from a local or remote computer
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">DESCRIPTION</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Gets the name, version and description of the installed extensions
</span></span></span><span class="line"><span class="cl"><span class="cm">    Admin rights are required to access other profiles on the local computer or
</span></span></span><span class="line"><span class="cl"><span class="cm">    any profiles on a remote computer.
</span></span></span><span class="line"><span class="cl"><span class="cm">    Internet access is required to lookup the extension ID on the Chrome web store
</span></span></span><span class="line"><span class="cl"><span class="cm"> .PARAMETER Computername
</span></span></span><span class="line"><span class="cl"><span class="cm">    The name of the computer to connect to
</span></span></span><span class="line"><span class="cl"><span class="cm">    The default is the local machine
</span></span></span><span class="line"><span class="cl"><span class="cm"> .PARAMETER Username
</span></span></span><span class="line"><span class="cl"><span class="cm">    The username to query i.e. the userprofile (c:\users\&lt;username&gt;)
</span></span></span><span class="line"><span class="cl"><span class="cm">    If this parameter is omitted, all userprofiles are searched
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    PS C:\&gt; Get-ChromeExtension
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    This command will get the Chrome extensions from all the user profiles on the local computer
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    PS C:\&gt; Get-ChromeExtension -username Jsmith
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    This command will get the Chrome extensions installed under c:\users\jsmith on the local computer
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">EXAMPLE</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    PS C:\&gt; Get-ChromeExtension -Computername PC1234,PC4567
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    This command will get the Chrome extensions from all the user profiles on the two remote computers specified
</span></span></span><span class="line"><span class="cl"><span class="cm"> .</span><span class="sd">NOTES</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">    Version 1.0
</span></span></span><span class="line"><span class="cl"><span class="cm">#&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="nb">cmdletbinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="k">PARAM</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">parameter</span><span class="p">(</span><span class="na">Position</span> <span class="p">=</span> <span class="mf">0</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">string</span><span class="p">]</span><span class="nv">$Computername</span> <span class="p">=</span> <span class="nv">$ENV:COMPUTERNAME</span>
</span></span><span class="line"><span class="cl">        <span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="nb">parameter</span><span class="p">(</span><span class="na">Position</span> <span class="p">=</span> <span class="mf">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">string</span><span class="p">]</span><span class="nv">$Username</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">BEGIN</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c">#REGION --- Child function</span>
</span></span><span class="line"><span class="cl">        <span class="kd">function</span><span class="w"> </span><span class="nb">Get-ExtensionInfo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="cm">&lt;#
</span></span></span><span class="line"><span class="cl"><span class="cm">         .</span><span class="sd">SYNOPSIS</span><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">            Get Name and Version of the a Chrome extension
</span></span></span><span class="line"><span class="cl"><span class="cm">         .PARAMETER Folder
</span></span></span><span class="line"><span class="cl"><span class="cm">            A directory object (under %userprofile%\AppData\Local\Google\Chrome\User Data\Default\Extensions)
</span></span></span><span class="line"><span class="cl"><span class="cm">        #&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="nb">cmdletbinding</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">            <span class="k">PARAM</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="nb">parameter</span><span class="p">(</span><span class="na">Position</span> <span class="p">=</span> <span class="mf">0</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">IO.DirectoryInfo</span><span class="p">]</span><span class="nv">$Folder</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">BEGIN</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="nv">$BuiltInExtensions</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;nmmhkkegccagdldgiimedpiccmgmieda&#39;</span> <span class="p">=</span> <span class="s1">&#39;Google Wallet&#39;</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;mhjfbmdgcfjbbpaeojofohoefgiehjai&#39;</span> <span class="p">=</span> <span class="s1">&#39;Chrome PDF Viewer&#39;</span>
</span></span><span class="line"><span class="cl">                    <span class="s1">&#39;pkedcjkdefgpdelpbcmbmeomcjbeemfm&#39;</span> <span class="p">=</span> <span class="s1">&#39;Chrome Cast&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c"># Extension folders are under %userprofile%\AppData\Local\Google\Chrome\User Data\Default\Extensions</span>
</span></span><span class="line"><span class="cl">                <span class="c"># Folder names match extension ID e.g. blpcfgokakmgnkcojhhkbfbldkacnbeo</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$ExtID</span> <span class="p">=</span> <span class="nv">$Folder</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="nv">$Folder</span><span class="p">.</span><span class="py">FullName</span> <span class="o">-match</span> <span class="s1">&#39;\\Users\\(?&lt;username&gt;[^\\]+)\\&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Username</span> <span class="p">=</span> <span class="nv">$Matches</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Username</span> <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c"># There can be more than one version installed. Get the latest one</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$LastestExtVersionInstallFolder</span> <span class="p">=</span> <span class="nb">Get-ChildItem</span> <span class="n">-Path</span> <span class="nv">$Folder</span><span class="p">.</span><span class="py">Fullname</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">.</span><span class="py">Name</span> <span class="o">-match</span> <span class="s1">&#39;^[0-9\._-]+$&#39;</span> <span class="p">}</span> <span class="p">|</span> <span class="nb">Sort-Object</span> <span class="n">-Property</span> <span class="n">CreationTime</span> <span class="n">-Descending</span> <span class="p">|</span> <span class="nb">Select-Object</span> <span class="n">-First</span> <span class="mf">1</span> <span class="n">-ExpandProperty</span> <span class="n">Name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="c"># Get the version from the JSON manifest</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="nb">Test-Path</span> <span class="n">-Path</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Folder</span><span class="p">.</span><span class="n">Fullname</span><span class="p">)</span><span class="s2">\</span><span class="nv">$LastestExtVersionInstallFolder</span><span class="s2">\Manifest.json&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Manifest</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="n">-Path</span> <span class="s2">&#34;</span><span class="p">$(</span><span class="nv">$Folder</span><span class="p">.</span><span class="n">Fullname</span><span class="p">)</span><span class="s2">\</span><span class="nv">$LastestExtVersionInstallFolder</span><span class="s2">\Manifest.json&#34;</span> <span class="n">-Raw</span> <span class="p">|</span> <span class="nb">ConvertFrom-Json</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="nv">$Manifest</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="o">-not</span><span class="p">([</span><span class="no">string</span><span class="p">]::</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="nv">$Manifest</span><span class="p">.</span><span class="n">version</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="nv">$Version</span> <span class="p">=</span> <span class="nv">$Manifest</span><span class="p">.</span><span class="py">version</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c"># Just use the folder name as the version</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Version</span> <span class="p">=</span> <span class="nv">$LastestExtVersionInstallFolder</span><span class="p">.</span><span class="py">Name</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">if</span><span class="p">(</span><span class="nv">$BuiltInExtensions</span><span class="p">.</span><span class="py">ContainsKey</span><span class="p">(</span><span class="nv">$ExtID</span><span class="p">)){</span>
</span></span><span class="line"><span class="cl">                    <span class="c"># Built-in extensions do not appear in the Chrome Store</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Title</span> <span class="p">=</span> <span class="nv">$BuiltInExtensions</span><span class="p">[</span><span class="nv">$ExtID</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Description</span> <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="c"># Lookup the extension in the Store</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$url</span> <span class="p">=</span> <span class="s2">&#34;https://chrome.google.com/webstore/detail/&#34;</span> <span class="p">+</span> <span class="nv">$ExtID</span> <span class="p">+</span> <span class="s2">&#34;?hl=en-us&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="k">try</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="c"># You may need to include proxy information</span>
</span></span><span class="line"><span class="cl">                        <span class="c"># $WebRequest = Invoke-WebRequest -Uri $url -ErrorAction Stop -Proxy &#39;http://proxy:port&#39; -ProxyUseDefaultCredentials</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="nv">$WebRequest</span> <span class="p">=</span> <span class="nb">Invoke-WebRequest</span> <span class="n">-Uri</span> <span class="nv">$url</span> <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                        <span class="k">if</span> <span class="p">(</span><span class="nv">$WebRequest</span><span class="p">.</span><span class="py">StatusCode</span> <span class="o">-eq</span> <span class="mf">200</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                            <span class="c"># Get the HTML Page Title but remove &#39; - Chrome Web Store&#39;</span>
</span></span><span class="line"><span class="cl">                            <span class="k">if</span> <span class="p">(</span><span class="o">-not</span><span class="p">([</span><span class="no">string</span><span class="p">]::</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="nv">$WebRequest</span><span class="p">.</span><span class="py">ParsedHtml</span><span class="p">.</span><span class="n">title</span><span class="p">)))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                                <span class="nv">$ExtTitle</span> <span class="p">=</span> <span class="nv">$WebRequest</span><span class="p">.</span><span class="py">ParsedHtml</span><span class="p">.</span><span class="py">title</span>
</span></span><span class="line"><span class="cl">                                <span class="k">if</span> <span class="p">(</span><span class="nv">$ExtTitle</span> <span class="o">-match</span> <span class="s1">&#39;\s-\s.*$&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nv">$Title</span> <span class="p">=</span> <span class="nv">$ExtTitle</span> <span class="o">-replace</span> <span class="s1">&#39;\s-\s.*$&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">                                    <span class="nv">$extType</span> <span class="p">=</span> <span class="s1">&#39;ChromeStore&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="nv">$Title</span> <span class="p">=</span> <span class="nv">$ExtTitle</span>
</span></span><span class="line"><span class="cl">                                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                            <span class="c"># Screen scrape the Description meta-data</span>
</span></span><span class="line"><span class="cl">                            <span class="nv">$Description</span> <span class="p">=</span> <span class="nv">$webRequest</span><span class="p">.</span><span class="py">AllElements</span><span class="p">.</span><span class="py">InnerHTML</span> <span class="p">|</span> <span class="nb">Where-Object</span> <span class="p">{</span> <span class="nv">$_</span> <span class="o">-match</span> <span class="s1">&#39;&lt;meta name=&#34;Description&#34; content=&#34;([^&#34;]+)&#34;&gt;&#39;</span> <span class="p">}</span> <span class="p">|</span> <span class="nb">Select-object</span> <span class="n">-First</span> <span class="mf">1</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="p">{</span> <span class="nv">$Matches</span><span class="p">[</span><span class="mf">1</span><span class="p">]</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">                        <span class="p">}</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">Write-Warning</span> <span class="s2">&#34;Error during webstore lookup for &#39;</span><span class="nv">$ExtID</span><span class="s2">&#39; - &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">PSCustomObject][Ordered</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Name</span>        <span class="p">=</span> <span class="nv">$Title</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Version</span>     <span class="p">=</span> <span class="nv">$Version</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Description</span> <span class="p">=</span> <span class="nv">$Description</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Username</span>    <span class="p">=</span> <span class="nv">$Username</span>
</span></span><span class="line"><span class="cl">                    <span class="n">ID</span>          <span class="p">=</span> <span class="nv">$ExtID</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#End function</span>
</span></span><span class="line"><span class="cl">        <span class="c">#ENDREGION -----</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nv">$ExtensionFolderPath</span> <span class="p">=</span> <span class="s1">&#39;AppData\Local\Google\Chrome\User Data\Default\Extensions&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">PROCESS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$Computer</span> <span class="k">in</span> <span class="nv">$Computername</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="nv">$Username</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c"># Single userprofile</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Path</span> <span class="p">=</span> <span class="nb">Join-path</span> <span class="n">-path</span> <span class="s2">&#34;fileSystem::\\</span><span class="nv">$Computer</span><span class="s2">\C$\Users\</span><span class="nv">$Username</span><span class="s2">&#34;</span> <span class="n">-ChildPath</span> <span class="nv">$ExtensionFolderPath</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Extensions</span> <span class="p">=</span> <span class="nb">Get-ChildItem</span> <span class="n">-Path</span> <span class="nv">$Path</span> <span class="n">-Directory</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c"># All user profiles that contain this a Chrome extensions folder</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Path</span> <span class="p">=</span> <span class="nb">Join-path</span> <span class="n">-path</span> <span class="s2">&#34;fileSystem::\\</span><span class="nv">$Computer</span><span class="s2">\C$\Users\*&#34;</span> <span class="n">-ChildPath</span> <span class="nv">$ExtensionFolderPath</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Extensions</span> <span class="p">=</span><span class="vm">@</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Get-Item</span> <span class="n">-Path</span> <span class="nv">$Path</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span> <span class="p">|</span> <span class="nb">ForEach-Object</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Extensions</span> <span class="p">+=</span> <span class="nb">Get-ChildItem</span> <span class="n">-Path</span> <span class="nv">$_</span> <span class="n">-Directory</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">-not</span><span class="p">(</span><span class="vm">$null</span> <span class="o">-eq</span> <span class="nv">$Extensions</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="k">Foreach</span> <span class="p">(</span><span class="nv">$Extension</span> <span class="k">in</span> <span class="nv">$Extensions</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                    <span class="nv">$Output</span> <span class="p">=</span> <span class="nb">Get-ExtensionInfo</span> <span class="n">-Folder</span> <span class="nv">$Extension</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Output</span> <span class="p">|</span> <span class="nb">Add-Member</span> <span class="n">-MemberType</span> <span class="n">NoteProperty</span> <span class="n">-Name</span> <span class="s1">&#39;Computername&#39;</span> <span class="n">-Value</span> <span class="nv">$Computer</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Output</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Warning</span> <span class="s2">&#34;</span><span class="nv">$Computer</span><span class="s2"> : no extensions were found&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="c">#foreach</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
  </channel>
</rss>
