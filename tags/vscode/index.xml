<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>VSCode on Write-Verbose</title>
    <link>https://write-verbose.com/tags/vscode/</link>
    <description>Recent content in VSCode on Write-Verbose</description>
    <image>
      <title>Write-Verbose</title>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 19 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/tags/vscode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Audit Installed VSCode Extensions with PowerShell</title>
      <link>https://write-verbose.com/2023/05/19/AuditVSCodeExt/</link>
      <pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/05/19/AuditVSCodeExt/</guid>
      <description>Get installed Visual Studio Code extensions on a local or remote computer</description>
      <content:encoded><![CDATA[<p>The recent incident of malicious extensions in the Visual Studio Code Marketplace got me thinking about how to audit extensions across a large estate. This post includes a script to get installed extensions on a local or remote computer.</p>
<p>You&rsquo;re probably aware of the <a href="https://www.bleepingcomputer.com/news/security/malicious-microsoft-vscode-extensions-steal-passwords-open-remote-shells/" target="_blank">recent discovery of malicious extensions</a> in the VSCode Marketplace.</p>
<blockquote>
<p>&lsquo;Theme Darcula dark&rsquo; – Described as &ldquo;an attempt to improve Dracula colors consistency on VS Code,&rdquo; this extension was used to steal basic information about the developer&rsquo;s system&hellip;downloaded over 45,000 times</p>
</blockquote>
<blockquote>
<p>&lsquo;python-vscode&rsquo; – This extension was downloaded 1,384 times despite its empty description and uploader name of &rsquo;testUseracc1111,&rsquo;. Analysis of its code showed that it is a C# shell injector that can execute code or commands on the victim&rsquo;s machine.</p>
</blockquote>
<p>VSCode extensions are installed in the user profile and do not appear in Configuration Manager or Intune inventory. Although Defender for Endpoint is able to centrally report on installed Edge browser extensions in the user profile, this does not extend to VSCode.</p>
<h2 id="enterprise-reporting">Enterprise reporting</h2>
<p>The script below is just the first part of a solution to audit installed VSCode extensions. Suggestions to capture information across a large estate include:</p>
<ul>
<li>Use <a href="https://github.com/proxb/PoshRSJob" target="_blank">PoshRSJob</a> or <a href="https://github.com/PaulHigin/PSThreadJob" target="_blank">PSThreadJob</a> to rapidly query online computers over the network</li>
<li>Save the output to the local registry and use <a href="https://askgarth.com/blog/how-to-use-regkeytomof/" target="_blank">RegKeytoMof</a> to bring it into the Configuration Manager inventory</li>
<li>Save the output to a file or registry key and <a href="https://msendpointmgr.com/2021/04/12/enhance-intune-inventory-data-with-proactive-remediations-and-log-analytics/" target="_blank">upload to LogAnalytics</a></li>
</ul>
<h2 id="example-script-output">Example script output</h2>
<p>The VSCode extension script below is similar to the <a href="/2018/12/15/audit-google-chrome-extensions/">Chrome Extension script</a> published some time ago.</p>
<p>This is what the output looks like:</p>
<pre tabindex="0"><code class="language-CMD" data-lang="CMD">C:\&gt; Get-VSCodeExt

ExtensionID         : eliostruyf.vscode-msgraph-autocomplete
Version             : 1.2.0
Publisher           : Elio Struyf
Path                : c:/Users/gd/.vscode/extensions/eliostruyf.vscode-msgraph-autocomplete-1.2.0
MarketPlaceURL      : https://marketplace.visualstudio.com/items?itemName=eliostruyf.vscode-msgraph-autocomplete
MarketPlaceInstalls : 4359
Source              : https://github.com/estruyf/vscode-msgraph-autocomplete

ExtensionID         : redhat.vscode-yaml
Version             : 1.12.2
Publisher           : Red Hat
Path                : c:/Users/gd/.vscode/extensions/redhat.vscode-yaml-1.12.2
MarketPlaceURL      : https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml
MarketPlaceInstalls : 12120909
Source              : https://github.com/redhat-developer/vscode-yaml.git
</code></pre><h2 id="powershell-script">PowerShell Script</h2>
<p>Get-VSCodeExts.ps1:</p>
<script type="application/javascript" src="https://gist.github.com/gbdixg/a73a68905b0a630e16c465999e298611.js"></script>

<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Create custom code snippets in VSCode</title>
      <link>https://write-verbose.com/2021/05/07/vscodesnippets/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2021/05/07/vscodesnippets/</guid>
      <description>Create and manage code Snippets in Visual Studio Code</description>
      <content:encoded><![CDATA[<h2 id="background">BACKGROUND</h2>
<p>VSCode snippets are a productivity feature allowing blocks of code to be inserted with a couple of keystrokes or tab completion. Its simple to add your own Snippets and dramatically boost your productivity. Read on for the details.</p>
<blockquote>
<p>All paths and keyboard shortcuts in this article assume VSCode is running on Windows</p>
</blockquote>
<p>Predefined Snippets are included with most of the VSCode language extensions (use @category:&ldquo;snippets&rdquo; in the extensions pane to see which ones). However, they may not match your coding style, or have trigger text that suits you. User-defined snippets allow complete customisation. They also support variables that are replaced with required values on insert, making them perfect for boilerplate code.</p>
<h2 id="editing-user-defined-snippets">EDITING USER-DEFINED SNIPPETS</h2>
<p>Open a language-specific Snippet file as follows (example using PowerShell):</p>
<p><code>File &gt; Preferences &gt; User Snippets &gt; PowerShell</code></p>
<p>A .json file is displayed, empty at first.</p>
<p>A Snippet is made up of the following elements</p>
<table>
<thead>
<tr>
<th>Element</th>
<th>Example</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>&ldquo;Function template&rdquo;</td>
<td>The name is shown by Intellisense if there is no description</td>
</tr>
<tr>
<td>prefix</td>
<td>[&ldquo;ft&rdquo;,&ldquo;function&rdquo;]</td>
<td>One or more trigger words that activate intellisense (uses substring matching)</td>
</tr>
<tr>
<td>body</td>
<td>[&ldquo;function Verb-Noun {\r&rdquo;,&quot;[cmdletbinding()]\r&quot;]</td>
<td>The template code to be inserted</td>
</tr>
<tr>
<td>description</td>
<td>Advanced function boilerplate</td>
<td>Optional description displayed by intellisense</td>
</tr>
<tr>
<td>placeholder</td>
<td>${1:Verb-Noun}</td>
<td>An element within the body that is replaced by the user after insertion. The number represents the tab stop position. The text is the default value that is replaced</td>
</tr>
<tr>
<td>choices</td>
<td>${1|one,two,three|}</td>
<td>This placeholder will prompt to choose one of the options between the pipe characters</td>
</tr>
<tr>
<td>$0</td>
<td>[&ldquo;while($i -lt 10){\r&rdquo;,&quot;\t$0\r&quot;,&quot;}&quot;]</td>
<td>A special placeholder that always comes last and ends insertion mode</td>
</tr>
</tbody>
</table>
<h3 id="snippet-example">Snippet example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;Advanced function&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&#34;fa&#34;</span><span class="p">,</span><span class="s2">&#34;function&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;Function ${1:Verb-Noun}{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;[cmdletBinding()]\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;param(\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;    \r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;)\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;BEGIN{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;PROCESS{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;$0\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;END{\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;\r&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s2">&#34;}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="p">],</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;Advanced function boilerplate&#34;</span>
</span></span></code></pre></div><p>Note the use of a JSON array for the body and control characters for new lines. This is quite laborious to create by hand, but VSCode extensions can make this much easier&hellip;</p>
<h3 id="marketplace-snippet-extension">Marketplace Snippet Extension</h3>
<p>There are a number of extensions in the VSCode marketplace that will create a Snippet from highlighted code in the editor.</p>
<p>For example, <a href="https://marketplace.visualstudio.com/items?itemName=ryanolsonx.snippet-creator" target="_blank">Snippet Creator</a> will automatically detetect the in-use language and then prompt for the Snippet prefix and description.  You can then edit the Snippet to fine-tune it.</p>
<h3 id="snippet-scope">Snippet Scope</h3>
<p><strong>Language-specific</strong></p>
<p>Most Snippets will be created in a language-specific Snippet file and will only prompt for insertion when using that language e.g.<br>
        <code>%APPDATA%\Code\User\snippetsPowershell.json</code></p>
<p><strong>Global</strong></p>
<p>There is also a global Snippets file that applies to all languages. This file does not exist by default but can be created from <code>File &gt; Preferences &gt; User Snippets &gt; New Global Snippets file</code>. The file can have any name, but always ends in <code>.code-snippets</code>. For example:<br>
        <code>%APPDATA%\Code\User\snippets\GlobalSnippets.code-snippets</code></p>
<p>The global Snippets can use an additional property called <em>Scope</em> to limit them to a list of languages. If it isn&rsquo;t specified, they are available to all.</p>
<p><strong>Project-specific</strong></p>
<p>If a global Snippets file is placed in the <code>.vscode</code> folder at the root of a project, it is scoped only to that project.  It can still use the scope property to further limit Snippets to specific languages.</p>
<h2 id="keyboard-shortcut">Keyboard Shortcut</h2>
<p>Use <code>File &gt; Preferences &gt; Keyboard Shortcuts &gt; Open Keyboard Shortcuts (JSON)</code> to assign a shortcut to a Snippet. Custom shortcuts are saved in the file <code>%AppData%\Code\User\keybindings.json</code></p>
<p>If the Snippet is not in the Global Snippets file, the langId is used to specify a language specific Snippet:</p>
<h3 id="keybinding-example">Keybinding example</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;key&#34;</span><span class="p">:</span> <span class="s2">&#34;cmd+k 1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;editor.action.insertSnippet&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;when&#34;</span><span class="p">:</span> <span class="s2">&#34;editorTextFocus&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;langId&#34;</span><span class="p">:</span> <span class="s2">&#34;csharp&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;NewClass&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="hiding-snippets">Hiding Snippets</h2>
<p>Hiding Snippets is useful when there is a lot of noise in the Intellisense prompts. This can occur when you create a user snippet with the same trigger as a language extension snippet.</p>
<blockquote>
<ul>
<li>Open the insert Snippet dialog using CTRL + ALT + J</li>
<li>Start typing the tigger characters to show the Snippet options in the list</li>
<li>Hover over each item and click the Hide from Intellisense option on the right hand side</li>
</ul>
</blockquote>
<h2 id="extension-snippets">Extension Snippets</h2>
<p>I don&rsquo;t recommend trying to edit or remove extension Snippets. Changes are likely to get overwritten when the extension updates.</p>
<p>For information, extension Snippets are stored under <code>%USERPROFILE%\.vscode\extensions</code>. For example the Microsoft PowerShell extension Snippets are at:</p>
<p><code>%USERPROFILE%\.vscode\extensions\ms-vscode.powershell-2021.2.2\snippets\PowerShell.json</code></p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com" target="_blank">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
  </channel>
</rss>
