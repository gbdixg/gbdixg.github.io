<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>WPF on Write-Verbose</title>
    <link>https://write-verbose.com/tags/wpf/</link>
    <description>Recent content in WPF on Write-Verbose</description>
    <image>
      <title>Write-Verbose</title>
      <url>https://write-verbose.com/papermod-cover.png</url>
      <link>https://write-verbose.com/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 22 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://write-verbose.com/tags/wpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a GUI App with PowerShell and WPF - Part 2 Controls, Events and XAML</title>
      <link>https://write-verbose.com/2023/03/21/PowerShellWPFPt2/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/21/PowerShellWPFPt2/</guid>
      <description>Tips for working with the WPF user interface in PowerShell</description>
      <content:encoded><![CDATA[<p><strong>More things I learned creating a GUI tool with PowerShell and WPF.</strong><br>
The snippets in this article are based on the <a href="https://github.com/gbdixg/Show-Win32AppUI">Show-Win32AppUI tool</a> available on GitHub.</p>
<h1 id="part2---creating-a-multi-page-wpf-app-in-powershell">Part2 - Creating a multi-page WPF app in PowerShell</h1>
<p>(See <a href="/2023/03/21/PowerShellWPFPt1/">part1 of this series</a> for information on using PowerShell Runspaces with WPF).</p>
<p>WPF uses .XAML text files to define the layout and properties of supported <em>controls</em> such as Textboxes, Buttons, Status bars etc. XAML is a form is XML, with opening and closing tags that create a hierarchy of controls. A <em>child</em> control such as a Combobox is displayed within a parent container such as a <em>Window</em>.</p>
<p>Very simple apps may be able to fit controls in a single Window, but a <em>wizard</em>-driven interface will usually need multiple <strong>Pages</strong> to guide the user through selections. There are many ways to create a <strong>multi-page WPF app</strong>. The method below is the one I prefer:</p>
<h2 id="main-window-and-child-pages">Main window and child pages</h2>
<p>The starting point is a WPF <strong>Window</strong> control defined in it&rsquo;s own .XAML file. A Window is a container for other WPF controls, most importantly in this case, a  <strong>Frame</strong> that can load <strong>Pages</strong>. The main Window can show a header, footer and sidebar that is always visible while the Page within the Frame control changes as the user navigates the app.</p>
<p><img loading="lazy" src="/img/WindowFrame.png" alt="MainWindow"  />
</p>
<p>Each page can be defined in a separate .XAML file. A Page is also a container so each page can host controls such as Textboxes, Textblocks, Comboboxes etc. The Frame content is updated at runtime to show a new Page when an event occurs such as clicking navigation buttons.</p>
<p>A Frame does have a built-in navigation control, but it isn&rsquo;t pretty.  I turn it off and use <strong>Button</strong> controls in the main Window.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Partial XAML for a Main Window with a Frame and navigation Buttons--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Window</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;850&#34;</span> <span class="na">Width=</span><span class="s">&#34;450&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Pages will be loaded into this frame at runtime--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Frame</span> <span class="na">x:Name=</span><span class="s">&#34;frame_Pages&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;2&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.ColumnSpan=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">NavigationUIVisibility=</span><span class="s">&#34;Hidden&#34;</span> <span class="err">#</span> <span class="err">Built-in</span> <span class="err">navigation</span> <span class="err">disabled</span>
</span></span><span class="line"><span class="cl">        <span class="na">Margin=</span><span class="s">&#34;0,10,0,0&#34;</span> <span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Navigation Buttons below the pages--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Button</span> <span class="na">x:Name =</span> <span class="s">&#34;Btn_Previous&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Content=</span><span class="s">&#34;Previous&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Height=</span><span class="s">&#34;35&#34;</span> <span class="na">Width=</span><span class="s">&#34;60&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;2&#34;</span> 
</span></span><span class="line"><span class="cl">        <span class="na">BorderThickness=</span><span class="s">&#34;0&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Button</span> <span class="na">x:Name =</span> <span class="s">&#34;Btn_Next&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Content=</span><span class="s">&#34;Next&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Margin=</span><span class="s">&#34;3,0,0,0&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Height=</span><span class="s">&#34;35&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Width=</span><span class="s">&#34;60&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">BorderThickness=</span><span class="s">&#34;0&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/gbdixg/Show-Win32AppUI/tree/main/Show-Win32AppUI/Xaml">Show-Win32UI tool</a> for an example of separate XAML files per Page and main Window.</p>
<h1 id="load-xaml-controls-into-powershell-variables">Load XAML controls into PowerShell variables</h1>
<p>A thread safe Hashtable collection allows WPF controls to be referenced in PowerShell at runtime. Grouping the controls in a collection is convenient as it simplifies passing them into Runspaces.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example of reading controls from XAML files and assigning them to variables</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">function</span><span class="w"> </span><span class="nb">LoadXml</span> <span class="p">(</span><span class="nv">$filename</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c"># Convert a .XAML file to an XMLDocument</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$XmlLoader</span> <span class="p">=</span> <span class="p">(</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="n">XmlDocument</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$XmlLoader</span><span class="p">.</span><span class="py">Load</span><span class="p">(</span><span class="nv">$filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nv">$XmlLoader</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Load the XAML files</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlMainWindow</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PSScriptRoot</span><span class="s2">\Xaml\MainWindow.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage1</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PScriptRoot</span><span class="s2">\Xaml\Page1.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage2</span> <span class="p">=</span> <span class="n">LoadXml</span><span class="p">(</span><span class="s2">&#34;</span><span class="nv">$PScriptRoot</span><span class="s2">\Xaml\Page2.xaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Collection storing references to all named WPF controls in the UI</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">=[</span><span class="no">hashtable</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">(</span><span class="vm">@</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Convert Windows and Pages to a XAML object graph</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlMainWindow</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlPage1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span> <span class="p">=</span> <span class="p">[</span><span class="no">Windows.Markup.XamlReader</span><span class="p">]::</span><span class="n">Load</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">System</span><span class="p">.</span><span class="py">Xml</span><span class="p">.</span><span class="py">XmlNodeReader</span> <span class="n">-ArgumentList</span> <span class="nv">$xmlPage2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Add each named control to the $UIControls hashtable (repeat for each Window / Page)</span>
</span></span><span class="line"><span class="cl"><span class="c"># This allows key controls to be referenced directly at runtime, rather than through a parent-child hierarchy of Page&gt;Control</span>
</span></span><span class="line"><span class="cl"><span class="nv">$XmlMainWindow</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage1</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$xmlPage2</span><span class="p">.</span><span class="py">SelectNodes</span><span class="p">(</span><span class="s2">&#34;//*[@*[contains(translate(name(.),&#39;n&#39;,&#39;N&#39;),&#39;Name&#39;)]]&#34;</span><span class="p">)</span> <span class="p">|</span> <span class="nb">ForEach-Object</span> <span class="n">-Process</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="vm">$</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span><span class="p">.</span><span class="py">FindName</span><span class="p">(</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Example of loading first Page into the Frame</span>
</span></span><span class="line"><span class="cl"><span class="c"># &#34;frame_Pages&#34; in the name of the Frame defined in the XAML file</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">frame_Pages</span><span class="p">.</span><span class="py">Content</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Show the user interface</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">MainWindow</span><span class="p">.</span><span class="py">ShowDialog</span><span class="p">()</span>  
</span></span></code></pre></div><h2 id="using-wpf-styles-to-simplify-xaml">Using WPF Styles to simplify XAML</h2>
<p>XAML styles are analogous to CSS in HTML. The XAML style can apply to all controls of a type, such as all TextBoxes, defining properties such as the colour, font, border etc. If a property needs to be changed, it only needs to be updated in one place. Its also a flexible solution because Style properties can still be over-ridden on an individual control.</p>
<p>Styles can be defined in a separate XAML file and then <em>imported</em> on each Window / Page as a <strong>ResourceDictionary</strong>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Styles.xaml defines a TextBox style called ModernTextBox--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ResourceDictionary</span> <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">                    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Style</span> <span class="na">TargetType=</span><span class="s">&#34;{x:Type TextBox}&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="na">x:Key=</span><span class="s">&#34;ModernTextBox&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;BorderThickness&#34;</span> <span class="na">Value=</span><span class="s">&#34;0,0,0,1&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;BorderBrush&#34;</span> <span class="na">Value=</span><span class="s">&#34;LightGray&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;Background&#34;</span> <span class="na">Value=</span><span class="s">&#34;Transparent&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Setter</span> <span class="na">Property=</span><span class="s">&#34;FontSize&#34;</span> <span class="na">Value=</span><span class="s">&#34;18&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Style&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/ResourceDictionary&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MainWindow.xaml imports Styles.xml as a ResourceDictionary--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Window</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;850&#34;</span> <span class="na">Width=</span><span class="s">&#34;450&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Title=</span><span class="s">&#34;Main Window&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Import a style so it can used by controls in this Window--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Window.Resources&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;ResourceDictionary</span> <span class="na">Source=</span><span class="s">&#34;Styles.xaml&#34;</span><span class="nt">/&gt;</span>     
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Window.Resources&gt;</span>
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Page1.xaml imports Styles.xml as a ResourceDictionary--&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Page</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">xmlns:x=</span><span class="s">&#34;http://schemas.microsoft.com/winfx/2006/xaml&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Background=</span><span class="s">&#34;Transparent&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="c">&lt;!--Import a style so it can used by controls in this Page--&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Page.Resources&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ResourceDictionary</span> <span class="na">Source=</span><span class="s">&#34;Styles.xaml&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Page.Resources&gt;</span>
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--MainWindow.xaml or Page1.xaml uses the style on a Textbox as shown below--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;TextBox</span> <span class="na">x:Name=</span><span class="s">&#34;txt_InstallArgs&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;330&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;30&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBox}&#34;</span><span class="nt">/&gt;</span>
</span></span></code></pre></div><h2 id="define-the-wpf-layout-with-the-grid-control">Define the WPF layout with the Grid control</h2>
<p>The <strong>Grid</strong> control overlays invisible rows and columns on a parent container such as a Window or Page. The Controls are then positioned based on the Row and Column number. It is fairly simple to design the Grid layout using a basic text editor.  For a more WYSIWYG experience, use Microsoft Visual Studio to view the UI at design time.</p>
<p>There are three options for Grid Row/Column height / width:</p>
<table>
<thead>
<tr>
<th>Size</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>[Pixels]</td>
<td>A fixed size</td>
</tr>
<tr>
<td>&ldquo;Auto&rdquo;</td>
<td>Expand to fit content</td>
</tr>
<tr>
<td>&ldquo;*&rdquo;</td>
<td>Fit to remaining space in Window / Page</td>
</tr>
</tbody>
</table>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!-- Example positioning a Textbox above a TextBlock using a Grid
</span></span></span><span class="line"><span class="cl"><span class="c">     TextBox is in Grid.Row = &#34;1&#34; and TextBlock is in Grid.Row = &#34;2&#34;--&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Grid&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Grid.ColumnDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;Auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Grid.ColumnDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;auto&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;*&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Grid.RowDefinitions&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;TextBox</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Width=</span><span class="s">&#34;350&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBox}&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;TextBlock</span> 
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Column=</span><span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Grid.Row=</span><span class="s">&#34;2&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Text=</span><span class="s">&#34;Enter your name&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="na">Style=</span><span class="s">&#34;{StaticResource ModernTextBlock}&#34;</span><span class="nt">/&gt;</span>   
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/Grid&gt;</span>
</span></span></code></pre></div><h2 id="use-margins-to-create-space-between-controls">Use margins to create space between controls</h2>
<p>The Margin property is available on most controls. The margin creates a buffer of blank space around a control.  The margin can either be the same all round, or different for each vector - left, top, right, and bottom</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-XML" data-lang="XML"><span class="line"><span class="cl"><span class="c">&lt;!--Example setting a Margin around a control--&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Different margin for left, top, right, and bottom --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ComboBox</span> <span class="na">x:Name=</span><span class="s">&#34;combo_Supercedence&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Column=</span><span class="s">&#34;0&#34;</span>  
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Row=</span><span class="s">&#34;11&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;360&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;24&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Margin=</span><span class="s">&#34;15,5,0,0&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c">&lt;!--Same margin all round --&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;ComboBox</span> <span class="na">x:Name=</span><span class="s">&#34;combo_Supercedence&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Column=</span><span class="s">&#34;0&#34;</span>  
</span></span><span class="line"><span class="cl">    <span class="na">Grid.Row=</span><span class="s">&#34;11&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Width=</span><span class="s">&#34;360&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Height=</span><span class="s">&#34;24&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="na">Margin=</span><span class="s">&#34;5&#34;</span><span class="nt">/&gt;</span>   
</span></span></code></pre></div><h2 id="defining-event-handlers">Defining Event Handlers</h2>
<p>WPF controls support events that occur based on user input. Some events are common to most controls, such as <strong>MouseEnter</strong> and <strong>MouseLeave</strong> while other events are specific to a control type, such as <strong>SelectionChanged</strong> in a ComboBox.</p>
<p>PowerShell uses an &ldquo;Add_[Event Name]&rdquo; syntax to define the code to run when the event fires as below. The per-control event list is available in the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.windows.controls.combobox?view=windowsdesktop-7.0#events">MS Documentation</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c"># Example event handler - code will run when the Combo box selection changes</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">combo_language</span><span class="p">.</span><span class="py">Add_SelectionChanged</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nv">$Language</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">combo_language</span><span class="p">.</span><span class="py">SelectedItem</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Example event handler - code will run when the button is left clicked</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">btn_Next</span><span class="p">.</span><span class="py">Add_Click</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="py">frame_Pages</span><span class="p">.</span><span class="py">Content</span> <span class="p">=</span> <span class="nv">$UIControls</span><span class="p">.</span><span class="py">Page2</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></div><p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Creating a GUI App with PowerShell and WPF - Part 1 Runspaces</title>
      <link>https://write-verbose.com/2023/03/21/PowerShellWPFPt1/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/21/PowerShellWPFPt1/</guid>
      <description>Create a responsive WPF app using PowerShell Runspaces to simulate multiple threads</description>
      <content:encoded><![CDATA[<p><strong>Things I learned creating a GUI tool with PowerShell and WPF.</strong><br>
The snippets in this article are based on the <a href="https://github.com/gbdixg/Show-Win32AppUI">Show-Win32AppUI tool</a> available on GitHub.</p>
<h1 id="disclaimer">Disclaimer</h1>
<p>I realise PowerShell isn&rsquo;t suited to creating GUI apps. The main reason to use PowerShell is <em>supportability</em>. Specifically, when working with Colleagues who aren&rsquo;t comfortable maintaining a compiled language like C#. Its far easier to make small changes to variables or paths in a script.</p>
<h1 id="why-wpf">Why WPF?</h1>
<p>WPF is a more modern and flexible choice for a UI than the something like WinForms.  There are many newer frameworks available, but most require a runtime on the target platform.  WPF is easy to deploy as it&rsquo;s built-into the .NET Framework and available by default on Windows 10/11.</p>
<h1 id="part1---design-the-app-around-powershell-runspaces">Part1 - Design the app around PowerShell Runspaces</h1>
<p>If you try to create a GUI app with a single thread, it will be unresponsive and hang whenever an action takes more than a few seconds. PowerShell runs under a single thread (STA mode) making it unsuitable for a responsive GUI app.  However, creating separate <em>Runspaces</em> is a workaround for this problem. Runspaces are analogous to spinning up new PowerShell sessions in the background to execute discrete script blocks.</p>
<p>While Runspaces are effective, they also add a lot of complexity. For example:</p>
<ul>
<li>Functions and variables are not shared between Runspaces by default and have to be imported when the Runspace is started.</li>
<li>You should use a thread-safe collection when updating shared variables inside a Runspace.</li>
<li>The WPF UI can&rsquo;t be updated directly from a separate Runspace</li>
<li>Writing to a single file from multiple Runspaces requires a locking mechanism, such as a Mutex</li>
<li>The lifecycle of Runspaces must be managed, capturing output at completion</li>
<li>Warning, Verbose and Error streams in the Runspace are not captured by default</li>
<li>Warning, Verbose and Error streams do not appear in the console by default.</li>
</ul>
<p>These concepts are covered in more detail below.</p>
<h2 id="sharing-variables-functions-and-modules-with-a-runspace">Sharing variables, functions and modules with a Runspace</h2>
<p><strong>Required modules</strong> must be specifically loaded into the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.initialsessionstate?view=powershellsdk-7.3.0">InitialSessionState</a> of the Runspace. The Runspace won&rsquo;t automatically have access to modules already loaded in the <em>parent</em> PowerShell session.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example of importing modules into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$modulesToLoad</span><span class="p">=</span><span class="vm">@</span><span class="p">(</span><span class="s1">&#39;Microsoft.Graph.Intune&#39;</span><span class="p">,</span><span class="s1">&#39;MSAL.PS&#39;</span><span class="p">)</span> <span class="c"># Must be installed on the computer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$initialSessionState</span> <span class="p">=</span> <span class="p">[</span><span class="no">initialsessionstate</span><span class="p">]::</span><span class="n">CreateDefault</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$module</span> <span class="k">in</span> <span class="nv">$modulesToLoad</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$initialSessionState</span><span class="p">.</span><span class="py">ImportPSModule</span><span class="p">(</span><span class="nv">$module</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span></code></pre></div><p>You can also import <strong>standalone Functions</strong> into a Runspace using the <em>InitialSessionState</em>. The following imports functions already loaded in the <em>parent</em> session, but you could also load directly from a file on disk.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example importing parent session functions into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$FunctionsToImport</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s1">&#39;Write-TxtLog&#39;</span><span class="p">,</span><span class="s1">&#39;Get-APIResults&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">foreach</span><span class="p">(</span><span class="nv">$function</span> <span class="k">in</span> <span class="nv">$functionsToImport</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$definition</span> <span class="p">=</span> <span class="nb">Get-Content</span> <span class="s2">&#34;Function:\</span><span class="nv">$Function</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$entry</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Management</span><span class="p">.</span><span class="py">Automation</span><span class="p">.</span><span class="py">Runspaces</span><span class="p">.</span><span class="py">SessionStateFunctionEntry</span> <span class="n">-ArgumentList</span> <span class="nv">$function</span><span class="p">,</span> <span class="nv">$definition</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$initialSessionState</span><span class="p">.</span><span class="py">Commands</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="nv">$entry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span></code></pre></div><p><strong>Variables</strong> can be shared with a Runspace using the <strong>SetVariable</strong> method of the <a href="https://learn.microsoft.com/en-us/dotnet/api/system.management.automation.runspaces.sessionstateproxy?view=powershellsdk-7.3.0">SessionStateProxy</a> class.  SetVariable parameters are the <em>variable name</em> (without the &lsquo;$&rsquo;) and the value to set.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example importing parent session variables into a new Runspace ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$VariablesToImport</span> <span class="p">=</span> <span class="vm">@</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span><span class="s1">&#39;password&#39;</span><span class="p">,</span><span class="s1">&#39;displayName&#39;</span><span class="p">)</span> <span class="c"># existing variables in the parent session</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">Foreach</span><span class="p">(</span><span class="nv">$var</span> <span class="k">in</span> <span class="nv">$VariablesToImport</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$VarValue</span> <span class="p">=</span> <span class="nb">Get-Variable</span> <span class="n">-Name</span> <span class="nv">$Var</span> <span class="p">|</span> <span class="nb">Select </span><span class="n">-ExpandProperty</span> <span class="n">Value</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="nv">$Var</span><span class="p">,</span><span class="nv">$VarValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="runspace-output-using-a-thread-safe-collection">Runspace output using a thread-safe collection</h2>
<p>Output from a Runspace can be captured during execution using a thread-safe collection imported from the parent session. When a Runspace updates the collection the updated values are available in the parent session and any concurrent Runspaces that also import the collection.  Thread safe collections usually need to be <em>locked</em> during update to prevent conflicts.</p>
<p>With a <strong>synchronised Arraylist</strong>, values added in the Runspace will immediately available to all other Runspaces and the parent session, as in following example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example using locks on a thread safe collection ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$BackgroundJobs</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.collections.arraylist</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Collections</span><span class="p">.</span><span class="n">ArrayList</span><span class="p">))</span> <span class="c"># Thread safe collection</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;BackgroundJobs&#39;</span><span class="p">,</span><span class="nv">$BackgroundJobs</span><span class="p">)</span> <span class="c"># Pass the variable into the RunSpace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># This is the Runspace script block</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># lock</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="py">Add</span><span class="p">(</span><span class="s2">&#34;New item&#34;</span><span class="p">)</span> <span class="c"># modify ArrayList</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># unlock</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">},</span><span class="vm">$True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span><span class="p">.</span><span class="py">Runspace</span> <span class="p">=</span> <span class="nv">$Runspace</span>
</span></span><span class="line"><span class="cl"><span class="vm">$null</span> <span class="p">=</span> <span class="nv">$PSCode</span><span class="p">.</span><span class="py">BeginInvoke</span><span class="p">()</span>
</span></span></code></pre></div><p>There are also <em>Queues and Stacks</em> in .NET that automatically implement locking and don&rsquo;t need the System.Threading.Monitor code in the above example e.g. a <em>ConcurrentQueue</em>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### ConcurrentQueue example - doesn&#39;t need System.Threading.Monitor ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span> <span class="p">=</span> <span class="p">[</span><span class="no">System.Collections.Concurrent.ConcurrentQueue[psobject]</span><span class="p">]::</span><span class="n">new</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryAdd</span><span class="p">([</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span> <span class="n">givenName</span> <span class="p">=</span> <span class="s1">&#39;Bill&#39;</span><span class="p">;</span><span class="n">sn</span><span class="p">=</span><span class="s1">&#39;Gates&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryAdd</span><span class="p">([</span><span class="no">pscustomobject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span> <span class="n">givenName</span> <span class="p">=</span> <span class="s1">&#39;Steve&#39;</span><span class="p">;</span><span class="n">sn</span><span class="p">=</span><span class="s1">&#39;Jobs&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;colQueue&#39;</span><span class="p">,</span><span class="nv">$colQueue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PSCode</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># This is the Runspace script block</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c"># No locking required when ConcurrentQueue is modified in the Runspace</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$Entry</span> <span class="p">=</span> <span class="vm">$null</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nv">$colQueue</span><span class="p">.</span><span class="py">TryDequeue</span><span class="p">([</span><span class="no">ref</span><span class="p">]</span><span class="nv">$Entry</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Write-Output</span> <span class="nv">$Entry</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"> <span class="p">},</span><span class="vm">$True</span><span class="p">)</span>   
</span></span></code></pre></div><p>More information on thread safe collections is available <a href="https://learn.microsoft.com/en-us/dotnet/standard/collections/thread-safe/">here</a></p>
<h2 id="how-to-update-the-wpf-user-interface-from-another-runspace">How to update the WPF user interface from another Runspace</h2>
<p>If you try to modify the WPF user interface from a separate Runspace, PowerShell will throw an error indicating only the owning thread (Runspace) can update it.</p>
<p><img loading="lazy" src="/img/UIThreadError2.png" alt="UIError"  />
</p>
<p>The solution is to wrap the update in a <strong>Dispatcher.Invoke</strong> method as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example updating a WPF control from another thread (Runspace) ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># In the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="c"># txt_SetupFile is a WPF text box created in the parent session of the Runspace</span>
</span></span><span class="line"><span class="cl"><span class="nv">$UIControls</span><span class="p">.</span><span class="py">txt_SetupFile</span><span class="p">.</span><span class="py">Dispatcher</span><span class="p">.</span><span class="py">Invoke</span><span class="p">([</span><span class="no">action</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$UIControls</span><span class="p">.</span><span class="py">txt_SetupFile</span><span class="p">.</span><span class="py">Text</span> <span class="p">=</span> <span class="s2">&#34;Successfully updated from another Runspace&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span><span class="s2">&#34;Normal&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="writing-to-the-same-log-file-from-separate-runspaces">Writing to the same log file from separate Runspaces</h2>
<p>Runspaces also make it more complex to write to a single log file. There is potential for a deadlock or <a href="https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-best-practices#race-conditions">race condition</a> to occur. A <strong>Mutex</strong> is one way to implement the required locking:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example using a Mutex lock before writing to a log file ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># In the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="c"># LogMutex is an arbitrary name but must be the same when used in any Runspace and the parent session</span>
</span></span><span class="line"><span class="cl"><span class="nv">$mtx</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Threading</span><span class="p">.</span><span class="py">Mutex</span><span class="p">(</span><span class="vm">$false</span><span class="p">,</span> <span class="s2">&#34;LogMutex&#34;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">If</span> <span class="p">(</span><span class="nv">$mtx</span><span class="p">.</span><span class="py">WaitOne</span><span class="p">()){</span> <span class="c"># Wait until this Runspace can get a lock on the LogMutex object</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c"># Lock obtained. Other Runspaces are now waiting</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Add-Content</span> <span class="n">-Path</span> <span class="nv">$logFile</span> <span class="n">-Value</span> <span class="nv">$Message</span>  <span class="n">-ErrorAction</span> <span class="n">Stop</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">[</span><span class="no">void</span><span class="p">]</span><span class="nv">$mtx</span><span class="p">.</span><span class="py">ReleaseMutex</span><span class="p">()</span> <span class="c"># release the lock</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$mtx</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h2 id="managing-runspace-lifecycle">Managing Runspace lifecycle</h2>
<p>A Runspace executes its script block asynchronously and output (if any) is available at the end. The parent session must manage Runspaces, checking for completion, processing output and ultimately disposing of them.  If you don&rsquo;t dispose of Runspaces they will persist until the parent PowerShell session is closed and could eat-up memory.</p>
<p>A <strong>Timer</strong> is a common way to manage Runspaces in an event-driven WPF script. When the Timer event fires, its script blocks checks for Runspace completion as in the example below. A thread safe collection is used to keep track of Runspaces until they are disposed of.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example Timer code to clean-up completed Runspaces ###</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Create a collection to track Runspaces</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$PS</span> <span class="p">=</span> <span class="p">[</span><span class="no">powershell</span><span class="p">]::</span><span class="n">Create</span><span class="p">().</span><span class="py">AddScript</span><span class="p">(</span><span class="nv">$codeToRunInRunspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$handle</span> <span class="p">=</span> <span class="nv">$PS</span><span class="p">.</span><span class="py">BeginInvoke</span><span class="p">()</span> <span class="c"># Start the runspace</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Add the new Runspace to the RunspaceJobs collection</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceJobs</span> <span class="p">=</span> <span class="p">[</span><span class="no">system.collections.arraylist</span><span class="p">]::</span><span class="n">Synchronized</span><span class="p">((</span><span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Collections</span><span class="p">.</span><span class="n">ArrayList</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># lock</span>
</span></span><span class="line"><span class="cl">    <span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="py">Add</span><span class="p">([</span><span class="no">PSCustomObject</span><span class="p">]</span><span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">powerShell</span> <span class="p">=</span> <span class="nv">$PS</span>  <span class="c"># System.Management.Automation.PowerShell object</span>
</span></span><span class="line"><span class="cl">        <span class="n">runspace</span> <span class="p">=</span> <span class="nv">$handle</span> <span class="c"># System.Management.Automation.PowerShellAsyncResult Object</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span> <span class="p">|</span> <span class="nb">Out-Null</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span> <span class="c"># unlock</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Timer to manage Runspace lifecycle</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="py">Windows</span><span class="p">.</span><span class="py">Forms</span><span class="p">.</span><span class="py">Timer</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Enabled</span> <span class="p">=</span> <span class="vm">$true</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Interval</span> <span class="p">=</span> <span class="mf">5000</span>  <span class="c"># Timer code runs every 5 seconds</span>
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Add_Tick</span><span class="p">({</span>
</span></span><span class="line"><span class="cl">    <span class="c"># In the timer code</span>
</span></span><span class="line"><span class="cl">    <span class="k">Foreach</span><span class="p">(</span><span class="nv">$job</span> <span class="k">in</span> <span class="nv">$Script:RunspaceJobs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">IsCompleted</span> <span class="o">-eq</span> <span class="vm">$True</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">           <span class="c"># Capture completed Runspace output and dispose of it to free-up memory</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$RSOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">EndInvoke</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="n">runspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">                <span class="c"># Remove the job from the tracking collection</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="py">Remove</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$Script:RunspaceJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">Write-Host</span> <span class="s2">&#34;Runspace disposal Failed &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="c">#foreach</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">})</span><span class="c">#End of timer scriptblock</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$RunspaceCleanupTimer</span><span class="p">.</span><span class="py">Start</span><span class="p">()</span>
</span></span></code></pre></div><h2 id="capturing-verbose-warning-and-error-streams-from-a-runspace">Capturing Verbose, Warning and Error streams from a Runspace</h2>
<p>By default, the Runspace output streams are not displayed in the parent session console and are lost when the Runspace is disposed.<br>
The output can be captured at Runspace completion using the <strong>Streams</strong> object. The modification below to the Timer script block saves the output to a log file.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">#### Modified Timer code to capture additional output streams at clean-up ####</span>
</span></span><span class="line"><span class="cl"><span class="k">Foreach</span><span class="p">(</span><span class="nv">$job</span> <span class="k">in</span> <span class="nv">$Global:BackgroundJobs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">IsCompleted</span> <span class="o">-eq</span> <span class="vm">$True</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Runspace &#39;</span><span class="p">$(</span><span class="nv">$job</span><span class="p">.</span><span class="py">powershell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="n">name</span><span class="p">)</span><span class="s2">&#39; completed...&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c"># Could also include &#39;DEBUG&#39; and &#39;Information&#39; streams if used in your Runspaces</span>
</span></span><span class="line"><span class="cl">        <span class="nv">$Streams</span> <span class="p">=</span> <span class="vm">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Verbose&#39;</span><span class="p">=</span><span class="s1">&#39;VERBOSE&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Warning&#39;</span><span class="p">=</span><span class="s1">&#39;WARN&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;Error&#39;</span><span class="p">=</span><span class="s1">&#39;ERROR&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">Foreach</span><span class="p">(</span><span class="nv">$StreamType</span> <span class="k">in</span> <span class="nv">$Streams</span><span class="p">.</span><span class="n">Keys</span><span class="p">){</span>                        
</span></span><span class="line"><span class="cl">            <span class="nv">$StreamOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powershell</span><span class="p">.</span><span class="py">Streams</span><span class="p">.</span><span class="s2">&#34;</span><span class="nv">$StreamType</span><span class="s2">&#34;</span>  <span class="c"># Capture the Runspace output for each stream</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="nv">$StreamOutput</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$StreamOutput</span> <span class="p">|</span> <span class="nb">Foreach-Object</span> <span class="p">{</span> <span class="nb">Write-TxtLog</span> <span class="nv">$_</span> <span class="n">-indent</span> <span class="mf">2</span> <span class="n">-severity</span> <span class="vm">$</span><span class="p">(</span><span class="nv">$Streams</span><span class="p">[</span><span class="nv">$StreamType</span><span class="p">])</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Remove-Variable</span> <span class="n">-name</span> <span class="s1">&#39;StreamOutput&#39;</span> <span class="n">-force</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Disposing of runspace...&#34;</span> <span class="n">-indent</span> <span class="mf">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$RSOutput</span> <span class="p">=</span> <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">EndInvoke</span><span class="p">(</span><span class="nv">$job</span><span class="p">.</span><span class="n">runspace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nv">$job</span><span class="p">.</span><span class="py">powerShell</span><span class="p">.</span><span class="py">runspace</span><span class="p">.</span><span class="py">Dispose</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c"># Remove the job from the tracking list</span>
</span></span><span class="line"><span class="cl">            <span class="k">try</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Enter</span><span class="p">(</span><span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="py">Remove</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">finally</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="p">[</span><span class="no">System.Threading.Monitor</span><span class="p">]::</span><span class="n">Exit</span><span class="p">(</span><span class="nv">$Global:BackgroundJobs</span><span class="p">.</span><span class="n">SyncRoot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">catch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">Write-TxtLog</span> <span class="s2">&#34;Failed &#39;</span><span class="nv">$_</span><span class="s2">&#39;&#34;</span> <span class="n">-indent</span> <span class="mf">2</span> <span class="n">-severity</span> <span class="n">ERROR</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c">#foreach</span>
</span></span></code></pre></div><h2 id="displaying-verbose-warning-and-error-streams-in-the-console">Displaying Verbose, Warning and Error Streams in the console</h2>
<p>The approach above captures output when the Runspace code has completed. If you want feedback in the console during execution there are a couple of methods.</p>
<p>Firstly, the simplest option is to use the <strong>.NET Console.Writeline()</strong> method. Although this doesn&rsquo;t capture the PowerShell streams, it is a simple way to provide real-time console output in the parent session.<br>
You will need to implement your own colour-coding to distinguish between warnings or errors if needed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example Runspace code to write to parent PowerShell console ###</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">console</span><span class="p">]::</span><span class="n">ForegroundColor</span><span class="p">=</span><span class="s1">&#39;YELLOW&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">Console</span><span class="p">]::</span><span class="n">WriteLine</span><span class="p">(</span><span class="s1">&#39;Username was not found&#39;</span><span class="p">)</span>  <span class="c"># Automatically writes to the parent session</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="no">console</span><span class="p">]::</span><span class="n">ResetColor</span><span class="p">()</span>
</span></span></code></pre></div><p>Alternatively, you could pass the built-in $Host variable from the parent session into the Runspace and use methods like WriteVerboseLine() as shown below.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="c">### Example writing to parent console using the $Host variable </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Parent session code</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span> <span class="p">=</span> <span class="p">[</span><span class="no">runspacefactory</span><span class="p">]::</span><span class="n">CreateRunspace</span><span class="p">(</span><span class="nv">$initialSessionState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">Open</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nv">$Runspace</span><span class="p">.</span><span class="py">SessionStateProxy</span><span class="p">.</span><span class="py">SetVariable</span><span class="p">(</span><span class="s1">&#39;ParentHost&#39;</span><span class="p">,</span><span class="nv">$Host</span><span class="p">)</span>  <span class="c"># Built-in host variable passed into the Runspace as $ParentHost</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># Write to the parent console from the Runspace script block</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">ui</span><span class="p">.</span><span class="py">WriteVerboseLine</span><span class="p">(</span><span class="s2">&#34;Realtime verbose output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">UI</span><span class="p">.</span><span class="py">WriteWarningLine</span><span class="p">(</span><span class="s2">&#34;Realtime warning output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">$ParentHost</span><span class="p">.</span><span class="py">UI</span><span class="p">.</span><span class="py">WriteErrorLine</span><span class="p">(</span><span class="s2">&#34;Realtime error output from Runspace in parent console&#34;</span><span class="p">)</span>
</span></span></code></pre></div><p>See the <a href="https://github.com/gbdixg/Show-Win32AppUI">Show-Win32AppUI tool</a> for an example of using these ideas together in a WPF app.</p>
<p>See <a href="/2023/03/21/PowerShellWPFPt2/">part2 of this series</a> for information on WPF controls, events and XAML.</p>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
    <item>
      <title>Create Intune Win32Apps with a PowerShell GUI front-end</title>
      <link>https://write-verbose.com/2023/03/18/Show-Win32AppUI/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://write-verbose.com/2023/03/18/Show-Win32AppUI/</guid>
      <description>A PowerShell GUI app to simplify creating Win32 Apps in Intune</description>
      <content:encoded><![CDATA[<p>A GUI tool for end-to-end creation of Win32 Apps in Microsoft Intune.</p>
<p>This post provides details of &ldquo;Show-Win32AppUI&rdquo;, a GUI tool that simplifies the end-to-end process of creating Win32 Apps in Intune.</p>
<p>The GitHub source is <a href="https://github.com/gbdixg/Show-Win32AppUI">available here</a>.  Instructions for setup and use are below.</p>
<p><img loading="lazy" src="/img/Show-Win32AppUI.gif" alt="Show-Win32AppUI"  />
</p>
<p>This isn&rsquo;t a one size fits all community tool. You will likely need to modify it to meet your needs. However, its written in PowerShell and has code comments and blog posts to make editing simpler.</p>
<h1 id="setup">SETUP</h1>
<h2 id="modules">Modules</h2>
<p><em>Show-Win32AppUI</em> depends on two PowerShell modules. Install these modules if you don&rsquo;t already have them.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">MSAL</span><span class="p">.</span><span class="nb">PS
</span></span></span><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">IntuneWin32App</span>
</span></span></code></pre></div><p>The most recent tested versions are listed below:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">MSAL</span><span class="p">.</span><span class="nb">PS </span><span class="n">-RequiredVersion</span> <span class="mf">4.37</span><span class="p">.</span><span class="py">0</span><span class="p">.</span><span class="py">0</span>
</span></span><span class="line"><span class="cl"><span class="nb">Install-Module</span> <span class="n">-Name</span> <span class="n">IntuneWin32App</span> <span class="n">-RequiredVersion</span> <span class="mf">1.4</span><span class="p">.</span><span class="py">0</span>
</span></span></code></pre></div><h2 id="tenant-id">Tenant ID</h2>
<p>Update the $TenantID on line 4 of <em>Show-Win32AppUI.ps1</em> to use your required Azure tenant. Your tenant ID is available from the <a href="https://aad.portal.azure.com/">Azure AD portal</a> <em>Overview</em> page.</p>
<h2 id="azure-client-app">Azure Client App</h2>
<p>An Azure Client App is used with interactive authentication to access the Microsoft Graph. There are two setup steps required:</p>
<ol>
<li><strong>Specify the Azure application</strong><br>
By default, the tool will use the built-in <em>Microsoft Graph PowerShell</em> enterprise application. However, I recommend creating a custom Azure app in your own tenant. A step by step guide to creating a custom app is available <a href="/2023/03/19/AzureAppRegistration/">here</a>.</li>
</ol>
<blockquote>
<p>If using a custom app, update <em>Show-Win32AppUI.ps1</em> to set the $ClientID variable on line 6 to match the client ID (a.k.a Application ID) of your app.</p>
</blockquote>
<ol start="2">
<li><strong>Consent to the required permissions on behalf of your tenant</strong><br>
Whether you use a custom app or Microsoft Graph PowerShell, the app must be configured with the required API permissions and consent must be granted. The <strong>delegated</strong> permissions are listed below. A step by step for setting these permissions can be found in the second part of <a href="/2023/03/19/AzureAppRegistration/">this article</a>.</li>
</ol>
<ul>
<li>Directory.AccessAsUser.All</li>
<li>DeviceManagementApps.ReadWrite.All</li>
<li>Group.ReadWrite.All</li>
<li>GroupMember.ReadWrite.All</li>
<li>User.Read</li>
</ul>
<h2 id="user-permissions">User permissions</h2>
<p><em>Delegated consent</em> uses the intersection of application permissions and user permissions to authorise access. i.e. the authenticated user must have the required permissions as well as the application. When using the app, authenticate using an Azure account with <em>one</em> of the following roles:</p>
<ul>
<li>Intune Administrator</li>
<li>Global Administrator</li>
</ul>
<h2 id="workstation-permissions">Workstation permissions</h2>
<p>The tool does not need administrative access to the client workstation. Internet access is required, to download the <a href="https://github.com/Microsoft/Microsoft-Win32-Content-Prep-Tool">Win32 Content Prep tool</a> on first use.</p>
<h2 id="powershell-script-execution">PowerShell script execution</h2>
<p>PowerShell script execution is disabled on Windows clients by default. Use one of the methods below to allow script execution on the workstation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="nb">set-executionpolicy</span> <span class="n">Unrestricted</span>
</span></span></code></pre></div><p>or</p>
<pre tabindex="0"><code class="language-CMD" data-lang="CMD">powershell -executionpolicy bypass -file &lt;path to script&gt;
</code></pre><h1 id="launch-the-tool">Launch the tool</h1>
<p>Start a PowerShell 5.1 or Pwsh 7.x console and execute the script as follows:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="p">.\</span><span class="nb">Show-Win32AppUI</span><span class="p">.</span><span class="py">ps1</span>
</span></span></code></pre></div><p>To show debug information in the console add the <em>WriteHost</em> switch:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="p">.\</span><span class="nb">Show-Win32AppUI</span><span class="p">.</span><span class="py">ps1</span> <span class="n">-WriteHost</span>
</span></span></code></pre></div><h1 id="using-the-tool">Using the tool</h1>
<table>
  <tr>
    <td><h3>Page1 - Package</h3>
    Use the file dialog to select the main <b>Setup File</b> - .msi, .exe or .ps1.<br>
    For an .msi file, the setup and uninstall automatically uses MSIEXEC, defaulting to a quiet install/uninstall and verbose logging.<br>
    For an .exe file, the setup parameters default to /S, but you should check the vendor information and replace this as appropriate.<br>
    For a .ps1 file, setup and uninstall defaults to -noprofile and -executionpolicy bypass.<br><br>
    The package <b>source folder</b> is the folder containing the setup file. All the files in this folder are packaged into an .intunewin file in a later step.<br><br>
    The tool creates installation wrapper scripts called install.ps1 and uninstall.ps1 in the package source folder. Existing files with these names are overwritten.<br><br>
    The <i>Next</i> button is only available when required fields have been completed.
    </td>
    <td width="450"><img src="/img/Win32AppUI-Page1.png" alt="1" width = "450px" height = "850px"></td>
   </tr>
   <tr>
      <td><h3>Page2 - Deployment</h3>
      The <b>Display Name</b> is built from the Publisher, App Name, Version and Package Number. If the language is changed from the default or the <i>Bitness</i> is changed to x86, these are also included in the Display Name<br><br>
      For .msi and .exe files, the fields are populated with information from the setup file, but can be edited as required.<br><br>
      If there is already an Intune application with the same Display Name a warning will appear in the status bar. The simplest solution is to increment the Package Number.<br><br>
      The <i>Next</i> button is only available when required fields have been completed.
      </td>
      <td width="450"><img src="/img/Win32AppUI-Page2.png" alt="2" width = "450px" height = "850px"></td>
  </tr>
  <tr>
    <td><h3>Page3 - Assignment</h3>
    <b>Assignment Groups</b> shows the names of three AAD groups for <i>Required Install, Available Install and Uninstall</i>. The group name suffix is based on the App Name from Page 2 and cannot be edited here.<br><br>
    The Owner must be a UPN of an AAD user. Start typing a name in the top box to see a list of options. Select a name and click Add. The Owner is set on the properties of the Win32App and the AAD groups.<br><br>
    The Dependency and Supercedence lists are populated with existing Win32 Apps. Select from the list if these options are needed. Currently you can only select one of these options due to a limitation in the IntuneWin32App module.<br><br>
    Click on the Logo box to select a image file for display with the application in the Company Portal.<br><br>
    The <i>Next</i> button is only available when required fields have been completed.
    </td>
    <td width="450"><img src="/img/Win32AppUI-Page3.png" alt="3" width = "450px" height = "850px"></td>
  </tr>
  <tr>
    <td><h3>Page3 - Implement</h3>
    The final page follows a step-by-step approach to creating the Win32 App.<br><br>
    <b>Create Wrapper Scripts</b> creates an install.ps1 and uninstall.ps1 file in the package source folder.<br><br>
    <b>Create Intunewin Package</b> uses the Win32 Content Prep Tool to build an .intunewin file in the Output Folder.<br><br>
    <b>Create App Groups</b> creates three AAD groups for Required Install, Available Install and Uninstall. If the groups already exist they are re-used.<br><br>
    <b>Create Win32 App</b> creates the Win32 App in Intune and uploads the .intunewin file. This step can take some time depending on the package size.<br><br>
    <b>Configure Dependency / Configure Supercedence</b> modifies the Win32 App in Intune. These steps are skipped if they are set to None.<br><br>
    <b>Configure Assignment</b> modifies the Win32 App in Intune to add the assignment groups created in the earlier step.
    </td>
    <td width="450"><img src="/img/Win32AppUI-Page4.png" alt="4" width = "450px" height = "850px"></td>
  </tr>
</table>
<h1 id="troubleshooting">Troubleshooting</h1>
<p>The tool creates a debug log on every run with detailed information and error messages. The default LogFolder is C:\Temp, but can be modified on Line 8 of Show-Win32AppUI.ps1.</p>
<p>The -WriteHost switch will also show the debug output in the console.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PowerShell" data-lang="PowerShell"><span class="line"><span class="cl"><span class="p">.\</span><span class="nb">Show-Win32AppUI</span><span class="p">.</span><span class="py">ps1</span> <span class="n">-writehost</span>
</span></span></code></pre></div><p><img loading="lazy" src="/img/Win32AppUI-WriteHost.png" alt="WriteHost"  />
</p>
<h1 id="options">Options</h1>
<p>The variables section in Show-Win32AppUI.ps1 allows default settings to be modified. The following section is at Line 50:</p>
<p><img loading="lazy" src="/img/Win32AppUI-Defaults.png" alt="WriteHost"  />
</p>
<h1 id="detection-method">Detection Method</h1>
<p>The Win32 app detection is hardcoded to use a file exists method. The <em>Install.ps1</em> script wrapper creates a &ldquo;.ps1.tag&rdquo; file under the %PROGRAMDATA% folder and <em>Uninstall.ps1</em> deletes it - a detection method <a href="https://oofhours.com/2020/05/18/two-for-one-updated-autopilot-branding-and-update-os-scripts/">first suggested by Michael Niehaus</a></p>
<h1 id="credits">Credits</h1>
<ul>
<li>
<p>Show-Win32AppUI is a front-end to the excellent <a href="https://github.com/MSEndpointMgr/IntuneWin32App">IntuneWin32App module</a>. Full credit to the contributors of this project.</p>
</li>
<li>
<p>The <a href="https://github.com/AzureAD/MSAL.PS">MSAL.PS module</a> has simplified the transition from ADAL to MSAL authentication.</p>
</li>
<li>
<p><a href="https://learn-powershell.net/">Boe Prox</a> for PowerShell Runspace tips</p>
</li>
<li>
<p><a href="https://smsagent.blog/blog-posts/">SMSAgent</a> for PowerShell WPF tips</p>
</li>
</ul>
<p><br/><br/></p>
<blockquote>
<p>This article was originally posted on <a href="http://write-verbose.com">Write-Verbose.com</a></p>
</blockquote>]]></content:encoded>
    </item>
    
  </channel>
</rss>
